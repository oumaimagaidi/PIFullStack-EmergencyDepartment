This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
components.json
composer.json
eslint.config.js
index.html
package.json
postcss.config.js
public/index.html
public/manifest.json
public/placeholder.svg
public/robots.txt
README.md
src/__tests__/login.test.jsx
src/__tests__/Profile.test.jsx
src/App.css
src/App.jsx
src/App.test.js
src/components/AnimatedBackground.css
src/components/AnimatedBackground.jsx
src/components/AuthLayout.js
src/components/DashboardHeader.jsx
src/components/DashboardSidebar.jsx
src/components/EditableField.jsx
src/components/EmergencyRegister.jsx
src/components/FeedBack.jsx
src/components/footer.css
src/components/footer.jsx
src/components/ForgotPassword.jsx
src/components/header.css
src/components/header.jsx
src/components/HeaderProfile.jsx
src/components/Hexagon.css
src/components/HexGrid.jsx
src/components/home.jsx
src/components/Layout.jsx
src/components/LoadingState.jsx
src/components/login.jsx
src/components/Login/login.jsx
src/components/ParticlesComponent.jsx
src/components/profile.jsx
src/components/ProfileActions.jsx
src/components/ProfileAvatar.jsx
src/components/ProfileContent.jsx
src/components/ProfileHeader.jsx
src/components/ProtectedRoute.jsx
src/components/register.jsx
src/components/ResetPassword.jsx
src/components/staff/ResourceManagement.jsx
src/components/staff/StaffDirectory.jsx
src/components/staff/StaffOverview.jsx
src/components/TabNavigation.jsx
src/components/theme-provider.jsx
src/components/ui/accordion.jsx
src/components/ui/alert-dialog.jsx
src/components/ui/alert.jsx
src/components/ui/aspect-ratio.jsx
src/components/ui/avatar.jsx
src/components/ui/badge.jsx
src/components/ui/breadcrumb.jsx
src/components/ui/button.jsx
src/components/ui/calendar.jsx
src/components/ui/card.jsx
src/components/ui/carousel.jsx
src/components/ui/chart.jsx
src/components/ui/checkbox.jsx
src/components/ui/collapsible.jsx
src/components/ui/command.jsx
src/components/ui/context-menu.jsx
src/components/ui/dialog.jsx
src/components/ui/drawer.jsx
src/components/ui/dropdown-menu.jsx
src/components/ui/form.jsx
src/components/ui/hover-card.jsx
src/components/ui/input-otp.jsx
src/components/ui/input.jsx
src/components/ui/label.jsx
src/components/ui/menubar.jsx
src/components/ui/navigation-menu.jsx
src/components/ui/pagination.jsx
src/components/ui/popover.jsx
src/components/ui/progress.jsx
src/components/ui/radio-group.jsx
src/components/ui/resizable.jsx
src/components/ui/scroll-area.jsx
src/components/ui/select.jsx
src/components/ui/separator.jsx
src/components/ui/sheet.jsx
src/components/ui/sidebar.jsx
src/components/ui/skeleton.jsx
src/components/ui/slider.jsx
src/components/ui/sonner.jsx
src/components/ui/switch.jsx
src/components/ui/table.jsx
src/components/ui/tabs.jsx
src/components/ui/textarea.jsx
src/components/ui/toast.jsx
src/components/ui/toaster.jsx
src/components/ui/toggle-group.jsx
src/components/ui/toggle.jsx
src/components/ui/tooltip.jsx
src/components/ui/use-toast.js
src/context/NotificationContext.jsx
src/context/SocketContext.jsx
src/hooks/use-mobile.jsx
src/hooks/use-toast.js
src/index.css
src/index.jsx
src/Layouts/DashboardLayout.jsx
src/Layouts/MainLayout.jsx
src/Layouts/PublicLayout.jsx
src/lib/utils.jsx
src/logo.svg
src/main.jsx
src/pages/AddMedicalRecordModal.css
src/pages/AddMedicalRecordModal.jsx
src/pages/AddPatientFileModal.css
src/pages/AddPatientFileModal.jsx
src/pages/Alerts.jsx
src/pages/AmbulanceCheck.jsx
src/pages/AmbulanceDashboard.jsx
src/pages/AmbulanceNurseDashboard.jsx
src/pages/annotation/AnnotationDialog.jsx
src/pages/annotation/AnnotationList.jsx
src/pages/annotation/AnnotationMarker.jsx
src/pages/archive/ArchivedFilesList.jsx
src/pages/archive/ArchiveDialog.jsx
src/pages/archive/RestoreDialog.jsx
src/pages/Calendar.jsx
src/pages/ConfirmationEmergencyRegister.jsx
src/pages/Dashboard.jsx
src/pages/Doctors.jsx
src/pages/Emergency.jsx
src/pages/EmergencyRegister.jsx
src/pages/EmergencyStatus.jsx
src/pages/Forum.jsx
src/pages/index.jsx
src/pages/Login.jsx
src/pages/MedicalDocument.jsx
src/pages/MedicalRecordDetails.jsx
src/pages/NotFound.jsx
src/pages/PatientResourcesPage.jsx
src/pages/Patients.jsx
src/pages/ProfilePage.jsx
src/pages/Records.jsx
src/pages/ResourcesPage.jsx
src/pages/Settings.jsx
src/pages/SharedRecordsTab.jsx
src/pages/ShareMedicalRecordButton.jsx
src/pages/Staff.jsx
src/reportWebVitals.js
src/setupTests.js
src/vite-env.d.ts
tailwind.config.js
vite.config.js
vite.config.js.timestamp-1741763411979-d1942f0aca7f2.mjs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="composer.json">
{
    "require": {
        "twbs/bootstrap": "5.3.3"
    }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>emergency-admin-dashboard</title>
  <meta name="description" content="Lovable Generated Project" />
  <meta name="author" content="Lovable" />
  <meta property="og:image" content="/og-image.png" />
</head>

<body>
  <div id="root"></div>
  <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
  <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html>
</file>

<file path="package.json">
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "vitest run src/__tests__",
    "test:ci": "vitest run src/__tests__ --coverage"
  },
  "dependencies": {
    "@babel/core": "^7.26.9",
    "@babel/preset-env": "^7.26.9",
    "@babel/preset-react": "^7.26.3",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@hookform/resolvers": "^3.10.0",
    "@mui/icons-material": "^7.1.0",
    "@mui/material": "^7.1.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@react-oauth/google": "^0.12.1",
    "@tanstack/react-query": "^5.56.2",
    "@tsparticles/all": "^3.8.1",
    "@tsparticles/engine": "^3.8.1",
    "@tsparticles/react": "^3.0.0",
    "@tsparticles/slim": "^3.8.1",
    "axios": "^1.8.1",
    "bootstrap": "^5.3.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "framer-motion": "^12.4.10",
    "input-otp": "^1.2.4",
    "js-cookie": "^3.0.5",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.9",
    "react-calendar": "^5.1.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-google-recaptcha": "^3.1.0",
    "react-hook-form": "^7.54.2",
    "react-icons": "^5.5.0",
    "react-intersection-observer": "^9.16.0",
    "react-leaflet": "^4.2.1",
    "react-multi-carousel": "^2.8.5",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.30.0",
    "react-simple-chatbot": "^0.6.1",
    "react-toastify": "^11.0.5",
    "react-tsparticles": "^2.1.0",
    "recharts": "^2.12.7",
    "socket.io-client": "^4.8.1",
    "sonner": "^1.5.0",
    "styled-components": "^6.1.17",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "tsparticles": "^3.8.1",
    "tsparticles-engine": "^2.12.0",
    "tsparticles-slim": "^2.12.0",
    "vaul": "^0.9.3",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@babel/preset-typescript": "^7.26.0",
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "@vitest/coverage-v8": "^3.0.8",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "jsdom": "^26.0.0",
    "lovable-tagger": "^1.1.3",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.14",
    "vitest": "^3.0.8"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
</file>

<file path="src/__tests__/login.test.jsx">
import "@testing-library/jest-dom";
import { render, screen } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom"; // Mock React Router
import { vi } from "vitest"; // Vitest's mocking utilities
import Login from "../components/login";

// Mock axios
vi.mock("axios", () => ({
  default: {
    post: vi.fn(() => Promise.resolve({ data: { user: { username: "testuser", role: "Patient" } } })),
  },
}));

// Mock GoogleOAuthProvider and GoogleLogin
vi.mock("@react-oauth/google", () => ({
  GoogleOAuthProvider: ({ children }) => <div>{children}</div>,
  GoogleLogin: ({ onSuccess }) => (
    <button onClick={() => onSuccess({ credential: "mock-token" })}>Google Login</button>
  ),
}));

describe("Login Component", () => {
  it("renders the Sign In heading", () => {
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    const headingElement = screen.getByText(/sign in/i);
    expect(headingElement).toBeInTheDocument();
  });
});
</file>

<file path="src/__tests__/Profile.test.jsx">
import "@testing-library/jest-dom";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { vi } from "vitest";
import Profile from "../components/profile";
import ProfileContent from '../components/ProfileContent';
import axios from "axios";
import Cookies from "js-cookie";

// Mock axios
vi.mock("axios", () => ({
  default: {
    get: vi.fn(() =>
      Promise.resolve({
        data: {
          personal: { username: "testuser", role: "Patient", profileImage: "test.jpg" },
          contact: {},
          emergencyContacts: {},
          settings: {},
          medical: {},
          professional: {},
          certifications: {},
          appointments: {},
        },
      })
    ),
    put: vi.fn(() =>
      Promise.resolve({
        status: 200,
        data: {
          personal: { username: "updateduser" },
          contact: {},
          emergencyContacts: {},
          settings: {},
          medical: {},
          professional: {},
          certifications: {},
          appointments: {},
        },
      })
    ),
  },
}));

// Mock js-cookie
vi.mock("js-cookie", () => ({
  default: {
    get: vi.fn(() => "mock-token"),
  },
}));

// Mock child components
vi.mock("../components/ProfileContent", () => ({
  default: ({ profileData, activeTab, setActiveTab, isEditing, setIsEditing, handleEdit, handleSave }) => (
    <div data-testid="profile-content">
      <div data-testid="profile-header">
        {profileData.personal.username} - {profileData.personal.role} - {profileData.personal.profileImage}
      </div>
      <button onClick={() => setActiveTab("medical")}>Switch to Medical</button>
      <button onClick={() => setIsEditing(true)}>Edit</button>
      {isEditing && (
        <div>
          <input
            data-testid="edit-input"
            value={profileData.personal.username || ""}
            onChange={(e) => handleEdit("personal", "username", e.target.value)}
          />
          <button onClick={handleSave}>Save</button>
        </div>
      )}
    </div>
  ),
}));

vi.mock("../components/LoadingState", () => ({
  default: () => <div data-testid="loading-state">Loading...</div>,
}));

// Mock toast
vi.mock("sonner", () => ({
  toast: {
    success: vi.fn(),
    error: vi.fn(),
  },
}));

describe("Profile Component", () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it("renders loading state initially", () => {
    render(<Profile />);
    expect(screen.getByTestId("loading-state")).toBeInTheDocument();
  });

  it("renders profile data after successful fetch", async () => {
    render(<Profile />);
    await waitFor(() => {
      expect(screen.getByTestId("profile-content")).toBeInTheDocument();
      expect(screen.getByTestId("profile-header")).toHaveTextContent("testuser - Patient - test.jpg");
    });
  });

  it("displays error message on fetch failure", async () => {
    vi.mocked(axios.get).mockRejectedValueOnce(new Error("Fetch error"));
    render(<Profile />);
    await waitFor(() => {
      expect(screen.getByText(/Error setting up request: Fetch error/i)).toBeInTheDocument();
    });
  });

  it("switches tabs when clicking tab button", async () => {
    const setActiveTabSpy = vi.fn();
    render(
      <ProfileContent
        profileData={{
          personal: { username: "testuser", role: "Patient", profileImage: "test.jpg" },
          contact: {},
          emergencyContacts: {},
          settings: {},
          medical: {},
          professional: {},
          certifications: {},
          appointments: {},
        }}
        activeTab="personal"
        setActiveTab={setActiveTabSpy}
        isEditing={false}
        setIsEditing={vi.fn()}
        handleEdit={vi.fn()}
        handleSave={vi.fn()}
      />
    );
    fireEvent.click(screen.getByText("Switch to Medical"));
    expect(setActiveTabSpy).toHaveBeenCalledWith("medical");
  });

  it("enters editing mode and updates field", async () => {
    render(<Profile />);
    await waitFor(() => screen.getByTestId("profile-content"));
    fireEvent.click(screen.getByText("Edit"));
    const input = screen.getByTestId("edit-input");
    expect(input).toBeInTheDocument();
    fireEvent.change(input, { target: { value: "newuser" } });
    expect(input).toHaveValue("newuser");
  });

  it("saves profile data successfully", async () => {
    render(<Profile />);
    await waitFor(() => screen.getByTestId("profile-content"));
    fireEvent.click(screen.getByText("Edit"));
    const input = screen.getByTestId("edit-input");
    fireEvent.change(input, { target: { value: "newuser" } });
    fireEvent.click(screen.getByText("Save"));
    await waitFor(() => {
      expect(vi.mocked(axios.put)).toHaveBeenCalled();
      expect(screen.getByTestId("profile-header")).toHaveTextContent("updateduser");
    });
  });
});
</file>

<file path="src/App.css">
/* Hero Section */
/* Modern Emergency Department Home Page Styles */
.genre-card {
  background: rgba(255, 255, 255, 0.6); /* White with 20% opacity */
  border-radius: 10px;
  padding: 30x;
  backdrop-filter: blur(6px);
  border: 1px solid rgba(255, 255, 255, 0.3);
}
/* Base Styles */
/* Hero Section */
/* Modern Emergency Department Home Page Styles */

/* Base Styles */
.home-container {
  width: 100%;
  overflow-x: hidden;
  color: #333;
  padding-top: 80px; /* Space for fixed header */
}

section {
  padding: 60px 20px;
  max-width: 1200px;
  margin: 0 auto;
}

h1,
h2,
h3,
h4 {
  margin: 0;
  line-height: 1.3;
}

p {
  line-height: 1.6;
  margin: 0;
}

/* Hero Section */
.hero-section {
  padding-top: 40px;
  position: relative;
}

.hero-content {
  display: flex;
  align-items: center;
  gap: 40px;
}

.hero-text {
  flex: 1;
  max-width: 600px;
}

.emergency-badge {
  display: inline-flex;
  align-items: center;
  background-color: rgba(255, 66, 66, 0.1);
  color: #ff4242;
  padding: 8px 16px;
  border-radius: 30px;
  font-weight: 600;
  margin-bottom: 20px;
}

.pulse-dot {
  width: 10px;
  height: 10px;
  background-color: #ff4242;
  border-radius: 50%;
  margin-right: 10px;
  display: inline-block;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(255, 66, 66, 0.7);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(255, 66, 66, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(255, 66, 66, 0);
  }
}

.hero-text h1 {
  font-size: 2.8rem;
  color: #1e3a8a;
  margin-bottom: 20px;
}

.hero-text p {
  color: #555;
  font-size: 1.1rem;
  margin-bottom: 30px;
}

.hero-buttons {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.emergency-btn {
  display: inline-flex;
  align-items: center;
  background-color: #ff4242;
  color: white;
  padding: 12px 24px;
  border-radius: 30px;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(255, 66, 66, 0.3);
}

.emergency-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(255, 66, 66, 0.4);
}

.btn-icon {
  margin-right: 8px;
  font-size: 1.2rem;
}

.about-btn {
  display: inline-flex;
  align-items: center;
  background-color: transparent;
  color: #1e3a8a;
  padding: 12px 24px;
  border-radius: 30px;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.3s ease;
  border: 2px solid #1e3a8a;
}

.about-btn:hover {
  background-color: rgba(66, 165, 255, 0.1);
}

.hero-image {
  flex: 1;
  position: relative;
}

.image-container {
  position: relative;
  display: flex;
  justify-content: center;
}

.animated-image {
  max-width: 100%;
  height: auto;
  z-index: 2;
  animation: float 4s ease-in-out infinite;
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-15px);
  }
  100% {
    transform: translateY(0px);
  }
}

.blue-circle {
  position: absolute;
  width: 300px;
  height: 300px;
  background: radial-gradient(circle, rgba(66, 165, 255, 0.2) 0%, rgba(66, 165, 255, 0) 70%);
  border-radius: 50%;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 1;
}

/* Stats Bar */
.stats-bar {
  display: flex;
  justify-content: space-between;
  background-color: white;
  border-radius: 15px;
  padding: 30px;
  margin-top: 60px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  position: relative;
}

.stat-item {
  text-align: center;
  flex: 1;
}

.stat-item h3 {
  font-size: 2rem;
  color: #1e3a8a;
  margin-bottom: 5px;
}

.stat-item p {
  color: #666;
  font-size: 0.9rem;
}

.stat-divider {
  width: 1px;
  background-color: rgba(0, 0, 0, 0.1);
  margin: 0 15px;
}

/* Services Section */
.services-section {
  padding-top: 80px;
  padding-bottom: 80px;
  background-color: #f8fbff;
}

.section-header {
  text-align: center;
  margin-bottom: 50px;
}

.section-header h2 {
  color: #0056b3;
  font-size: 2.5rem;
  margin-bottom: 15px;
}

.section-header p {
  color: #666;
  max-width: 700px;
  margin: 0 auto;
}

.services-carousel {
  padding: 20px 0;
}

.service-card {
  background: white;
  border-radius: 15px;
  padding: 30px;
  margin: 15px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  height: 320px;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.service-card:hover {
  transform: translateY(-10px);
  box-shadow: 0 15px 40px rgba(66, 165, 255, 0.15);
}

.service-icon-container {
  width: 70px;
  height: 70px;
  background-color: #0056b3;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
}

.service-icon {
  font-size: 30px;
  color: white;
}

.service-name {
  color: #0056b3;
  font-size: 1.3rem;
  margin-bottom: 15px;
}

.service-description {
  color: #666;
  margin-bottom: 20px;
  flex-grow: 1;
}

.service-link {
  color: #42a5ff;
  text-decoration: none;
  font-weight: 600;
  position: relative;
  padding-bottom: 5px;
}

.service-link::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 2px;
  bottom: 0;
  left: 0;
  background-color: #42a5ff;
  transform: scaleX(0);
  transform-origin: bottom right;
  transition: transform 0.3s ease;
}

.service-link:hover::after {
  transform: scaleX(1);
  transform-origin: bottom left;
}

.custom-arrow {
  width: 50px;
  height: 50px;
  background-color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  cursor: pointer;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  z-index: 10;
  color: #42a5ff;
  transition: all 0.3s ease;
}

.custom-arrow:hover {
  background-color: #1e3a8a;
  color: white;
}

.left-arrow {
  left: -25px;
}

.right-arrow {
  right: -25px;
}

/* About Section */
.about-section {
  padding-top: 80px;
  padding-bottom: 80px;
}

.about-content {
  display: flex;
  align-items: center;
  gap: 60px;
}

.about-image {
  flex: 1;
  position: relative;
}

.bio-image {
  max-width: 100%;
  border-radius: 15px;
  box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
  position: relative;
  z-index: 2;
}

.image-accent {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: #1e3a8a;
  border-radius: 15px;
  top: 20px;
  left: 20px;
  z-index: 1;
}

.about-text {
  flex: 1;
}

.section-badge {
  display: inline-block;
  background-color: rgba(66, 165, 255, 0.1);
  color: #1e3a8a;
  padding: 8px 16px;
  border-radius: 30px;
  font-weight: 600;
  margin-bottom: 20px;
}

.about-text h2 {
  color: #0056b3;
  font-size: 2.5rem;
  margin-bottom: 20px;
}

.about-description {
  color: #555;
  margin-bottom: 30px;
}

.about-features {
  display: flex;
  flex-direction: column;
  gap: 20px;
  margin-bottom: 30px;
}

.feature {
  display: flex;
  align-items: flex-start;
  gap: 15px;
}

.feature-icon {
  width: 50px;
  height: 50px;
  background-color: rgba(66, 165, 255, 0.1);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #1e3a8a;
  font-size: 1.5rem;
  flex-shrink: 0;
}

.feature-text h4 {
  color: #0056b3;
  margin-bottom: 5px;
}

.feature-text p {
  color: #666;
}

.about-btn-secondary {
  display: inline-flex;
  align-items: center;
  background-color: #1e3a8a;
  color: white;
  padding: 12px 24px;
  border-radius: 30px;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(66, 165, 255, 0.3);
}

.about-btn-secondary:hover {
  background-color: #0056b3;
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(66, 165, 255, 0.4);
}

/* Call to Action Section */
.cta-section {
  background: linear-gradient(135deg, #1e3a8a 0%, #0056b3 100%);
  border-radius: 15px;
  padding: 60px;
  margin-top: 40px;
  margin-bottom: 60px;
  text-align: center;
  color: white;
}

.cta-content h2 {
  font-size: 2.5rem;
  margin-bottom: 15px;
}

.cta-content p {
  max-width: 600px;
  margin: 0 auto 30px;
  opacity: 0.9;
}

.cta-button {
  display: inline-flex;
  align-items: center;
  background-color: white;
  color: #1e3a8a;
  padding: 15px 30px;
  border-radius: 30px;
  font-weight: 600;
  font-size: 1.1rem;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.cta-button:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
}

/* Responsive Styles */
@media (max-width: 1024px) {
  .hero-content {
    flex-direction: column;
  }

  .hero-text {
    text-align: center;
    max-width: 100%;
  }

  .hero-buttons {
    justify-content: center;
  }

  .stats-bar {
    flex-wrap: wrap;
    gap: 20px;
  }

  .stat-divider {
    display: none;
  }

  .stat-item {
    flex-basis: 45%;
  }

  .about-content {
    flex-direction: column;
  }

  .about-text {
    text-align: center;
  }

  .about-features {
    align-items: center;
  }

  .feature {
    max-width: 400px;
  }
}

@media (max-width: 768px) {
  .hero-text h1 {
    font-size: 2.2rem;
  }

  .section-header h2,
  .about-text h2,
  .cta-content h2 {
    font-size: 2rem;
  }

  .stat-item {
    flex-basis: 100%;
  }

  .custom-arrow {
    display: none;
  }

  .cta-section {
    padding: 40px 20px;
  }
}

@media (max-width: 480px) {
  .hero-text h1 {
    font-size: 1.8rem;
  }

  .hero-buttons {
    flex-direction: column;
    width: 100%;
  }

  .emergency-btn,
  .about-btn {
    width: 100%;
    justify-content: center;
  }

  .feature {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }
}
.app-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 0;
 
}

.hero {
  display: flex;
  gap: 20px;
  padding-top: 5px;
  padding-bottom: 120px;
  position: relative;
  top :100px ;
}

.hero .banner {
  flex: 1;
  
}

.hero .banner h1,
.hero .banner p {
  max-width: 550px;
}

.hero .banner h1 {
  letter-spacing: 2px;
  word-spacing: 5px;
  font-size: 40px;
  color: #333;

    
}

.hero .banner p {
  color: #555;
  letter-spacing: 2px;
  line-height: 1.6;
}

.hero .banner span {
  position: absolute;
  right: -300px;
  top: -200px;
  z-index: -1;
}

.hero .banner:first-child {
  display: flex;
  justify-content: center;
  flex-direction: column;
  gap: 50px;
  margin-top: -20px;
}

.hero .banner:last-child {
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: hidden;
  margin-top: -20px;      
}

.animated-image {
  animation: moveUpDown 1s infinite alternate ease-in-out;
}
/* Style du bouton Emergency */
/* Style du bouton Emergency */
.emergency-btn {
  background-color: #edf4f8;
  color: #333;
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  font-weight: bold;
  border-radius: 30px; /* Arrondi du bouton */
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  display: inline-block;
  margin-top: 15px;
  width: 250px;
  text-align: center;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); /* Ombre légère pour un effet 3D */
}

.emergency-btn:hover {
  background-color: #d6e4ef;
  transform: scale(1.05); /* Léger effet zoom au survol */
}



@keyframes moveUpDown {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(20px);
  }
}

/* Biography Section */
.biography {
  display: flex;
  gap: 50px;
  padding-top: 5px;
  padding-bottom: 60px;
}

.biography .banner:first-child {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: -100px;
}

.biography .banner:last-child {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: -50px;
}

.biography .banner h3 {
  letter-spacing: 2px;
  word-spacing: 5px;
  font-size: 40px;
  color: #333;
}

.biography .banner p:first-child {
  
  font-size: 24px;
  letter-spacing: 2px;
  color: #555;
}

/* Services Section */
/* Services Section */
.services-section {
  margin-top: 50px;
  text-align: center;
}

.services-carousel .custom-arrow {
  width: 40px;
  height: 40px;
  background-color: rgba(173, 216, 230, 0.8);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  cursor: pointer;
}

.left-arrow { left: -50px; }
.right-arrow { right: -50px; }

.service-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: #edf4f8;
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
  width: 250px;
  height: 250px;
  margin: auto;
}

.service-image {
  width: 200px;
  height: 200px;
  object-fit: contain;
  margin-bottom: 10px;
}

.service-name {
  font-weight: 600;
  color: #2c3e50;
}
/* Responsive Design */
@media (max-width: 1186px) {
  .hero .banner span {
    right: -400px;
  }
  .hero .banner h1 {
    font-size: 32px;
  }
}

@media (max-width: 1085px) {
  .hero .banner span {
    right: -480px;
    top: -315px;
  }
}

@media (max-width: 925px) {
  .hero {
    flex-direction: column;
  }
  .biography {
    flex-direction: column-reverse;
  }
}

@media (max-width: 700px) {
  .hero {
    padding-bottom: 40px;
  }
  .departments h2 {
    font-size: 2rem;
  }
  .service-card .card-img {
    height: 150px;
  }
  .service-card .card-title {
    font-size: 1rem;
  }
}
.footer_container {
  background-color: #edf4f8;
  padding: 20px 20px;
  border-top:100px solid #ffff;
 
}

.footer_content {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  max-width: 1300px;
  margin: 0 auto;
  
}

.footer_logo {
  flex: 1;
  display: flex;
  justify-content: center;
}

.footer_logo-img {
  max-width: 200px; /* Réduction de la taille du logo */
}

.footer_section {
  flex: 1;
  min-width: 200px;
}

.footer_section h4 {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 15px;
}

.footer_section ul {
  list-style: none;
  padding: 0;
}

.footer_section ul li {
  margin-bottom: 10px;
  font-size: 14px;
  color: #555;
}

.footer_section ul li a {
  color: #555;
  text-decoration: none;
}

.footer_section ul li a:hover {
  color: #007BFF;
  transition: 0.3s ease-in-out;
}

.footer_section div {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 10px;
}

.footer_section div svg {
  color: #007BFF;
  font-size: 18px;
}

/* Responsive */
@media (max-width: 768px) {
  .footer_content {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .footer_section {
    margin-bottom: 20px;
  }
  
}
</file>

<file path="src/App.jsx">
import { Routes, Route, Navigate } from "react-router-dom";
import MainLayout from "./Layouts/MainLayout";
import DashboardLayout from "./Layouts/DashboardLayout";
import { SidebarProvider } from "@/components/ui/sidebar";
import Records from "./pages/Records";
import PublicLayout from "./Layouts/PublicLayout";
import './index.css'

import Home from "./components/home";
import Profile from "./components/profile";
import Login from "./pages/Login";
import Register from "./components/register";
import ForgotPassword from "./components/ForgotPassword";
import Dashboard from "./pages/Dashboard";
import Patients from "./pages/Patients";
import Doctors from "./pages/Doctors";
import Calendar from "./pages/Calendar";
import Staff from "./pages/Staff";
import Alerts from "./pages/Alerts";
import Settings from "./pages/Settings";
import Emergency from"./pages/Emergency";
import Forum from "./pages/Forum";
import EmergencyRegister from "./pages/EmergencyRegister";
import ConfirmationEmergencyRegister from "./pages/ConfirmationEmergencyRegister";
import EmergencyStatus from "./pages/EmergencyStatus"; // Importez le composant de statut
import AmbulanceDashboard from "./pages/AmbulanceDashboard";
import AmbulanceNurseDashboard from "./pages/AmbulanceNurseDashboard";
import MedicalRecordDetails from './pages/MedicalRecordDetails';
import MedicalDocument from "./pages/MedicalDocument";
import Feedback from "./components/FeedBack";
import  HexGrid  from "./components/HexGrid";
import ParticlesComponent from "./components/ParticlesComponent";
import ResourcesPage from "./pages/ResourcesPage";
import AmbulanceCheck from "./pages/AmbulanceCheck";
function App() {
  const user = JSON.parse(sessionStorage.getItem("user"));
  

  return (
      <Routes>
        {/* Redirection par défaut vers login */}
        <Route path="/" element={<Navigate to="/login" />} />

        {/* Routes publiques sans header/footer/sidebar */}
        <Route path="/login" element={<PublicLayout><Login /></PublicLayout>} />
      
        <Route path="/emergency-confirmation" element={<MainLayout><ConfirmationEmergencyRegister /></MainLayout>} />
        <Route path="/emergency-status" element={<MainLayout><EmergencyStatus /> </MainLayout>} />
        <Route path="/register" element={<PublicLayout><Register /></PublicLayout>} />
        <Route path="/forgotpassword" element={<PublicLayout><ForgotPassword /></PublicLayout>} />
        <Route path="/feedback" element={<MainLayout><Feedback /></MainLayout>} />

<Route path="/hexa" element={<HexGrid/>}/>
        {/* Routes Main avec header/footer */}
        <Route path="/home" element={<MainLayout><Home /></MainLayout>} />
        <Route path="/document" element={<MainLayout><MedicalDocument /></MainLayout>} />
        <Route path="/profile" element={<MainLayout><Profile /></MainLayout>} />
        <Route path="/emergency-register" element={<MainLayout><EmergencyRegister /></MainLayout>} />
        <Route path="/emergency-confirmation" element={<MainLayout><ConfirmationEmergencyRegister /></MainLayout>} />
        
        <Route path="/ambulance_check" element={<MainLayout><AmbulanceCheck/></MainLayout>} />

        {/* Routes Dashboard avec sidebar */}
        <Route path="/dashboard" element={
    <SidebarProvider>
        <DashboardLayout><Dashboard /></DashboardLayout>
    </SidebarProvider>} />
        <Route path="/doctors" element={<DashboardLayout><Doctors /></DashboardLayout>} />
        <Route path="/patients" element={<DashboardLayout><Patients /></DashboardLayout>} />
        <Route path="/calendar" element={<DashboardLayout><Calendar /></DashboardLayout>} />
        <Route path="/records" element={<DashboardLayout><Records /></DashboardLayout>} />
        <Route path="/medical-records/:id" element={<DashboardLayout><MedicalRecordDetails /></DashboardLayout>} />
        <Route path="/staff" element={<DashboardLayout><Staff /></DashboardLayout>} />
        <Route path="/alerts" element={<DashboardLayout><Alerts /></DashboardLayout>} />
        <Route path="/emergency" element={<DashboardLayout><Emergency /></DashboardLayout>} />
        <Route path="/settings" element={<DashboardLayout><Settings /></DashboardLayout>} />
        <Route path="/forum" element={<DashboardLayout><Forum /></DashboardLayout>} />
        <Route path="/resources" element={<DashboardLayout><ResourcesPage /></DashboardLayout>} />
        {user?.role === 'Administrator' ? (
          <Route path="/ambulance" element={<DashboardLayout><AmbulanceDashboard /></DashboardLayout>} />
        ) : (
          <Route path="/ambulance" element={<DashboardLayout><AmbulanceNurseDashboard /></DashboardLayout>} />
        )}
      </Routes>
  );
}



export default App;
</file>

<file path="src/App.test.js">
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
</file>

<file path="src/components/AnimatedBackground.css">
/* 🌟 Dégradé animé */
@keyframes gradientAnimation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}
.background-container {
    min-height: 100vh; /* Permet au contenu de pousser le fond */
    display: flex;
    flex-direction: column;
    background: linear-gradient(-45deg, #ffff, #5CB8FF, #f4faff, #cce5f8);
  background-size: 300% 300%;
  animation: gradientAnimation 10s ease infinite;
  overflow: hidden;
  }
  
/* Animation du stéthoscope */
.stethoscope {
    position: absolute;
    width: 100px;
    top: 50%;
    left: -100px;
    animation: moveStethoscope 10s linear infinite;
  }
  
  @keyframes moveStethoscope {
    0% {
      left: -100px;
      transform: rotate(0deg);
    }
    50% {
      transform: rotate(10deg);
    }
    100% {
      left: 100%;
      transform: rotate(-10deg);
    }
  }

/* 🌟 Particules flottantes */
.particles, .particles2 {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  pointer-events: none;
}

.particles::before, .particles::after {
  content: "";
  position: absolute;
  width: 5px;
  height: 5px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  box-shadow: 
    10vw 20vh 8px rgba(255, 255, 255, 0.2),
    30vw 40vh 12px rgba(255, 255, 255, 0.3),
    50vw 10vh 6px rgba(255, 255, 255, 0.1),
    80vw 60vh 10px rgba(255, 255, 255, 0.2);
  animation: floatParticles 20s linear infinite;
}

.particles2::before, .particles2::after {
  content: "";
  position: absolute;
  width: 4px;
  height: 4px;
  background: rgba(255, 255, 255, 0.6);
  border-radius: 50%;
  box-shadow: 
    15vw 50vh 5px rgba(255, 255, 255, 0.1),
    35vw 25vh 7px rgba(255, 255, 255, 0.2),
    60vw 70vh 6px rgba(255, 255, 255, 0.15),
    90vw 20vh 8px rgba(255, 255, 255, 0.2);
  animation: floatParticles2 15s linear infinite;
}

/* 🌟 Animation des particules */
@keyframes floatParticles {
  0% { transform: translateY(0); opacity: 0.8; }
  50% { transform: translateY(-50px); opacity: 0.5; }
  100% { transform: translateY(0); opacity: 0.8; }
}

@keyframes floatParticles2 {
  0% { transform: translateY(0); opacity: 0.7; }
  50% { transform: translateY(-30px); opacity: 0.4; }
  100% { transform: translateY(0); opacity: 0.7; }
}
</file>

<file path="src/components/AnimatedBackground.jsx">
import "./AnimatedBackground.css";


const AnimatedBackground = ({ children }) => {
  
  return (
    <div className="background-container">
      <div className="animated-half">
       
      </div>
      <div className="content-half">{children}</div>
    </div>
  );
};

export default AnimatedBackground;
</file>

<file path="src/components/AuthLayout.js">
import AnimatedBackground from "./AnimatedBackground";

const AuthLayout = ({ children }) => {
  return (
    <div className="flex h-screen">
      {/* Partie gauche avec l'animation */}
      <div className="w-1/2 h-full">
        <AnimatedBackground />
      </div>

      {/* Partie droite avec le formulaire */}
      <div className="w-1/2 flex items-center justify-center bg-gray-100 p-8">
        <div className="bg-white p-8 rounded-2xl shadow-lg w-full max-w-md">
          {children}
        </div>
      </div>
    </div>
  );
};

export default AuthLayout;
</file>

<file path="src/components/DashboardHeader.jsx">
// src/components/DashboardHeader.jsx
import React, { useEffect, useState } from 'react'; // Ajout de useState pour l'état local de l'utilisateur
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Bell, PanelLeft, Trash2, User, CheckCheck, MailOpen, MessageSquare, AlertTriangle, Activity, Pill, Stethoscope, Clipboard as ClipboardIcon } from "lucide-react";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { useSidebar } from "@/components/ui/sidebar";
import {
    Tooltip,
    TooltipContent,
    TooltipProvider,
    TooltipTrigger,
} from "@/components/ui/tooltip";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { useNotifications } from '@/context/NotificationContext';
import { ScrollArea } from "@/components/ui/scroll-area";
import { Skeleton } from "@/components/ui/skeleton";
import { useNavigate } from 'react-router-dom';

// Helper function to format time ago
const timeAgo = (dateString) => {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
        console.warn("Invalid date passed to timeAgo:", dateString);
        return "Invalid date";
    }
    const seconds = Math.floor((new Date() - date) / 1000);
    let interval = seconds / 31536000;
    if (interval > 1) return Math.floor(interval) + " years ago";
    interval = seconds / 2592000;
    if (interval > 1) return Math.floor(interval) + " months ago";
    interval = seconds / 86400;
    if (interval > 1) return Math.floor(interval) + " days ago";
    interval = seconds / 3600;
    if (interval > 1) return Math.floor(interval) + " hours ago";
    interval = seconds / 60;
    if (interval > 1) return Math.floor(interval) + " minutes ago";
    if (seconds < 5) return "just now";
    return Math.floor(seconds) + " seconds ago";
};

// Helper to get notification icon, title, and color based on type
const getNotificationPresentation = (type) => {
    switch (type) {
        case 'doctor_assignment':
            return { Icon: User, title: '🧑‍⚕️ Doctor Assigned', color: 'text-blue-600', iconBg: 'bg-blue-100' };
        case 'patient_status_update':
            return { Icon: Activity, title: '🔄 Patient Status Update', color: 'text-amber-600', iconBg: 'bg-amber-100' };
        case 'new_emergency_case':
            return { Icon: AlertTriangle, title: '🚨 New Emergency Case', color: 'text-red-600', iconBg: 'bg-red-100' };
        case 'patient_assigned_to_doctor': // Pour les infirmières
            return { Icon: User, title: 'ℹ️ Patient Assigned to Dr.', color: 'text-sky-600', iconBg: 'bg-sky-100' };
        case 'unassigned_emergency_case':
             return { Icon: MessageSquare, title: '⚠️ Patient Awaiting Doctor', color: 'text-orange-600', iconBg: 'bg-orange-100' };
        case 'ambulance_alert':
            return { Icon: Bell, title: '🚑 Ambulance Alert', color: 'text-fuchsia-600', iconBg: 'bg-fuchsia-100' };
        case 'availability_update': // Notif pour le médecin sur sa propre dispo
            return { Icon: CheckCheck, title: '✅ Availability Updated', color: 'text-green-600', iconBg: 'bg-green-100' };
        case 'admin_log': // Pour les logs admin génériques
            return { Icon: ClipboardIcon, title: '📋 Admin Log', color: 'text-gray-600', iconBg: 'bg-gray-100' };
        case 'patient_file_created': // Type générique, ajustez le titre si vous avez plus de contexte
            return { Icon: Pill, title: '📄 New Document Added', color: 'text-emerald-600', iconBg: 'bg-emerald-100' };
        case 'patient_file_updated':
            return { Icon: Stethoscope, title: '📝 Document Updated', color: 'text-violet-600', iconBg: 'bg-violet-100' };
        case 'generic': // Fallback
        default:
            return { Icon: Bell, title: '🔔 Notification', color: 'text-slate-600', iconBg: 'bg-slate-100' };
    }
};


const DashboardHeader = () => {
    const { toggleSidebar } = useSidebar();
    const {
        notifications,
        unreadCount,
        isLoading,
        markOneAsRead,
        markAllAsRead,
        clearAllNotifications,
        fetchNotifications
    } = useNotifications();
    const navigate = useNavigate();
    const [currentUser, setCurrentUser] = useState(null);

    useEffect(() => {
        fetchNotifications();
        const storedUser = sessionStorage.getItem("user");
        if (storedUser) {
            try {
                setCurrentUser(JSON.parse(storedUser));
            } catch (e) {
                console.error("Failed to parse user from sessionStorage for header:", e);
            }
        }
    }, [fetchNotifications]);

    const handleOpenChange = (open) => {
        if (open) {
            // fetchNotifications(); // Optionnel: recharger à chaque ouverture
        }
    };
    const handleNotificationClick = (notification) => {
        if (!notification.isRead) {
            markOneAsRead(notification._id);
        }
        if (notification.relatedEntityId && notification.relatedEntityType) {
            switch (notification.relatedEntityType) {
                case 'EmergencyPatient':
                    navigate(`/emergency-status`, { state: { patientId: notification.relatedEntityId } });
                    break;
                case 'Ambulance':
                    navigate('/ambulance');
                    break;
                default:
                    console.log("Clicked notification, no specific navigation for type:", notification.relatedEntityType);
            }
        } else {
            console.log("Clicked notification with no specific entity to navigate to:", notification);
        }
    };

    return (
        <div className="sticky top-0 bg-background/95 z-40 w-full border-b">
            <div className="mx-auto h-16 max-w-7xl px-4 sm:px-6 lg:px-8 flex items-center justify-between">
                {/* Left Side: Search & Sidebar Toggle */}
                <div className="flex-1 flex items-center">
                     <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon" onClick={toggleSidebar} className="mr-4">
                                    <PanelLeft className="h-5 w-5" />
                                    <span className="sr-only">Toggle Sidebar</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>Toggle Sidebar</TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                    <div className="max-w-md w-full relative">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input
                            placeholder="Search patients, records..."
                            className="pl-10 h-9 rounded-md"
                        />
                    </div>
                </div>

                {/* Right Side: Actions & Profile */}
                <div className="flex items-center space-x-4">
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon">
                                    {/* Remplacez par votre icône de langue ou logique */}
                                    <span className="fi fi-us fis"></span>
                                    <span className="sr-only">Select Language</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>Change Language</TooltipContent>
                        </Tooltip>
                    </TooltipProvider>

                    <DropdownMenu onOpenChange={handleOpenChange}>
                        <TooltipProvider>
                             <Tooltip>
                                <TooltipTrigger asChild>
                                    <DropdownMenuTrigger asChild>
                                        <Button variant="ghost" size="icon" className="relative">
                                            <Bell className="h-5 w-5" />
                                            {unreadCount > 0 && (
                                                <Badge
                                                    variant="destructive"
                                                    className="absolute -top-1 -right-1 h-4 w-4 min-w-[1rem] p-0 flex items-center justify-center rounded-full text-xs"
                                                >
                                                    {unreadCount > 9 ? '9+' : unreadCount}
                                                </Badge>
                                            )}
                                            <span className="sr-only">Notifications</span>
                                        </Button>
                                    </DropdownMenuTrigger>
                                </TooltipTrigger>
                                <TooltipContent>Notifications</TooltipContent>
                            </Tooltip>
                        </TooltipProvider>

                        <DropdownMenuContent align="end" className="w-96 p-0 shadow-xl">
                            <DropdownMenuLabel className="flex justify-between items-center px-3 py-2.5 border-b">
                                <span className="font-semibold text-sm">Notifications ({unreadCount > 0 ? `${unreadCount} non lues` : 'Aucune non lue'})</span>
                                {notifications.length > 0 && unreadCount > 0 && (
                                     <Button variant="link" size="sm" className="h-auto p-0 text-xs text-blue-600 hover:text-blue-700" onClick={(e) => {e.stopPropagation(); markAllAsRead();}}>
                                         <CheckCheck className="h-3.5 w-3.5 mr-1"/>Marquer tout comme lu
                                     </Button>
                                )}
                            </DropdownMenuLabel>

                             <ScrollArea className="h-[350px]">
                                {(isLoading && notifications.length === 0) ? (
                                    <div className="p-3 space-y-2.5">
                                        {[...Array(4)].map((_, i) => (
                                            <div key={i} className="flex items-center space-x-2.5 p-1.5">
                                                <Skeleton className="h-7 w-7 rounded-full" />
                                                <div className="space-y-1 flex-1">
                                                    <Skeleton className="h-2.5 w-3/4" />
                                                    <Skeleton className="h-2 w-1/2" />
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                ) : notifications.length === 0 ? (
                                    <div className="p-6 text-center text-sm text-muted-foreground flex flex-col items-center justify-center h-full">
                                        <MailOpen className="h-12 w-12 text-slate-300 mb-3"/>
                                        Aucune notification pour le moment.
                                    </div>
                                ) : (
                                    <div className="divide-y divide-border">
                                    {notifications.map((notif) => {
                                        const { Icon: NotifIcon, title: notifTitle, color: notifColor, iconBg } = getNotificationPresentation(notif.type);
                                        return (
                                            <DropdownMenuItem
                                                key={notif._id}
                                                className={`flex items-start p-2.5 gap-2.5 whitespace-normal cursor-pointer focus:bg-accent data-[disabled]:opacity-50 data-[disabled]:pointer-events-none transition-colors duration-150 ease-in-out 
                                                            ${!notif.isRead ? 'bg-blue-50 hover:bg-blue-100 focus:bg-blue-100' : 'hover:bg-slate-50 focus:bg-slate-50'}`}
                                                onClick={() => handleNotificationClick(notif)}
                                            >
                                                <div className={`flex-shrink-0 h-7 w-7 rounded-full flex items-center justify-center ${iconBg} ${notif.isRead ? 'opacity-70' : ''} mt-0.5`}>
                                                    <NotifIcon className={`h-3.5 w-3.5 ${notifColor}`} />
                                                </div>
                                                <div className="flex-grow min-w-0">
                                                    <div className="flex justify-between items-start mb-0">
                                                        <p className={`text-xs font-semibold leading-snug ${!notif.isRead ? 'text-primary' : 'text-foreground'}`}>
                                                            {notifTitle}
                                                        </p>
                                                        {!notif.isRead && (
                                                            <span className="h-1.5 w-1.5 bg-blue-500 rounded-full flex-shrink-0 ml-2 mt-1" aria-label="Unread"></span>
                                                        )}
                                                    </div>
                                                    <p className={`text-xs ${notif.isRead ? 'text-muted-foreground' : 'text-foreground/90'} leading-normal line-clamp-2`}>
                                                        {notif.message}
                                                    </p>
                                                    <p className="text-[10px] text-muted-foreground/80 mt-0.5 text-right">
                                                        {timeAgo(notif.createdAt)}
                                                    </p>
                                                </div>
                                            </DropdownMenuItem>
                                        );
                                    })}
                                    </div>
                                )}
                             </ScrollArea>
                            {notifications.length > 0 && (
                                 <div className="px-3 py-1.5 border-t text-center">
                                     <Button variant="ghost" size="sm" className="w-full text-xs text-red-600 hover:bg-red-50 hover:text-red-700" onClick={(e) => { e.stopPropagation(); clearAllNotifications();}}>
                                         <Trash2 className="h-3 w-3 mr-1"/> Effacer toutes les notifications
                                     </Button>
                                 </div>
                             )}
                        </DropdownMenuContent>
                    </DropdownMenu>

                   <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" className="p-0 h-8 w-8 rounded-full">
                                    <Avatar className="h-8 w-8">
                                        <AvatarImage 
                                            src={currentUser?.profileImage ? `http://localhost:8089${currentUser.profileImage.startsWith('/') ? currentUser.profileImage : '/' + currentUser.profileImage}` : "https://github.com/shadcn.png"} 
                                            alt={currentUser?.username || "User"}
                                            onError={(e) => { e.target.src = "https://github.com/shadcn.png"; }}
                                        />
                                        <AvatarFallback>
                                            {currentUser?.username ? currentUser.username.substring(0,2).toUpperCase() : "U"}
                                        </AvatarFallback>
                                    </Avatar>
                                    <span className="sr-only">User Profile</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                                <div className="font-medium">
                                    {currentUser?.username || "Utilisateur"}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    {currentUser?.role || "Rôle"}
                                </p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                </div>
            </div>
        </div>
    );
};

export default DashboardHeader;
</file>

<file path="src/components/DashboardSidebar.jsx">
// src/components/DashboardSidebar.jsx
"use client";

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarFooter,
  SidebarSeparator,
} from "@/components/ui/sidebar";
import {
  Calendar,
  ClipboardList,
  Home,
  Users,
  Bell,
  Settings,
  UserCog,
  Hospital,
  Stethoscope,
  MessageCircle,
  LogIn,
  Ambulance,
  ChevronRight,
  Moon,
  Sun,
} from "lucide-react";
import { Link, useNavigate } from "react-router-dom"; // Import useNavigate
import { useTheme } from "./theme-provider";
import { Button } from "@/components/ui/button";

const DashboardSidebar = () => {
  const { theme, toggleTheme } = useTheme();
  const navigate = useNavigate(); // Define navigate using useNavigate hook

  const mainMenuItems = [
    { title: "Dashboard", icon: Home, path: "/dashboard" },
    { title: "Calendar", icon: Calendar, path: "/calendar" },
    { title: "Alerts", icon: Bell, path: "/alerts" },
  ];

  const medicalMenuItems = [
    { title: "Doctors", icon: Stethoscope, path: "/doctors" },
    { title: "Patients", icon: Users, path: "/patients" },
    { title: "Records", icon: ClipboardList, path: "/records" },
    { title: "Emergency", icon: Hospital, path: "/emergency" },
    { title: "Ambulance", icon: Ambulance, path: "/ambulance" },
    { title: "Resources", icon: ClipboardList, path: "/resources" },
  ];

  const managementMenuItems = [
    { title: "Staff", icon: UserCog, path: "/staff" },
    { title: "Forum", icon: MessageCircle, path: "/forum" },
    { title: "Settings", icon: Settings, path: "/settings" },
    { title: "Login", icon: LogIn, path: "/login" },
  ];

  const renderMenuItems = (items) => {
    return items.map((item) => (
      <SidebarMenuItem key={item.title}>
        <SidebarMenuButton asChild>
          <Link
            to={item.path}
            className="flex items-center gap-3 text-sidebar-foreground hover:text-sidebar-accent-foreground transition-colors dark:text-sidebar-foreground dark:hover:text-sidebar-accent-foreground"
          >
            <item.icon className="w-5 h-5" />
            <span>{item.title}</span>
            <ChevronRight className="ml-auto h-4 w-4 opacity-50" />
          </Link>
        </SidebarMenuButton>
      </SidebarMenuItem>
    ));
  };

  return (
    <Sidebar className="border-r border-sidebar-border bg-sidebar-background dark:bg-sidebar-background">
      <SidebarHeader className="py-4">
        <div className="flex items-center px-4 gap-2">
          <img src="/images/logo1.png" alt="Emergency Management System Logo" className="h-10 w-auto" />
          <div>
            <h1 className="text-lg font-bold text-primary-500 dark:text-primary-500">Emergency</h1>
            <p className="text-xs text-sidebar-foreground/70 dark:text-sidebar-foreground/70">Management System</p>
          </div>
        </div>
      </SidebarHeader>
      <div className="fixed top-4 right-4 z-50">
        <Button
          onClick={() => navigate("/home")} // Use the navigate function
          className="rounded-full p-3 shadow-lg hover:shadow-xl transition-all bg-white/90 backdrop-blur-sm"
          variant="ghost"
        >
          <Home className="h-6 w-6 text-blue-600 hover:text-blue-700" />
        </Button>
      </div>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel className="text-xs font-semibold text-sidebar-foreground/70 dark:text-sidebar-foreground/70">
            MAIN
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>{renderMenuItems(mainMenuItems)}</SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        <SidebarSeparator className="my-2" />

        <SidebarGroup>
          <SidebarGroupLabel className="text-xs font-semibold text-sidebar-foreground/70 dark:text-sidebar-foreground/70">
            MEDICAL
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>{renderMenuItems(medicalMenuItems)}</SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        <SidebarSeparator className="my-2" />

        <SidebarGroup>
          <SidebarGroupLabel className="text-xs font-semibold text-sidebar-foreground/70 dark:text-sidebar-foreground/70">
            MANAGEMENT
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>{renderMenuItems(managementMenuItems)}</SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>

      <SidebarFooter className="p-4 border-t border-sidebar-border dark:border-sidebar-border">
        {/* Footer content */}
      </SidebarFooter>
    </Sidebar>
  );
};

export default DashboardSidebar;
</file>

<file path="src/components/EditableField.jsx">
import React, { useState, useEffect } from 'react'; // useEffect n'est pas utilisé ici, peut être supprimé si c'est le cas partout.
import PropTypes from 'prop-types';
import { motion } from 'framer-motion';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Check, X, ChevronDown } from 'lucide-react';

// L'interface EditableFieldProps est supprimée

const EditableField = ({
  label,
  value,
  field,
  section,
  isEditing,
  onChange,
  type = 'text', // La valeur par défaut reste
  className = '', // La valeur par défaut reste
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  // Pour arrayValue, on initialise en se basant sur le type de `value`
  const [arrayValue, setArrayValue] = useState(Array.isArray(value) ? value : []);
  const [newItem, setNewItem] = useState('');

  // Mettre à jour arrayValue si la prop `value` (de type tableau) change de l'extérieur
  useEffect(() => {
    if (type === 'array' && Array.isArray(value)) {
      setArrayValue(value);
    } else if (type !== 'array') {
      // Réinitialiser si le type n'est plus 'array' ou si la valeur n'est plus un tableau
      setArrayValue([]);
    }
  }, [value, type]);


  const handleArrayAdd = () => {
    if (newItem.trim()) {
      const updated = [...arrayValue, newItem.trim()];
      setArrayValue(updated);
      onChange(section, field, updated);
      setNewItem('');
    }
  };

  const handleArrayRemove = (index) => {
    const updated = arrayValue.filter((_, i) => i !== index);
    setArrayValue(updated);
    onChange(section, field, updated);
  };

  const renderEditor = () => {
    switch (type) {
      case 'textarea':
        return (
          <Textarea
            value={typeof value === 'string' ? value : ''} // Assurer que value est une chaîne
            onChange={(e) => onChange(section, field, e.target.value)}
            className="w-full min-h-[120px] bg-transparent border-0 focus:ring-0 text-base p-0"
            placeholder={`Enter ${label.toLowerCase()}...`}
          />
        );
      case 'date':
        return (
          <Input
            type="date"
            value={typeof value === 'string' ? value : ''} // Assurer que value est une chaîne
            onChange={(e) => onChange(section, field, e.target.value)}
            className="w-full bg-transparent border-0 focus:ring-0 text-base p-0"
          />
        );
      case 'array':
        return (
          <div className="space-y-2">
            {arrayValue.map((item, index) => (
              <div key={index} className="flex justify-between items-center group">
                <span className="text-base">{item}</span>
                <button
                  type="button"
                  onClick={() => handleArrayRemove(index)}
                  className="opacity-0 group-hover:opacity-100 transition-opacity duration-300 text-red-500 hover:text-red-600"
                >
                  <X size={16} />
                </button>
              </div>
            ))}
            <div className="flex gap-2 mt-2">
              <Input
                type="text"
                value={newItem}
                onChange={(e) => setNewItem(e.target.value)}
                className="flex-1 bg-white/50 dark:bg-gray-800/50 border-0 focus:ring-1 ring-primary/30 text-sm"
                placeholder={`Add new ${label.toLowerCase()}...`}
                onKeyPress={(e) => e.key === 'Enter' && handleArrayAdd()}
              />
              <button
                type="button"
                onClick={handleArrayAdd}
                className="p-2 bg-primary/10 hover:bg-primary/20 rounded-full text-primary transition-colors duration-200"
              >
                <Check size={14} />
              </button>
            </div>
          </div>
        );
      case 'text':
      default:
        return (
          <Input
            type="text"
            value={typeof value === 'string' ? value : ''} // Assurer que value est une chaîne
            onChange={(e) => onChange(section, field, e.target.value)}
            className="w-full bg-transparent border-0 focus:ring-0 text-base p-0"
            placeholder={`Enter ${label.toLowerCase()}...`}
          />
        );
    }
  };

  const isArrayWithMultipleItems = type === 'array' && Array.isArray(value) && value.length > 1;
  const shouldAllowExpand = type === 'textarea' || isArrayWithMultipleItems;

  return (
    <motion.div
      className={`profile-field-container ${className} ${isEditing ? 'field-highlight' : ''}`}
      whileHover={{ y: -3 }}
      transition={{ type: 'spring', stiffness: 400, damping: 17 }}
    >
      <div className="px-5 py-4">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400">{label}</h3>
          {shouldAllowExpand && (
            <button
              type="button" // Ajout du type pour un bouton
              className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors duration-200"
              onClick={() => setIsExpanded(!isExpanded)}
            >
              <motion.div animate={{ rotate: isExpanded ? 180 : 0 }} transition={{ duration: 0.2 }}>
                <ChevronDown size={16} />
              </motion.div>
            </button>
          )}
        </div>

        <motion.div
          className="overflow-hidden"
          animate={{
            // Si le type est 'array', la hauteur est 'auto' pour toujours afficher les éléments + le champ d'ajout.
            // Sinon, elle dépend de isExpanded ou est fixée à '2rem' pour les champs texte/date/textarea non étendus.
            height: type === 'array' ? 'auto' : (isExpanded ? 'auto' : '2rem'),
          }}
          // Ajustement pour que le contenu 'array' ne soit pas coupé en mode non-édité
          style={type === 'array' && !isEditing ? { height: 'auto' } : {}}
        >
          {isEditing ? (
            renderEditor()
          ) : (
            <div className="text-base break-words">
              {type === 'array' ? (
                Array.isArray(value) && value.length > 0 ? ( // Vérifier aussi que value.length > 0
                  <div className="space-y-1">
                    {value.map((item, index) => (
                      <div key={index} className="flex items-center gap-2">
                        <span className="text-sm bg-secondary/50 rounded-full px-3 py-1">{item}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <span className="text-gray-500 dark:text-gray-400">Aucune donnée</span>
                )
              ) : value ? ( // Pour les types non-array, s'assurer que `value` n'est pas vide
                <span>{String(value)}</span> // String(value) pour gérer le cas où value est un nombre
              ) : (
                <span className="text-gray-500 dark:text-gray-400">Aucune donnée</span>
              )}
            </div>
          )}
        </motion.div>
      </div>
    </motion.div>
  );
};

EditableField.propTypes = {
  label: PropTypes.string.isRequired,
  value: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.arrayOf(PropTypes.string)
  ]).isRequired,
  field: PropTypes.string.isRequired,
  section: PropTypes.string.isRequired,
  isEditing: PropTypes.bool.isRequired,
  onChange: PropTypes.func.isRequired,
  type: PropTypes.oneOf(['text', 'date', 'textarea', 'array']),
  className: PropTypes.string,
};

// Valeurs par défaut (déjà gérées dans la déstructuration, mais peut être explicite ici aussi)
// EditableField.defaultProps = {
//   type: 'text',
//   className: '',
// };

export default EditableField;
</file>

<file path="src/components/EmergencyRegister.jsx">
// src/pages/EmergencyRegister.jsx
import React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import { z } from "zod";
import { AlertTriangle, Heart } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import axios from 'axios';

const emergencyFormSchema = z.object({
    firstName: z.string().min(2, { message: "First name must be at least 2 characters" }),
    lastName: z.string().min(2, { message: "Last name must be at least 2 characters" }),
    dateOfBirth: z.string().min(1, { message: "Date of birth is required" }), // Keep as string for now, handle formatting later if needed
    gender: z.enum(["male", "female", "other"], {
        required_error: "Please select a gender"
    }),
    phoneNumber: z.string().min(8, { message: "Invalid phone number" }),
    email: z.string().email({ message: "Invalid email address" }).optional(),
    address: z.string().min(5, { message: "Address must be at least 5 characters" }),
    emergencyContact: z.string().min(8, { message: "Invalid emergency contact" }),
    insuranceInfo: z.string().optional(),
    allergies: z.string().optional(),
    currentMedications: z.string().optional(),
    medicalHistory: z.string().optional(),
    currentSymptoms: z.string().min(5, { message: "Please describe your current symptoms" }),
    painLevel: z.enum(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], {
        required_error: "Please select your pain level"
    }),
    emergencyLevel: z.enum(["low", "medium", "high", "critical"], {
        required_error: "Please select the emergency level"
    }),
    acceptTerms: z.boolean().refine(val => val === true, {
        message: "You must accept the terms and conditions",
    }),
});

const EmergencyRegister = () => {
    const form = useForm({
        resolver: zodResolver(emergencyFormSchema),
        defaultValues: {
            firstName: "",
            lastName: "",
            dateOfBirth: "",
            gender: "", // Initialize gender
            phoneNumber: "",
            email: "",
            address: "",
            emergencyContact: "",
            insuranceInfo: "",
            allergies: "",
            currentMedications: "",
            medicalHistory: "",
            currentSymptoms: "",
            painLevel: "", // Initialize painLevel
            emergencyLevel: "", // Initialize emergencyLevel
            acceptTerms: false,
        },
    });

    async function onSubmit(data) {
        try {
            // Correct URL for the backend endpoint
            const response = await axios.post('http://localhost:8089/api/emergency-patients', data);
            console.log(response.data);
            toast.success("Your emergency request has been registered", {
                description: "A member of our medical team will contact you shortly.",
            });
            form.reset(); // Reset the form after successful submission

        } catch (error) {
            if (error.response) {
                console.error("Server error:", error.response.data);
                // Handle specific validation errors from the backend
                if (error.response.data.message && Array.isArray(error.response.data.message)) {
                    error.response.data.message.forEach(errorMessage => {
                        toast.error("Validation Error", { description: errorMessage });
                    });

                } else {
                    toast.error("Failed to register emergency request", {
                        description: error.response.data.message || "An error occurred on the server.",
                    });
                }


            } else if (error.request) {
                console.error("No response received from server");
                toast.error("Failed to register emergency request", {
                    description: "No response received from the server. Please check your network connection.",
                });
            } else {
                console.error("Error setting up request:", error.message);
                toast.error("Failed to register emergency request", {
                    description: "An unexpected error occurred. Please try again later.",
                });
            }
        }
    }


    return (
        <div className="container mx-auto py-6 px-4 md:px-6">
            <Card className="w-full max-w-4xl mx-auto shadow-lg">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-blue-400 text-white">
                    <div className="flex items-center gap-2">
                        <AlertTriangle className="h-6 w-6" />
                        <Heart className="h-6 w-6" />
                    </div>
                    <CardTitle className="text-2xl md:text-3xl font-bold">
                        Patient Emergency Registration
                    </CardTitle>
                    <CardDescription className="text-base">
                        Please fill out this form with your information and the issues you are currently experiencing.
                    </CardDescription>
                </CardHeader>

                <CardContent className="pt-6">
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                {/* Personal Information Section */}
                                <div className="space-y-6">
                                    <h3 className="text-lg font-medium text-blue-600">Personal Information</h3>
                                    <FormField
                                        control={form.control}
                                        name="firstName"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">First Name</FormLabel>
                                                <FormControl>
                                                    <Input placeholder="First Name" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="lastName"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Last Name</FormLabel>
                                                <FormControl>
                                                    <Input placeholder="Last Name" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="dateOfBirth"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Date of Birth</FormLabel>
                                                <FormControl>
                                                    <Input type="date" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="gender"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Gender</FormLabel>
                                                <FormControl>
                                                    <RadioGroup
                                                        onValueChange={field.onChange}
                                                        defaultValue={field.value}
                                                        className="flex flex-col space-y-1"
                                                    >
                                                        <FormItem className="flex items-center space-x-3 space-y-0">
                                                            <FormControl>
                                                                <RadioGroupItem value="male" className="border-blue-500 text-blue-600 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white" />
                                                            </FormControl>
                                                            <FormLabel className="font-normal text-blue-700">
                                                                Male
                                                            </FormLabel>
                                                        </FormItem>
                                                        <FormItem className="flex items-center space-x-3 space-y-0">
                                                            <FormControl>
                                                                <RadioGroupItem value="female" className="border-blue-500 text-blue-600 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white" />
                                                            </FormControl>
                                                            <FormLabel className="font-normal text-blue-700">
                                                                Female
                                                            </FormLabel>
                                                        </FormItem>
                                                        <FormItem className="flex items-center space-x-3 space-y-0">
                                                            <FormControl>
                                                                <RadioGroupItem value="other" className="border-blue-500 text-blue-600 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white" />
                                                            </FormControl>
                                                            <FormLabel className="font-normal text-blue-700">
                                                                Other
                                                            </FormLabel>
                                                        </FormItem>
                                                    </RadioGroup>
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="phoneNumber"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Phone Number</FormLabel>
                                                <FormControl>
                                                    <Input placeholder="+1 555-555-5555" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="email"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Email (optional)</FormLabel>
                                                <FormControl>
                                                    <Input type="email" placeholder="email@example.com" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="address"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Address</FormLabel>
                                                <FormControl>
                                                    <Textarea placeholder="Your full address" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="emergencyContact"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Emergency Contact</FormLabel>
                                                <FormControl>
                                                    <Input placeholder="Name and phone number" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormDescription className="text-blue-600">
                                                    Person to contact in case of emergency
                                                </FormDescription>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />
                                </div>

                                {/* Medical Information Section */}
                                <div className="space-y-6">
                                    <h3 className="text-lg font-medium text-blue-600">Medical Information</h3>

                                    <FormField
                                        control={form.control}
                                        name="insuranceInfo"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Insurance Information (optional)</FormLabel>
                                                <FormControl>
                                                    <Input placeholder="Insurance policy number" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="allergies"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Allergies (optional)</FormLabel>
                                                <FormControl>
                                                    <Textarea placeholder="List any known allergies" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="currentMedications"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Current Medications (optional)</FormLabel>
                                                <FormControl>
                                                    <Textarea placeholder="Medications you are currently taking" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />
                                    <FormField
                                        control={form.control}
                                        name="medicalHistory"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Medical History (optional)</FormLabel>
                                                <FormControl>
                                                    <Textarea placeholder="Pre-existing medical conditions" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="currentSymptoms"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Current Symptoms</FormLabel>
                                                <FormControl>
                                                    <Textarea
                                                        placeholder="Describe in detail the symptoms you are experiencing"
                                                        className="min-h-[120px] border-blue-300 focus:ring-blue-500 focus:border-blue-500"
                                                        {...field}
                                                    />
                                                </FormControl>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="painLevel"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Pain Level (1-10)</FormLabel>
                                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                    <FormControl>
                                                        <SelectTrigger className="border-blue-300 focus:ring-blue-500 focus:border-blue-500">
                                                            <SelectValue placeholder="Select pain level" />
                                                        </SelectTrigger>
                                                    </FormControl>
                                                    <SelectContent>
                                                        <SelectItem value="1">1 - Very mild</SelectItem>
                                                        <SelectItem value="2">2</SelectItem>
                                                        <SelectItem value="3">3</SelectItem>
                                                        <SelectItem value="4">4</SelectItem>
                                                        <SelectItem value="5">5 - Moderate</SelectItem>
                                                        <SelectItem value="6">6</SelectItem>
                                                        <SelectItem value="7">7</SelectItem>
                                                        <SelectItem value="8">8</SelectItem>
                                                        <SelectItem value="9">9</SelectItem>
                                                        <SelectItem value="10">10 - Unbearable</SelectItem>
                                                    </SelectContent>
                                                </Select>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="emergencyLevel"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-blue-800">Emergency Level</FormLabel>
                                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                    <FormControl>
                                                        <SelectTrigger className="border-blue-300 focus:ring-blue-500 focus:border-blue-500">
                                                            <SelectValue placeholder="Select emergency level" />
                                                        </SelectTrigger>
                                                    </FormControl>
                                                    <SelectContent>
                                                        <SelectItem value="low">Low - I can wait</SelectItem>
                                                        <SelectItem value="medium">Medium - I need to see a doctor today</SelectItem>
                                                        <SelectItem value="high">High - I need care quickly</SelectItem>
                                                        <SelectItem value="critical">Critical - Life-threatening emergency</SelectItem>
                                                    </SelectContent>
                                                </Select>
                                                <FormMessage className="text-red-500" />
                                            </FormItem>
                                        )}
                                    />
                                </div>
                            </div>

                            {/* Terms and Conditions Section */}
                            <FormField
                                control={form.control}
                                name="acceptTerms"
                                render={({ field }) => (
                                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border border-blue-300 p-4 bg-blue-50">
                                        <FormControl>
                                            <Checkbox
                                                checked={field.value}
                                                onCheckedChange={field.onChange}
                                                className="data-[state=checked]:bg-blue-500 data-[state=checked]:border-blue-500"
                                            />
                                        </FormControl>
                                        <div className="space-y-1 leading-none">
                                            <FormLabel className="text-blue-800">
                                                I accept the terms and conditions and authorize the facility to process my medical data
                                            </FormLabel>
                                            <FormDescription className="text-blue-600">
                                                By checking this box, you agree to your information being used for your medical care.
                                            </FormDescription>
                                        </div>
                                        <FormMessage className="text-red-500" />
                                    </FormItem>
                                )}
                            />

                            <Button
                                type="submit"
                                className="w-full bg-blue-500 hover:bg-blue-600 text-white"
                                size="lg"
                            >
                                Submit Emergency Request
                            </Button>
                        </form>
                    </Form>
                </CardContent>
            </Card>
        </div>
    );
};

export default EmergencyRegister;
</file>

<file path="src/components/FeedBack.jsx">
import React, { useState, useEffect } from "react";
import { MdFeedback, MdPerson } from "react-icons/md";
import { FaStar } from "react-icons/fa";
import { Link } from "react-router-dom";

const Feedback = () => {
  const testimonials = [
    {
      name: "John Doe",
      feedback: "The emergency care was exceptional! The staff was quick to respond and very caring.",
      date: "May 3, 2025",
      rating: 5,
    },
    {
      name: "Sarah Smith",
      feedback: "Submitting feedback was easy, and I feel my voice matters in improving services.",
      date: "May 1, 2025",
      rating: 4,
    },
    {
      name: "Emily Johnson",
      feedback: "Thanks to the rapid response, my family member received timely care. Amazing team!",
      date: "April 28, 2025",
      rating: 5,
    },
  ];

  const [formData, setFormData] = useState({ name: "", feedback: "", rating: 0 });
  const [hoverRating, setHoverRating] = useState(0);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Feedback submitted:", formData);
    setFormData({ name: "", feedback: "", rating: 0 });
  };

  const handleRatingClick = (ratingValue) => {
    setFormData({ ...formData, rating: ratingValue });
  };

  useEffect(() => {
    const canvas = document.querySelector(".particles-canvas");
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    const particles = [];
    const particleCount = 50;

    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 5 + 1;
        this.speedX = Math.random() * 1 - 0.5;
        this.speedY = Math.random() * 1 - 0.5;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;

        if (this.x > canvas.width || this.x < 0) this.speedX *= -1;
        if (this.y > canvas.height || this.y < 0) this.speedY *= -1;
      }

      draw() {
        ctx.fillStyle = "rgba(66, 165, 255, 0.5)";
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle());
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particles.forEach(particle => {
        particle.update();
        particle.draw();
      });
      requestAnimationFrame(animate);
    }

    animate();

    const handleResize = () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <div className="feedback-container">
      {/* Styles Intégrés */}
      <style>
        {`
          .feedback-container {
            padding: 80px 20px;
            background: linear-gradient(135deg, #f8fbff 0%, #e6f0fa 100%);
            min-height: 100vh;
            color: #333;
            position: relative;
            overflow: hidden;
          }

          .particles-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
          }

          .feedback-section {
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
            position: relative;
            z-index: 1;
          }

          .section-header {
            margin-bottom: 50px;
          }

          .section-header h2 {
            font-size: 3rem;
            font-family: 'Poppins', sans-serif;
            font-weight: 700;
            background: linear-gradient(90deg, #0056b3, #42a5ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
          }

          .section-header p {
            font-size: 1.2rem;
            font-family: 'Roboto', sans-serif;
            color:rgba(92, 173, 179, 0.79);
            max-width: 700px;
            margin: 0 auto;
            font-weight: 300;
          }

          .testimonials-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 30px;
            margin-bottom: 60px;
          }

          .testimonial-card {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(12px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
            transition: transform 0.4s ease, box-shadow 0.4s ease;
            border: 1px solid rgba(255, 255, 255, 0.3);
            animation: fadeInUp 0.6s ease forwards;
            animation-delay: calc(var(--card-index) * 0.1s);
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
          }

          .testimonial-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3), 0 0 20px rgba(66, 165, 255, 0.5);
          }

          .testimonial-icon {
            font-size: 2.5rem;
            color: #42a5ff;
            margin-bottom: 15px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            padding: 10px;
          }

          .testimonial-card h4 {
            font-size: 1.5rem;
            font-family: 'Poppins', sans-serif;
            color: #0056b3;
            margin-bottom: 10px;
          }

          .testimonial-card p {
            font-size: 1rem;
            font-family: 'Roboto', sans-serif;
            color: #555;
            margin-bottom: 15px;
            line-height: 1.5;
          }

          .testimonial-rating {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
          }

          .testimonial-star {
            font-size: 1.2rem;
            color: #ddd;
          }

          .testimonial-star.filled {
            color:rgb(241, 233, 77);
          }

          .testimonial-date {
            font-size: 0.9rem;
            font-family: 'Roboto', sans-serif;
            font-style: italic;
            color:rgb(142, 185, 193);
          }

          .feedback-form {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(12px);
            border-radius: 20px;
            padding: 40px;
            max-width: 600px;
            margin: 0 auto;
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            animation: fadeInUp 0.6s ease forwards;
          }

          .feedback-form h3 {
            font-size: 2rem;
            font-family: 'Poppins', sans-serif;
            color: #0056b3;
            margin-bottom: 20px;
          }

          .form-group {
            margin-bottom: 25px;
            text-align: left;
          }

          .form-group label {
            display: block;
            font-size: 1.1rem;
            font-family: 'Roboto', sans-serif;
            color: #333;
            margin-bottom: 8px;
            font-weight: 500;
          }

          .form-group input,
          .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            border: 1px solid rgba(66, 165, 255, 0.3);
            background: rgba(255, 255, 255, 0.6);
            font-family: 'Roboto', sans-serif;
            font-size: 1rem;
            color: #333;
            transition: all 0.3s ease;
          }

          .form-group input:focus,
          .form-group textarea:focus {
            outline: none;
            border-color: #42a5ff;
            box-shadow: 0 0 10px rgba(66, 165, 255, 0.3);
          }

          .form-group textarea {
            resize: vertical;
            min-height: 120px;
          }

          .rating-group {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 20px;
          }

          .rating-star {
            font-size: 1.5rem;
            cursor: pointer;
            color: #ddd;
            transition: color 0.2s ease;
          }

          .rating-star.filled,
          .rating-star:hover,
          .rating-star:hover ~ .rating-star {
            color:rgb(247, 234, 134);
          }

          .submit-btn {
            display: inline-flex;
            align-items: center;
            background-color: #42a5ff;
            color: white;
            padding: 12px 24px;
            border-radius: 30px;
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(66, 165, 255, 0.3);
            border: none;
            cursor: pointer;
          }

          .submit-btn:hover {
            background-color: #0056b3;
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(66, 165, 255, 0.4);
          }

          .btn-icon {
            margin-right: 8px;
            font-size: 1.2rem;
          }

          @keyframes fadeInUp {
            from {
              opacity: 0;
              transform: translateY(50px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }

          @media (max-width: 768px) {
            .section-header h2 {
              font-size: 2rem;
            }

            .feedback-form {
              padding: 25px;
            }

            .feedback-form h3 {
              font-size: 1.8rem;
            }

            .testimonials-grid {
              grid-template-columns: 1fr;
            }

            .rating-star {
              font-size: 1.3rem;
            }
          }

          @media (max-width: 480px) {
            .section-header h2 {
              font-size: 1.8rem;
            }

            .section-header p {
              font-size: 1rem;
            }

            .testimonial-card h4 {
              font-size: 1.3rem;
            }

            .feedback-form h3 {
              font-size: 1.5rem;
            }

            .submit-btn {
              padding: 10px 20px;
              font-size: 0.9rem;
            }
          }
        `}
      </style>

      {/* Feedback Section */}
      <section className="feedback-section">
        <div className="section-header">
          <h2>Patient Feedback</h2>
          <p>Continuous improvement through patient insights</p>
        </div>

        {/* Témoignages */}
        <div className="testimonials-grid">
          {testimonials.map((testimonial, index) => (
            <div key={index} className="testimonial-card" style={{ '--card-index': index }}>
              <MdPerson className="testimonial-icon" />
              <h4>{testimonial.name}</h4>
              <div className="testimonial-rating">
                {[...Array(5)].map((_, i) => (
                  <FaStar
                    key={i}
                    className={`testimonial-star ${i < testimonial.rating ? "filled" : ""}`}
                  />
                ))}
              </div>
              <p>{testimonial.feedback}</p>
              <div className="testimonial-date">{testimonial.date}</div>
            </div>
          ))}
        </div>

        {/* Formulaire de Feedback */}
        <div className="feedback-form">
          <h3>Share Your Feedback</h3>
          <form onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="name">Your Name</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                placeholder="Enter your name"
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="feedback">Your Feedback</label>
              <textarea
                id="feedback"
                name="feedback"
                value={formData.feedback}
                onChange={handleChange}
                placeholder="Tell us about your experience..."
                required
              ></textarea>
            </div>
            <div className="form-group">
              <label>Rate Your Experience</label>
              <div className="rating-group">
                {[...Array(5)].map((_, i) => {
                  const ratingValue = i + 1;
                  return (
                    <FaStar
                      key={i}
                      className={`rating-star ${ratingValue <= (hoverRating || formData.rating) ? "filled" : ""}`}
                      onClick={() => handleRatingClick(ratingValue)}
                      onMouseEnter={() => setHoverRating(ratingValue)}
                      onMouseLeave={() => setHoverRating(0)}
                    />
                  );
                })}
              </div>
            </div>
            <button type="submit" className="submit-btn">
              <MdFeedback className="btn-icon" /> Submit Feedback
            </button>
          </form>
        </div>
      </section>
      <canvas className="particles-canvas"></canvas>
    </div>
  );
};

export default Feedback;
</file>

<file path="src/components/footer.css">
/* Modern Emergency Department Footer with Solid Colors */
:root {
  
  --primary-blue: #42a5ff;
  --dark-blue: #1e3a8a;
  --light-blue: #e6f3ff;
  --white: #ffffff;
  --light-gray: #e0e0e0;
  --footer-blue: #3498db;
  --footer-bottom: #2980b9;
  --emergency-icon-bg: #2c5aa0;
}

.footer {
  background-color: var(--footer-blue); /* Couleur de fond principale */
  width: 100%;
  overflow: hidden; /* Empêche tout débordement */
}

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Emergency Banner */
.emergency-banner {
  background-color: var(--dark-blue);
  padding: 12px 0;
  color: var(--white);
}

.emergency-items {
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  gap: 10px;
}

.emergency-item {
  display: flex;
  align-items: center;
  padding: 5px 10px;
  transition: transform 0.2s ease;
}

.emergency-item:hover {
  transform: translateY(-3px);
}

.emergency-icon {
  background-color: var(--emergency-icon-bg);
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 12px;
  font-size: 18px;
}

.emergency-info h3 {
  margin: 0;
  font-size: 14px;
  font-weight: 600;
}

.emergency-info a,
.emergency-info p {
  margin: 0;
  font-size: 13px;
  color: var(--light-gray);
  text-decoration: none;
}

.emergency-info a:hover {
  color: var(--white);
  text-decoration: underline;
}

/* Main Footer */
.footer-main {
  background-color: var(--footer-blue);
  color: var(--white);
  padding: 40px 0 30px;
}

.footer-content {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 30px;
}

.footer-section {
  display: flex;
  flex-direction: column;
}

/* Logo Section */
.footer-logo {
  margin-bottom: 15px;
}

.footer-logo h2 {
  margin: 0;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 0.5px;
  color: var(--white);
}

.subtitle {
  margin: 0;
  font-size: 12px;
  text-transform: uppercase;
  letter-spacing: 1px;
  color: var(--light-gray);
}

.tagline {
  font-size: 14px;
  line-height: 1.5;
  margin-top: 10px;
  max-width: 300px;
}

/* Section Headings */
.footer-heading {
  display: flex;
  align-items: center;
  font-size: 18px;
  margin: 0 0 15px;
  padding-bottom: 10px;
  border-bottom: 2px solid #5aafed;
}

.heading-icon {
  margin-right: 10px;
  font-size: 16px;
}

/* Quick Links */
.footer-links {
  list-style: none;
  padding: 0;
  margin: 0;
}

.footer-links li {
  margin-bottom: 8px;
}

.footer-links a {
  color: var(--white);
  text-decoration: none;
  font-size: 14px;
  display: flex;
  align-items: center;
  transition: all 0.2s ease;
}

.footer-links a:hover {
  transform: translateX(5px);
  color: var(--light-blue);
}

.footer-links a::before {
  content: "›";
  margin-right: 8px;
  font-size: 18px;
}

/* Hours & Contact */
.hours-container {
  margin-bottom: 15px;
}

.hours-item {
  display: flex;
  justify-content: space-between;
  padding: 5px 0;
  border-bottom: 1px dashed #5aafed;
  font-size: 14px;
}

.emergency-hours {
  display: flex;
  justify-content: space-between;
  background-color: #2c5aa0;
  padding: 8px 12px;
  margin-top: 8px;
  border-radius: 4px;
  font-size: 14px;
  border-left: 3px solid var(--dark-blue);
}

.contact-info {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 15px;
}

.contact-item {
  display: flex;
  align-items: center;
  font-size: 14px;
  transition: transform 0.2s ease;
}

.contact-item:hover {
  transform: translateX(5px);
}

.contact-icon {
  margin-right: 10px;
  font-size: 14px;
  color: var(--light-gray);
}

.contact-item a,
.contact-item span {
  color: var(--white);
  text-decoration: none;
}

.contact-item a:hover {
  text-decoration: underline;
}

/* Footer Bottom */
.footer-bottom {
  background-color: var(--footer-bottom);
  padding: 15px 0;
  font-size: 13px;
  color: var(--white);
}

.footer-bottom .container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 10px;
}

.footer-bottom p {
  margin: 0;
}

.bottom-links {
  display: flex;
  gap: 20px;
}

.bottom-links a {
  color: var(--white);
  text-decoration: none;
}

.bottom-links a:hover {
  text-decoration: underline;
}

/* Responsive Styles */
@media (max-width: 768px) {
  .emergency-items {
    flex-direction: column;
    align-items: center;
  }

  .emergency-item {
    width: 100%;
    max-width: 280px;
  }

  .footer-bottom .container {
    flex-direction: column;
    text-align: center;
  }

  .bottom-links {
    justify-content: center;
  }
}

@media (max-width: 576px) {
  .footer-content {
    grid-template-columns: 1fr;
  }

  .footer-main {
    padding: 30px 0 20px;
  }

  .footer-section {
    margin-bottom: 20px;
  }
}
</file>

<file path="src/components/footer.jsx">
import { Link } from "react-router-dom"
import { FaPhone, FaLocationArrow, FaHospital, FaAmbulance, FaFirstAid, FaClock } from "react-icons/fa"
import { MdEmail, MdEmergency } from "react-icons/md"
import "./footer.css"

const Footer = () => {
  return (
    <footer className="footer">
      {/* Emergency Banner */}

      <div className="emergency-banner bg-opacity-95 backdrop-blur-sm border-gray-100 relative"style={{ backgroundColor: '#1e3a8a' }}>
        <div className="container">
          <div className="emergency-items">
            <div className="emergency-item">
              <div className="emergency-icon">
                <FaAmbulance />
              </div>
              <div className="emergency-info">
                <h3>Emergency Hotline</h3>
                <a href="tel:+21656800822">+216 56 800 822</a>
              </div>
            </div>

            <div className="emergency-item">
              <div className="emergency-icon">
                <MdEmergency />
              </div>
              <div className="emergency-info">
                <h3>24/7 Emergency</h3>
                <p>Always Available</p>
              </div>
            </div>

            <div className="emergency-item">
              <div className="emergency-icon">
                <FaFirstAid />
              </div>
              <div className="emergency-info">
                <h3>Urgent Care</h3>
                <Link to="/emergency-register">Register Now</Link>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Footer */}
      <div className="footer-main">
        <div className="container">
          <div className="footer-content">
            {/* About Section */}
            <div className="footer-section">
              <div className="footer-logo">
                <h2>EMERGENCY MANAGEMENT</h2>
                <p className="subtitle">HEALTHCARE SYSTEM</p>
              </div>
              <p className="tagline">Providing immediate, life-saving care when every second counts.</p>
            </div>

            {/* Quick Links */}
            <div className="footer-section">
              <h3 className="footer-heading">
                <FaHospital className="heading-icon" /> Quick Links
              </h3>
              <ul className="footer-links">
                <li>
                  <Link to="/">Home</Link>
                </li>
                <li>
                  <Link to="/emergency-register">Emergency Services</Link>
                </li>
                <li>
                  <Link to="/appointment">Appointment</Link>
                </li>
                <li>
                  <Link to="/document">Medical Documents</Link>
                </li>
                <li>
                  <Link to="/about">About Us</Link>
                </li>
              </ul>
            </div>

            {/* Hours & Contact */}
            <div className="footer-section">
              <h3 className="footer-heading">
                <FaClock className="heading-icon" /> Hours & Contact
              </h3>

              <div className="hours-container">
                <div className="hours-item">
                  <span>Monday-Saturday</span>
                  <span>24/24</span>
                </div>
                <div className="emergency-hours">
                  <span>Emergency Services</span>
                  <span>24/7</span>
                </div>
              </div>

              <div className="contact-info">
                <div className="contact-item">
                  <FaPhone className="contact-icon" />
                  <a href="tel:+21656800822">+216 56 800 822</a>
                </div>
                <div className="contact-item">
                  <MdEmail className="contact-icon" />
                  <a href="mailto:Edepartement@gmail.com">Edepartement@gmail.com</a>
                </div>
                <div className="contact-item">
                  <FaLocationArrow className="contact-icon" />
                  <span>Ariana, Tunisia</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Footer Bottom */}
      <div className="footer-bottom">
        <div className="container">
          <p>© {new Date().getFullYear()} Emergency Department. All rights reserved.</p>
          <div className="bottom-links">
            <Link to="/privacy">Privacy Policy</Link>
            <Link to="/terms">Terms of Service</Link>
          </div>
        </div>
      </div>
    </footer>
  )
}

export default Footer
</file>

<file path="src/components/ForgotPassword.jsx">
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

const ForgotPassword = () => {
    const [email, setEmail] = useState("");
    const [message, setMessage] = useState(""); // Message de succès ou d'erreur
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setMessage(""); // Réinitialiser le message avant chaque requête

        try {
            const res = await axios.post("http://localhost:8089/api/auth/forgot-password", { email }, { withCredentials: true });
            
            if (res.data.message) {
                setMessage("✅ Email de réinitialisation envoyé !");
                setTimeout(() => navigate("/login"), 3000);
            }
        } catch (err) {
            console.error("❌ Erreur Axios :", err);
            setMessage("❌ Erreur lors de la réinitialisation.");
        }
    };

    return (
        <div className="d-flex justify-content-center align-items-center vh-100">
            <div className="bg-white p-3 rounded w-25" >
                <h4>Mot de passe oublié</h4>
                <form onSubmit={handleSubmit}>
                    <div className="mb-3">
                        <label htmlFor="email">
                            <strong>Email</strong>
                        </label>
                        <input
                            type="email"
                            placeholder="Entrez votre email"
                            autoComplete="off"
                            name="email"
                            className="form-control rounded-0"
                            onChange={(e) => setEmail(e.target.value)}
                            required
                        />
                    </div>
                    <button type="submit" className="btn btn-success w-100 rounded-0" style={{ backgroundColor: "#6DDCCF", borderColor: "#6DDCCF", color: "white" }}>
                        Envoyer
                    </button>
                </form>
                {message && <p className="mt-3 text-center">{message}</p>}
            </div>
        </div>
    );
};

export default ForgotPassword;
</file>

<file path="src/components/header.css">
/* Emergency Department Header Styles with #42A5FF color scheme */
.header_container {
  background-color: #42a5ff;
  padding: 12px 24px; /* Consistent padding with sidebar (px-4 in SidebarHeader is 16px, adjusted for balance) */
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000;
  border-bottom: 2px solid #0056b3; /* Slightly thinner border for a cleaner look */
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Softer shadow for depth */
}

/* Logo styling aligned with sidebar */
.header_logo {
  display: flex;
  align-items: center;
  gap: 8px; /* Matches the gap-2 (8px) in SidebarHeader */
}

.header_logo-img {
  width: 40px; /* Matches the h-10 in SidebarHeader */
  height: 40px;
  background-color: white;
  padding: 4px;
  border-radius: 6px; /* Slightly larger radius for a modern look */
  object-fit: contain;
}

/* Typography for logo text */
.header_logo .font-bold {
  font-size: 1.125rem; /* Matches text-lg in SidebarHeader */
  color: #1e3a8a; /* Darker blue for better contrast and professionalism */
  letter-spacing: -0.025em; /* Tightened tracking for a polished look */
}

.header_logo .text-xs {
  font-size: 0.75rem; /* Matches text-xs in SidebarHeader */
  color: #2563eb; /* Slightly lighter blue for contrast */
  letter-spacing: 0.05em; /* Matches tracking-wider */
}

/* Navigation links */
.header_navLinks {
  display: flex;
  align-items: center;
  gap: 12px; /* Consistent spacing between nav items */
}

.header_links {
  display: flex;
  align-items: center;
  gap: 8px; /* Smaller gap for a tighter, professional look */
}

.header_links a {
  color: white;
  text-decoration: none;
  font-weight: 500;
  font-size: 0.95rem; /* Slightly larger for readability */
  transition: all 0.2s ease-in-out;
  display: flex;
  align-items: center;
  padding: 8px 12px;
  border-radius: 6px;
}

.header_links a:hover {
  background-color: rgba(255, 255, 255, 0.15); /* Subtle hover effect */
  color: white;
}

.nav-icon {
  margin-right: 6px;
  font-size: 18px;
}

/* Emergency link styling */
.emergency-link .nav-icon {
  color: #eceff2;
}

.emergency-link:hover {
  background-color: #ff424266;
}

/* Buttons */
.header_btn {
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  background-color: #003d80;
  color: white;
  cursor: pointer;
  font-weight: 500;
  font-size: 0.875rem;
  transition: background-color 0.2s ease-in-out;
}

.header_btn:hover {
  background-color: #002a5c; /* Darker shade on hover */
}

/* Hamburger menu */
.header_hamburger {
  font-size: 24px;
  cursor: pointer;
  color: #003d80;
  display: none;
}

/* User Menu Styles */
.header_user-menu {
  position: relative;
  cursor: pointer;
  display: flex;
  align-items: center;
}

.header_user-info {
  display: flex;
  align-items: center;
  background-color: #003d80;
  padding: 6px 12px;
  border-radius: 6px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: all 0.2s ease-in-out;
  color: white;
}

.header_user-info:hover,
.header_user-info:focus {
  background-color: #002a5c;
}

.header_user-avatar {
  width: 28px;
  height: 28px;
  border-radius: 50%;
  margin-right: 8px;
  border: 1px solid rgba(255, 255, 255, 0.5);
}

.header_user-icon {
  margin-left: 5px;
  font-size: 18px;
  color: white;
}

.header_dropdown-menu {
  position: absolute;
  top: 100%;
  right: 0;
  background-color: white;
  border: 1px solid #e5e7eb;
  border-radius: 6px;
  padding: 8px 0;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  z-index: 10;
  min-width: 160px;
  margin-top: 6px;
}

.header_dropdown-menu a,
.header_dropdown-menu button {
  display: block;
  padding: 8px 16px;
  text-decoration: none;
  color: #42a5ff;
  text-align: left;
  border: none;
  background: none;
  width: 100%;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
  font-size: 0.875rem;
}

.header_dropdown-menu a:hover,
.header_dropdown-menu button:hover {
  background-color: #f3f4f6;
  color: #0056b3;
}

/* Loading spinner */
.loading-spinner {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  font-weight: bold;
  color: #42a5ff;
}

/* Responsive Styles */
@media (max-width: 768px) {
  .header_container {
    padding: 12px 16px; /* Slightly reduced padding for mobile */
  }

  .header_logo {
    flex: 1;
  }

  .header_navLinks {
    display: none;
    flex-direction: column;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: #42a5ff;
    text-align: center;
    padding: 16px 0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .header_showmenu {
    display: flex;
  }

  .header_links {
    flex-direction: column;
    gap: 12px;
  }

  .header_links a {
    margin: 0;
    justify-content: center;
    padding: 10px 16px;
  }

  .header_hamburger {
    display: block;
  }
}
</file>

<file path="src/components/header.jsx">
"use client"
import "./header.css"
import { useState, useEffect } from "react"
import { Link, useNavigate } from "react-router-dom"
import { GiHamburgerMenu } from "react-icons/gi"
import { FiUser } from "react-icons/fi"
import { MdLocalHospital, MdEmergency } from "react-icons/md"
import { FaAmbulance, FaFileMedical } from "react-icons/fa"
import Cookies from "js-cookie"
import axios from "axios"
import "./header.css"
const Header = () => {
  const [show, setShow] = useState(false)
  const [user, setUser] = useState(null)
  const [dropdownOpen, setDropdownOpen] = useState(false)
  const [loading, setLoading] = useState(true)
  const navigate = useNavigate()

  useEffect(() => {
    const fetchUserData = async () => {
      const token = Cookies.get("token")
      if (token) {
        try {
          const response = await axios.get("http://localhost:8089/api/auth/me", { withCredentials: true })
          setUser(response.data)
        } catch (error) {
          console.error("Error fetching user data:", error)
          setUser(null)
        } finally {
          setLoading(false)
        }
      } else {
        setLoading(false)
      }
    }

    fetchUserData()
  }, [])

  const handleLogout = async () => {
    try {
      await axios.post("http://localhost:8089/api/auth/logout", {}, { withCredentials: true })
      Cookies.remove("token")
      setUser(null)
      navigate("/login")
    } catch (error) {
      console.error("Logout failed:", error.response?.data?.message || error.message)
    }
  }

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen)
  }

  const closeDropdown = () => {
    setDropdownOpen(false)
  }

  if (loading) {
    return <div className="loading-spinner">Loading...</div>
  }

  return (
    <nav className="header_container">
            

      <div className="header_logo flex items-center gap-2">
  <img 
    src="./images/logo1.png" 
    alt="Emergency Medical Services" 
    className="header_logo-img w-10 h-10"
  />
  <div className="flex flex-col">
    <span className="font-bold text-blue-900 text-lg tracking-tight">
      EMERGENCY MANAGEMENT
    </span>
    <span className="text-xs text-blue-600 font-medium uppercase tracking-wider">
      Healthcare System
    </span>
  </div>
</div>

      <div className={show ? "header_navLinks header_showmenu" : "header_navLinks"}>
        <div className="header_links">
          <Link to={"/home"} onClick={() => setShow(!show)}>
            <MdLocalHospital className="nav-icon" />
            <span>Home</span>
          </Link>
          <Link to={"/emergency-register"} onClick={() => setShow(!show)} className="emergency-link">
            <MdEmergency className="nav-icon" />
            <span>Emergency</span>
          </Link>
          <Link to={"/document"} onClick={() => setShow(!show)}>
            <FaFileMedical className="nav-icon" />
            <span>Medical Document</span>
          </Link>
          <Link to={"/ambulance_check"} onClick={() => setShow(!show)}>
            <FaAmbulance className="nav-icon" />
            <span>Ambulance Check</span>
          </Link>
       
        </div>

        {user ? (
          <div className="header_user-menu">
            <div className="header_user-info" onClick={toggleDropdown}>
              {user.profileImage && (
                <img
                  src={`http://localhost:8089${user.profileImage}`}
                  alt="Profile"
                  className="header_user-avatar"
                  onError={(e) => {
                    console.error("Failed to load image:", user.profileImage)
                    e.target.style.display = "none"
                  }}
                />
              )}
              <span>{user.username}</span>
              <FiUser className="header_user-icon" />
            </div>

            {dropdownOpen && (
              <div className="header_dropdown-menu">
                <Link to="/profile" onClick={closeDropdown}>
                  My Profile
                </Link>
                <button onClick={handleLogout}>Logout</button>
              </div>
            )}
          </div>
        ) : (
          <button className="header_btn header_loginBtn" onClick={() => navigate("/login")}>
            Login
          </button>
        )}
      </div>

      <div className="header_hamburger" onClick={() => setShow(!show)}>
        <GiHamburgerMenu />
      </div>
    </nav>
  )
}

export default Header
</file>

<file path="src/components/HeaderProfile.jsx">
import React from 'react';
import { Link } from 'react-router-dom';

const Header = () => {
    return (
        <header className="bg-profileBlue-600 text-white p-4 shadow-md">
            <div className="container mx-auto flex justify-between items-center">
                <Link to="/" className="text-xl font-bold">PiFullStack</Link>
                <nav>
                    <ul className="flex space-x-4">
                        <li><Link to="/" className="hover:text-profileBlue-200">Accueil</Link></li>
                        <li><Link to="/profile" className="hover:text-profileBlue-200">Profil</Link></li>
                    </ul>
                </nav>
            </div>
        </header>
    );
};

export default Header;
</file>

<file path="src/components/Hexagon.css">
.hex-grid {
    position: relative;
    width: 100vw;
    height: 100vh;
    background: #1a1a1a;
    overflow: hidden;
  }
  
  .hexagon {
    position: absolute;
    width: 100px;
    height: 115.47px; /* 100 * √3 */
    transition: transform 0.3s ease;
    cursor: pointer;
    transform: translate(-50%, -50%);
  }
  
  .hexagon-inner {
    position: absolute;
    width: 100%;
    height: 100%;
    background: #3498db;
    clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
    transition: 
      transform 0.3s ease,
      background 0.3s ease;
  }
  
  .hexagon.animating .hexagon-inner {
    animation: wave 0.5s ease-out var(--delay) forwards;
  }
  
  @keyframes wave {
    0% {
      transform: scale(1);
      background: #3498db;
    }
    50% {
      transform: scale(1.3);
      background: #e74c3c;
    }
    100% {
      transform: scale(1);
      background: #2ecc71;
    }
  }
  
  .hexagon:hover .hexagon-inner {
    transform: scale(1.1);
    background: #2980b9;
  }
</file>

<file path="src/components/HexGrid.jsx">
import { useState, useEffect } from 'react';
import './Hexagon.css';

// Configuration des directions hexagonales (voisins)
const hexDirections = [
  [1, 0], [1, -1], [0, -1],
  [-1, 0], [-1, 1], [0, 1]
];

const HexGrid = () => {
  const [animatingHexes, setAnimatingHexes] = useState({});
  
  const generateHexGrid = () => {
    const hexagons = [];
    for(let q = -2; q <= 2; q++) {
      for(let r = -2; r <= 2; r++) {
        if (Math.abs(q + r) <= 2) {
          hexagons.push({ q, r });
        }
      }
    }
    return hexagons;
  };

  const getNeighbors = (q, r) => {
    return hexDirections.map(([dq, dr]) => [q + dq, r + dr]);
  };

  const animateHexagon = (q, r, delay) => {
    setAnimatingHexes(prev => ({
      ...prev,
      [`${q},${r}`]: delay
    }));
    
    setTimeout(() => {
      setAnimatingHexes(prev => {
        const newState = { ...prev };
        delete newState[`${q},${r}`];
        return newState;
      });
    }, delay + 500);
  };

  const triggerWave = (originQ, originR) => {
    const visited = new Set();
    const queue = [[originQ, originR, 0]];
    
    while (queue.length > 0) {
      const [q, r, delay] = queue.shift();
      const key = `${q},${r}`;
      
      if (!visited.has(key)) {
        visited.add(key);
        animateHexagon(q, r, delay);
        
        getNeighbors(q, r).forEach(([nq, nr]) => {
          queue.push([nq, nr, delay + 100]);
        });
      }
    }
  };

  const handleHexClick = (q, r) => {
    triggerWave(q, r);
  };

  return (
    <div className="hex-grid">
      {generateHexGrid().map(({ q, r }) => (
        <Hexagon
          key={`${q}-${r}`}
          q={q}
          r={r}
          delay={animatingHexes[`${q},${r}`]}
          onClick={handleHexClick}
        />
      ))}
    </div>
  );
};

const Hexagon = ({ q, r, delay, onClick }) => {
  const xPosition = q * 100 + r * 50;
  const yPosition = r * 87; // 87 ≈ 100 * √3/2

  return (
    <div 
      className={`hexagon ${delay !== undefined ? 'animating' : ''}`}
      style={{
        left: `${xPosition}px`,
        top: `${yPosition}px`,
        '--delay': `${delay}ms`
      }}
      onClick={() => onClick(q, r)}
    >
      <div className="hexagon-inner"></div>
    </div>
  );
};

export default HexGrid;
</file>

<file path="src/components/home.jsx">
import "../App.css";

import React, { useEffect } from "react";

import Carousel from "react-multi-carousel";
import "react-multi-carousel/lib/styles.css";
import { FaArrowLeft, FaArrowRight, FaAmbulance, FaFileMedical, FaHospital } from "react-icons/fa";
import { MdEmergency, MdFeedback, MdInventory } from "react-icons/md";
import { Link } from "react-router-dom";
import ParticlesComponent from "@/components/ParticlesComponent";

const Home = () => {
  const servicesArray = [
    { 
      name: "Emergency Care", 
      imageUrl: "/images/Emergecy.png",
      icon: <MdEmergency className="service-icon" />,
      description: "Immediate medical attention for critical conditions"
    },
    { 
      name: "Medical Documents", 
      imageUrl: "/images/electronic_medical_records-removebg-preview.png",
      icon: <FaFileMedical className="service-icon" />,
      description: "Secure access to patient records and medical history"
    },
    { 
      name: "Ambulance Services", 
      imageUrl: "/images/stafambulace.png",
      icon: <FaAmbulance className="service-icon" />,
      description: "Rapid response emergency transportation"
    },
    { 
      name: "Resource Management", 
      imageUrl: "/images/ressources-removebg-preview.png",
      icon: <MdInventory className="service-icon" />,
      description: "Efficient allocation of medical supplies and equipment"
    },
    { 
      name: "Patient Feedback", 
      imageUrl: "/images/equipe2-removebg-preview.png",
      icon: <MdFeedback className="service-icon" />,
      description: "Continuous improvement through patient insights"
    },
  ];
  
const newsArray = [
  {
    title: "AI Revolutionizes Healthcare Delivery",
    description: "UnitedHealth Group deploys 1,000 AI applications to enhance insurance, health delivery, and pharmacy services, improving patient outcomes.",
    date: "May 5, 2025",
    source: "PYMNTS.com",
    link: "https://www.pymnts.com",
    image: "https://picsum.photos/id/2/800/450" 
                                                
  },
  {
    title: "Mental Health Investments Delayed",
    description: "55% of healthcare organizations postpone mental health initiatives due to tariff-driven supply chain issues, highlighting gaps in global health governance.",
    date: "May 7, 2025",
    source: "ResearchAndMarkets.com",
    link: "https://finance.yahoo.com",
    image: "https://picsum.photos/id/1015/800/450" 
                                                
  },
  {
    title: "Wearable Healthcare Market Booms",
    description: "The smart wearable healthcare devices market is projected to reach USD 37.4 billion by 2028, driven by IoMT and proactive patient monitoring.",
    date: "May 2, 2025",
    source: "PR Newswire",
    link: "https://www.excellentwebworld.com",
    image: "https://picsum.photos/id/160/800/450" // Image d'une montre ou d'un objet technologique (ID 160 est une smartwatch)
                                                // Alternative: https://picsum.photos/seed/wearabletech/800/450
  },
  {
    title: "Data Breach Exposes Millions",
    description: "Blue Shield of California confirms the largest healthcare data breach of 2025, affecting 4.7 million patients due to a misconfigured Google Analytics setup.",
    date: "April 24, 2025",
    source: "TheStreet",
    link: "https://www.thestreet.com",
    image: "https://picsum.photos/id/0/800/450" 
  },
 
  {
    title: "Telemedicine Adoption Skyrockets",
    description: "A new report shows a 300% increase in telemedicine consultations in the last quarter, driven by convenience and accessibility.",
    date: "May 10, 2025",
    source: "Healthcare IT News",
    link: "https://www.healthcareitnews.com",
    image: "https://picsum.photos/id/200/800/450" 
  },
  {
    title: "Breakthrough in Cancer Research",
    description: "Scientists announce a promising new therapy showing significant results in early-stage clinical trials for a common type of cancer.",
    date: "May 12, 2025",
    source: "Nature Medicine",
    link: "https://www.nature.com/nm/",
    image: "https://picsum.photos/id/30/800/450"  
  }
];


  const responsive = {
    desktop: { breakpoint: { max: 3000, min: 1024 }, items: 3, slidesToSlide: 1 },
    tablet: { breakpoint: { max: 1024, min: 768 }, items: 2, slidesToSlide: 1 },
    mobile: { breakpoint: { max: 768, min: 0 }, items: 1, slidesToSlide: 1 },
  };

  const CustomLeftArrow = ({ onClick }) => (
    <div className="custom-arrow left-arrow" onClick={onClick}>
      <FaArrowLeft size={24} />
    </div>
  );

  const CustomRightArrow = ({ onClick }) => (
    <div className="custom-arrow right-arrow" onClick={onClick}>
      <FaArrowRight size={24} />
    </div>
  );
  useEffect(() => {
    const canvas = document.querySelector(".particles-canvas");
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    const particles = [];
    const particleCount = 50;

    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 5 + 1;
        this.speedX = Math.random() * 1 - 0.5;
        this.speedY = Math.random() * 1 - 0.5;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;

        if (this.x > canvas.width || this.x < 0) this.speedX *= -1;
        if (this.y > canvas.height || this.y < 0) this.speedY *= -1;
      }

      draw() {
        ctx.fillStyle = "rgba(66, 165, 255, 0.5)";
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle());
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particles.forEach(particle => {
        particle.update();
        particle.draw();
      });
      requestAnimationFrame(animate);
    }

    animate();

    const handleResize = () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <div className="relative min-h-screen flex flex-col bg-gradient-to-br from-blue-50 to-cyan-50 font-sans">
      <div className="fixed inset-0 z-0">
        <ParticlesComponent 
          id="home-particles"
          style={{
            position: 'absolute',
            width: '100%',
            height: '100%',
            backgroundColor: '#E8F4F8'
          }}
        />
      </div>

      <div className="home-container relative z-10">
        <section className="hero-section">
          <div className="hero-content">
            <div className="hero-text">
              <div className="emergency-badge">
                <span className="pulse-dot"></span>
                Emergency Services
              </div>
              <h1>Transforming Emergency Care with Smart Solutions</h1>
              <p>
                Our Intelligent Emergency Department Management System revolutionizes patient care by optimizing resources, 
                reducing waiting times, and enhancing real-time collaboration among healthcare professionals.
              </p>
              <div className="hero-buttons">
  <Link to="/emergency-register" className="emergency-btn">
    Emergency Services
  </Link>
</div>
            </div>
            <div className="hero-image">
              <div className="image-container">
                <img src="/images/hero.png" alt="Emergency care" className="animated-image" />
                <div className="blue-circle"></div>
              </div>
            </div>
          </div>
          
          <div className="stats-bar">
            <div className="stat-item">
              <h3>24/24</h3>
              <p>Emergency Care</p>
            </div>
            <div className="stat-divider"></div>
            <div className="stat-item">
              <h3>15 min</h3>
              <p>Avg. Response Time</p>
            </div>
            <div className="stat-divider"></div>
            <div className="stat-item">
              <h3>100+</h3>
              <p>Medical Professionals</p>
            </div>
            <div className="stat-divider"></div>
            <div className="stat-item">
              <h3>50,000+</h3>
              <p>Patients Served</p>
            </div>
          </div>
        </section>

        <section className="services-section">
          <div className="section-header">
            <h2>Our Services</h2>
            <p>Comprehensive emergency care solutions designed for efficiency and patient comfort</p>
          </div>

          <Carousel
            responsive={responsive}
            infinite={true}
            autoPlay={true}
            autoPlaySpeed={3000}
            customLeftArrow={<CustomLeftArrow />}
            customRightArrow={<CustomRightArrow />}
            className="services-carousel"
          >
            {servicesArray.map((service, index) => (
              <div key={index} className="service-card">
                <div className="service-icon-container">
                  {service.icon}
                </div>
                <h4 className="service-name">{service.name}</h4>
                <p className="service-description">{service.description}</p>
                <Link
                to={service.name === "Patient Feedback" ? "/feedback" : `/${service.name.toLowerCase().replace(/\s+/g, '-')}`}
                className="service-link"
              >
                Learn More
              </Link>
              </div>
            ))}
          </Carousel>
        </section>

        <section className="about-section">
          <div className="about-content">
            <div className="about-image">
              <img src="/images/about.png" alt="Who we are" className="bio-image" />
              <div className="image-accent"></div>
            </div>
            <div className="about-text">
              <div className="section-badge">About Us</div>
              <h2>Who We Are</h2>
              <p className="about-description">
                Emergency departments (ED) play a crucial role as the first point of contact for patients requiring urgent medical attention. 
                Our mission is to revolutionize emergency care through innovative technology and compassionate service.
              </p>
              <div className="about-features">
                <div className="feature">
                  <div className="feature-icon">
                    <FaHospital />
                  </div>
                  <div className="feature-text">
                    <h4>Modern Facilities</h4>
                    <p>State-of-the-art equipment and comfortable environments</p>
                  </div>
                </div>
                <div className="feature">
                  <div className="feature-icon">
                    <MdEmergency />
                  </div>
                  <div className="feature-text">
                    <h4>Rapid Response</h4>
                    <p>Quick and efficient emergency care when seconds count</p>
                  </div>
                </div>
              </div>
              <Link to="/about" className="about-btn-secondary">
                Discover Our Story
              </Link>
            </div>
          </div>
        </section>
        
{/* News Section Styles */}
<style>
        {`
          .news-section {
            padding: 80px 20px;
            background: linear-gradient(135deg, #e6f0fa 0%, #d4e4f7 100%);
            text-align: center;
            position: relative;
            overflow: hidden;
          }

          .news-section .section-header {
            margin-bottom: 50px;
            position: relative;
            z-index: 2;
          }

          .news-section .section-header h2 {
            font-size: 3rem;
            font-family: 'Poppins', sans-serif;
            font-weight: 700;
            background: linear-gradient(90deg, #0056b3, #42a5ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
          }

          .news-section .section-header p {
            font-size: 1.2rem;
            font-family: 'Roboto', sans-serif;
            color:rgb(10, 15, 63);
            max-width: 700px;
            margin: 0 auto;
            font-weight: 300;
          }

          .news-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 30px;
            max-width: 1400px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
          }

          .news-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            overflow: hidden;
            position: relative;
            transform: translateY(calc(var(--card-index) * 10px)) rotate(0deg);
            transition: transform 0.4s ease, box-shadow 0.4s ease;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
            animation: fadeInUp 0.6s ease forwards;
            animation-delay: calc(var(--card-index) * 0.1s);
            border: 1px solid rgba(255, 255, 255, 0.2);
          }

          .news-card:hover {
            transform: translateY(0) scale(1.05);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.25), 0 0 20px rgba(66, 165, 255, 0.5);
          }

          .news-image {
            height: 400px;
            background-size: cover;
            background-position: center;
            position: relative;
            display: flex;
            align-items: flex-end;
            transition: background-position 0.5s ease;
          }

          .news-card:hover .news-image {
            background-position: center 20%;
          }

          .news-overlay {
            background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.7) 100%);
            width: 100%;
            padding: 20px;
            color: #fff;
            transition: background 0.3s ease;
          }

          .news-card:hover .news-overlay {
            background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.85) 100%);
          }

          .news-title {
            font-size: 1.8rem;
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            margin-bottom: 10px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
            background: linear-gradient(90deg, #fff, #42a5ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
          }

          .news-description {
            font-size: 1rem;
            font-family: 'Roboto', sans-serif;
            line-height: 1.5;
            margin-bottom: 15px;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
          }

          .news-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            font-family: 'Roboto', sans-serif;
            font-style: italic;
            margin-bottom: 15px;
          }

          .news-date,
          .news-source {
            color: #ff6f61;
          }

          .news-link {
            display: inline-block;
            font-size: 1.1rem;
            font-family: 'Poppins', sans-serif;
            font-weight: 500;
            color: #00d4ff;
            text-decoration: none;
            padding: 8px 16px;
            border: 2px solid #00d4ff;
            border-radius: 25px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
          }

          .news-link:hover {
            background: #00d4ff;
            color: #fff;
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 0 15px rgba(0, 212, 255, 0.5);
          }

          .news-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: 0.5s;
          }

          .news-link:hover::before {
            left: 100%;
          }

          .particles-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
          }

          @keyframes fadeInUp {
            from {
              opacity: 0;
              transform: translateY(50px) rotate(0deg);
            }
            to {
              opacity: 1;
              transform: translateY(calc(var(--card-index) * 10px)) rotate(0deg);
            }
          }

          @media (max-width: 1024px) {
            .news-grid {
              grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            }
          }

          @media (max-width: 768px) {
            .news-grid {
              grid-template-columns: 1fr;
            }

            .news-card {
              transform: translateY(0) rotate(0deg);
              animation: fadeInUpMobile 0.6s ease forwards;
            }

            .news-image {
              height: 300px;
            }

            .news-section .section-header h2 {
              font-size: 2rem;
            }

            .news-title {
              font-size: 1.5rem;
            }
          }

          @media (max-width: 480px) {
            .news-section .section-header h2 {
              font-size: 1.8rem;
            }
          }

          @keyframes fadeInUpMobile {
            from {
              opacity: 0;
              transform: translateY(50px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }
        `}
      </style>

      {/* News Section */}
      <section className="news-section">
        <div className="section-header">
          <h2>Health News Unleashed</h2>
          <p>Discover the pulse of healthcare innovation with our latest updates</p>
        </div>
        <div className="news-grid">
          {newsArray.map((news, index) => (
            <div key={index} className={`news-card news-card-${index}`} style={{ '--card-index': index }}>
              <div className="news-image" style={{ backgroundImage: `url(${news.image})` }}>
                <div className="news-overlay">
                  <h4 className="news-title">{news.title}</h4>
                  <p className="news-description">{news.description}</p>
                  <div className="news-meta">
                    <span className="news-date">{news.date}</span>
                    <span className="news-source">Source: {news.source}</span>
                  </div>
                  <a href={news.link} target="_blank" rel="noopener noreferrer" className="news-link">
                    Dive In
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>
        <canvas className="particles-canvas"></canvas>
      </section>
      
        
      </div>
    </div>
  );
};

export default Home;
</file>

<file path="src/components/Layout.jsx">
// src/components/Layout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import Header from "./header";
import Footer from "./footer";
import DashboardSidebar from "./DashboardSidebar";
import { ThemeProvider } from "@/components/theme-provider";
import { SidebarProvider } from "@/components/ui/sidebar";

export const HeaderFooterLayout = () => {
  return (
    <ThemeProvider>
      <div className="flex flex-col min-h-screen">
        <Header />
        <main className="flex-grow">
          <Outlet />
        </main>
        <Footer />
      </div>
    </ThemeProvider>
  );
};

export const DashboardLayout = () => {
  return (
    <ThemeProvider>
      <SidebarProvider>
        <div className="flex min-h-screen">
          <DashboardSidebar />
          <main className="flex-1">
            <Outlet />
          </main>
        </div>
      </SidebarProvider>
    </ThemeProvider>
  );
};

export const BasicLayout = () => {
  return (
    <ThemeProvider>
      <main>
        <Outlet />
      </main>
    </ThemeProvider>
  );
};
</file>

<file path="src/components/LoadingState.jsx">
import React from 'react';

const LoadingState = () => {
    return (
        <div className="w-full h-screen flex flex-col items-center justify-center bg-white">
            <div className="flex flex-col items-center space-y-4">
                <div className="relative w-24 h-24">
                    <div className="absolute inset-0 rounded-full bg-gradient-to-r from-profileBlue-400 to-profileTeal-400 animate-pulse-slow"></div>
                    <div className="absolute inset-1 rounded-full bg-white"></div>
                    <div className="absolute inset-3 rounded-full bg-gradient-to-r from-profileBlue-400 to-profileTeal-400 animate-spin" style={{ animationDuration: '3s' }}></div>
                    <div className="absolute inset-5 rounded-full bg-white"></div>
                    <div className="absolute inset-7 rounded-full bg-gradient-to-r from-profileBlue-500 to-profileTeal-500 animate-pulse-slow" style={{ animationDelay: '0.5s' }}></div>
                </div>

                <div className="flex flex-col items-center">
                    <div className="h-2 w-32 bg-gray-200 rounded overflow-hidden">
                        <div className="h-full w-full bg-gradient-to-r from-profileBlue-400 to-profileTeal-400 animate-shimmer"></div>
                    </div>
                    <h3 className="text-profileBlue-600 font-medium mt-3">Loading your profile</h3>
                    <p className="text-gray-500 text-sm mt-1">Please wait a moment</p>
                </div>
            </div>
        </div>
    );
};

export default LoadingState;
</file>

<file path="src/components/login.jsx">
import React, { useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import "bootstrap/dist/css/bootstrap.min.css";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const response = await axios.post(
        "http://localhost:8089/api/auth/login",
        { email, password },
        { withCredentials: true } // Ensures cookies are stored
      );
      const userData = response.data.user;
      userData.profilePicture = userData.gender === "male" ? "/images/male.jpg" : "/images/female.jpg";

      // Store user info in session storage (alternative to localStorage)
      sessionStorage.setItem("user", JSON.stringify(userData));

      setMessage(`Connexion réussie ! Bienvenue, ${userData.username}`);

      if (userData.role === "Patient") {
        navigate("/home");
      } else {
        navigate("/dashboard");
      }
    } catch (error) {
      setMessage(error.response?.data?.message || "Erreur lors de la connexion");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleLoginSuccess = async (response) => {
    try {
      const res = await axios.post("http://localhost:8089/api/auth/google-login", {
        token: response.credential,
      });

      localStorage.setItem("user", JSON.stringify(res.data.user));
      localStorage.setItem("token", res.data.token);

      setMessage("Connexion réussie avec Google !");
      navigate("/home");
    } catch (error) {
      setMessage("Erreur lors de l'authentification Google");
    }
  };

  const handleGoogleLoginFailure = () => {
    setMessage("Échec de l'authentification Google");
  };

  return (
    <div className="d-flex vh-100 bg-light ">
      <div className="col-md-6 d-flex flex-column align-items-center justify-content-center text-white"
        style={{ backgroundColor: "#6DDCCF" }}>
        <h1 className="mb-4">ED</h1>
        <img src="/images/image1.png" alt="Project Logo" className="mb-4 rounded shadow-lg img-fluid" style={{ maxWidth: "300px" }} />
        <h2 className="mb-2">Emergency departments </h2>
        <p className="text-center">providing healthcare to different patient categories</p>
      </div>

      <div className="col-md-6 d-flex flex-column justify-content-center p-5 bg-white shadow">
        <h2 className="mb-3">Sign In</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Email Address</label>
            <input type="email" className="form-control" value={email} onChange={(e) => setEmail(e.target.value)} required />
          </div>
          <div className="mb-3">
            <label className="form-label">Password</label>
            <input type="password" className="form-control" value={password} onChange={(e) => setPassword(e.target.value)} required />
          </div>
          <div className="d-flex justify-content-between mb-3">
            <div className="form-check">
              <input type="checkbox" className="form-check-input" id="rememberMe" />
              <label className="form-check-label" htmlFor="rememberMe">Remember Me</label>
            </div>
            <Link to="/forgotpassword" className="text-primary">Forgot Password?</Link>
          </div>
          <button
            type="submit"
            className="btn w-100"
            style={{ backgroundColor: "#6DDCCF", borderColor: "#6DDCCF", color: "white" }}
            disabled={isLoading}
          >
            {isLoading ? "Connexion en cours..." : "Se connecter"}
          </button>
        </form>

        <GoogleOAuthProvider clientId="681587327914-bh8qlfn9kr76hci8d4n0v1mces8ac0r0.apps.googleusercontent.com">
          <GoogleLogin
            onSuccess={handleGoogleLoginSuccess}
            onError={handleGoogleLoginFailure}
          />
        </GoogleOAuthProvider>

        {message && <div className={`alert ${message.includes("réussie") ? "alert-success" : "alert-danger"} mt-3`}>{message}</div>}

        <p className="text-center mt-3">
          Don't have an account? <Link to="/register" className="text-primary">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/components/Login/login.jsx">
import React, { useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import "bootstrap/dist/css/bootstrap.min.css";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const response = await axios.post(
        "http://localhost:8089/api/auth/login",
        { email, password },
        { withCredentials: true } // Ensures cookies are stored
      );
      const userData = response.data.user;
      userData.profilePicture = userData.gender === "male" ? "/images/male.jpg" : "/images/female.jpg";

      // Store user info in session storage (alternative to localStorage)
      sessionStorage.setItem("user", JSON.stringify(userData));

      setMessage(`Connexion réussie ! Bienvenue, ${userData.username}`);

      if (userData.role === "Patient") {
        navigate("/home");
      } else {
        navigate("/dashboard");
      }
    } catch (error) {
      setMessage(error.response?.data?.message || "Erreur lors de la connexion");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleLoginSuccess = async (response) => {
    try {
      const res = await axios.post("http://localhost:8089/api/auth/google-login", {
        token: response.credential,
      });

      localStorage.setItem("user", JSON.stringify(res.data.user));
      localStorage.setItem("token", res.data.token);

      setMessage("Connexion réussie avec Google !");
      navigate("/home");
    } catch (error) {
      setMessage("Erreur lors de l'authentification Google");
    }
  };

  const handleGoogleLoginFailure = () => {
    setMessage("Échec de l'authentification Google");
  };

  return (
    <div className="d-flex vh-100 bg-light  ">
      <div className="col-md-6 d-flex flex-column align-items-center justify-content-center text-white"
        style={{ backgroundColor: "#6DDCCF" }}>
        <h1 className="mb-4">ED</h1>
        <img src="/images/image1.png" alt="Project Logo" className="mb-4 rounded shadow-lg img-fluid" style={{ maxWidth: "300px" }} />
        <h2 className="mb-2">Emergency departments </h2>
        <p className="text-center">providing healthcare to different patient categories</p>
      </div>

      <div className="col-md-6 d-flex flex-column justify-content-center p-5 bg-white shadow">
        <h2 className="mb-3">Sign In</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Email Address</label>
            <input type="email" className="form-control" value={email} onChange={(e) => setEmail(e.target.value)} required />
          </div>
          <div className="mb-3">
            <label className="form-label">Password</label>
            <input type="password" className="form-control" value={password} onChange={(e) => setPassword(e.target.value)} required />
          </div>
          <div className="d-flex justify-content-between mb-3">
            <div className="form-check">
              <input type="checkbox" className="form-check-input" id="rememberMe" />
              <label className="form-check-label" htmlFor="rememberMe">Remember Me</label>
            </div>
            <Link to="/forgotpassword" className="text-primary">Forgot Password?</Link>
          </div>
          <button
            type="submit"
            className="btn w-100"
            style={{ backgroundColor: "#6DDCCF", borderColor: "#6DDCCF", color: "white" }}
            disabled={isLoading}
          >
            {isLoading ? "Connexion en cours..." : "Se connecter"}
          </button>
        </form>

        <GoogleOAuthProvider clientId="681587327914-bh8qlfn9kr76hci8d4n0v1mces8ac0r0.apps.googleusercontent.com">
          <GoogleLogin
            onSuccess={handleGoogleLoginSuccess}
            onError={handleGoogleLoginFailure}
          />
        </GoogleOAuthProvider>

        {message && <div className={`alert ${message.includes("réussie") ? "alert-success" : "alert-danger"} mt-3`}>{message}</div>}

        <p className="text-center mt-3">
          Don't have an account? <Link to="/register" className="text-primary">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/components/ParticlesComponent.jsx">
import Particles, { initParticlesEngine } from "@tsparticles/react";
import { useEffect, useMemo, useState } from "react";
import { loadSlim } from "@tsparticles/slim";

const ParticlesComponent = (props) => {
  const [init, setInit] = useState(false);

  useEffect(() => {
    initParticlesEngine(async (engine) => {
      await loadSlim(engine);
    }).then(() => {
      setInit(true);
    });
  }, []);

  const particlesLoaded = (container) => {
    console.log(container);
  };

  // Configuration médicale/thème santé
  const options = useMemo(() => ({
    background: {
color: "linear-gradient(to bottom right, #1e3a8a, #1e3a8a)" // Dégradé ajouté ici
    },
    fpsLimit: 120,
    interactivity: {
      events: {
        onClick: {
          enable: true,
          mode: "push" // Ajoute des particules au clic
        },
        onHover: {
          enable: true,
          mode: "grab",
          parallax: { enable: true, force: 30 } // Effet parallaxe
        }
      },
      modes: {
        grab: { distance: 100 }
      }
    },
    particles: {
      color: {
        value: "#1e3a8a" // Bleu médical
      },
      links: {
        color: "#42A5FF", // Bleu pastel
        distance: 100,
        enable: true,
        opacity: 0.4,
        width: 1
      },
      move: {
        direction: "none",
        enable: true,
        outModes: "out",
        speed: 0.5,
        wobble: true // Léger tremblement
      },
      number: {
        value: 80 // Moins de particules pour plus de clarté
      },
      opacity: {
        value: { min: 0.3, max: 0.7 } // Variation de transparence
      },
      shape: {
        type: ["circle", "cross"], // Formes médicales (cercles et croix)
        options: {
          cross: {
            fill: true,
            close: true
          }
        }
      },
      size: {
        value: { min: 2, max: 5 } // Taille plus variable
      }
    },
    emitters: {
      life: { duration: 0.1, count: 10 },
      position: { x: 50, y: 50 },
      rate: { delay: 0.1, quantity: 5 }
    },
    themes: [
      {
        name: "medical",
        default: {
          value: true,
          auto: true,
          mode: "light"
        },
        options: {
          background: {
color: "linear-gradient(to bottom right, #1e3a8a, #1e3a8a)" // Dégradé dans le thème            
          },
          particles: {
            color: { value: ["#6DDDCF", "#1e3a8a", "#1e3a8a"] } // Palette bleue
          }
        }
      }
    ],
    detectRetina: true
  }), []);

  return init ? <Particles id={props.id} init={particlesLoaded} options={options} /> : <></>;
};

export default ParticlesComponent;
</file>

<file path="src/components/profile.jsx">
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie';
// ProfileHeader n'est plus importé/utilisé directement ici
import ProfileContent from './ProfileContent';
import LoadingState from './LoadingState';
import { toast } from 'sonner';


const Profile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('personal');
  const [profileData, setProfileData] = useState(null); // Initialiser à null pour mieux gérer l'état de chargement
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = Cookies.get("token");
    if (!token) {
        setError("Authentication token not found. Please log in.");
        setLoading(false);
        // Idéalement, rediriger vers la page de connexion
        return;
    }

    axios.get('http://localhost:8089/api/profile', {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    .then(response => {
      // S'assurer que la structure attendue est là
      const data = response.data;
      setProfileData({
        personal: data.personal || {},
        contact: data.contact || {}, // Assurez-vous que ces sections existent ou initialisez-les
        emergencyContacts: data.emergencyContacts || {},
        settings: data.settings || {},
        medical: data.medical || {},
        professional: data.professional || {},
        certifications: data.certifications || {},
        appointments: data.appointments || {},
        // ... autres sections si nécessaire
      });
      setLoading(false);
    })
    .catch(error => {
      console.error('Error fetching profile:', error);
      if (error.response) {
        setError(`Error ${error.response.status}: ${error.response.data.message || 'Failed to load profile'}`);
      } else if (error.request) {
        setError('No response from server. Please check your connection.');
      } else {
        setError('Error setting up request: ' + error.message);
      }
      setLoading(false);
    });
  }, []);

  const handleSave = async () => {
    // ... (votre logique handleSave existante)
    // Assurez-vous que profileData est bien structuré avant l'envoi
    // et que le backend attend cette structure.
    try {
      const token = Cookies.get("token");
      // Filtrer les sections vides si le backend ne les gère pas
      const dataToSave = { ...profileData };
      Object.keys(dataToSave).forEach(key => {
        if (Object.keys(dataToSave[key]).length === 0) {
          delete dataToSave[key]; // Optionnel: supprimer les sections vides
        }
      });

      const response = await axios.put('http://localhost:8089/api/profile', dataToSave, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      if (response.status === 200) {
        const updatedData = response.data;
         setProfileData({ // S'assurer de réinitialiser toutes les sections
            personal: updatedData.personal || {},
            contact: updatedData.contact || {},
            emergencyContacts: updatedData.emergencyContacts || {},
            settings: updatedData.settings || {},
            medical: updatedData.medical || {},
            professional: updatedData.professional || {},
            certifications: updatedData.certifications || {},
            appointments: updatedData.appointments || {},
         });
        setIsEditing(false);
        toast.success('Profile updated successfully');
      } else {
        throw new Error(`Failed to update profile - Status: ${response.status}`);
      }
    } catch (error) {
      console.error('Error saving profile:', error);
      toast.error(error.message || 'Failed to update profile. Please try again.');
      // setError peut aussi être utilisé pour afficher l'erreur dans l'UI si besoin
    }
  };

  const handleEdit = (section, field, value) => {
    setProfileData(prev => {
      // Si la section n'existe pas, l'initialiser
      const currentSectionData = prev[section] || {};
      return {
        ...prev,
        [section]: {
          ...currentSectionData,
          [field]: value
        }
      };
    });
  };

  if (loading) return <LoadingState />;
  if (error || !profileData) { // Ajout de !profileData pour le cas où les données ne sont pas chargées
    return (
      <div className="min-h-screen bg-slate-50 flex flex-col items-center justify-center p-4">
        {/* ... (votre UI d'erreur) ... */}
         <p className="text-gray-600 mb-4">{error || "Failed to load profile data."}</p>
      </div>
    );
  }

  return (
    // ProfileContent gère son propre fond et le ProfileHeader
    <ProfileContent
      profileData={profileData}
      activeTab={activeTab}
      setActiveTab={setActiveTab}
      isEditing={isEditing}
      setIsEditing={setIsEditing}
      handleEdit={handleEdit}
      handleSave={handleSave}
    />
  );
};

export default Profile;
</file>

<file path="src/components/ProfileActions.jsx">
import React from 'react';
import PropTypes from 'prop-types'; // Importez PropTypes
import { motion } from 'framer-motion';
import { PencilIcon, SaveIcon, Share2 } from 'lucide-react';

// L'interface est supprimée, nous utiliserons PropTypes à la place

const ProfileActions = ({
  isEditing,
  onEdit,
  onSave,
  onShare,
  sectionTitle
}) => {
  return (
    <div className="flex justify-between items-center mb-6">
      <motion.h2
        className="text-2xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent"
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.3 }}
      >
        {sectionTitle}
      </motion.h2>

      <div className="flex gap-2">
        {onShare && (
          <motion.button
            className="p-2 rounded-lg bg-secondary text-secondary-foreground hover:bg-secondary/80 transition-colors duration-200"
            onClick={onShare}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Share2 size={18} />
          </motion.button>
        )}

        <motion.button
          className={`px-4 py-2 rounded-lg flex items-center gap-2 ${
            isEditing
              ? 'bg-primary text-primary-foreground'
              : 'bg-secondary text-secondary-foreground hover:bg-secondary/80'
          } transition-colors duration-200`}
          onClick={() => (isEditing ? onSave() : onEdit())}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          {isEditing ? (
            <>
              <SaveIcon size={18} />
              <span className="text-sm font-medium">Enregistrer</span>
            </>
          ) : (
            <>
              <PencilIcon size={18} />
              <span className="text-sm font-medium">Modifier</span>
            </>
          )}
        </motion.button>
      </div>
    </div>
  );
};

// Définition des PropTypes pour la validation
ProfileActions.propTypes = {
  isEditing: PropTypes.bool.isRequired,
  onEdit: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
  onShare: PropTypes.func, // Optionnel, donc pas de .isRequired
  sectionTitle: PropTypes.string.isRequired,
};

export default ProfileActions;
</file>

<file path="src/components/ProfileAvatar.jsx">
import React from 'react';
import { UserRound } from 'lucide-react';

const sizes = {
    sm: 'w-16 h-16',
    md: 'w-24 h-24',
    lg: 'w-32 h-32',
    xl: 'w-40 h-40'
};

const ProfileAvatar = ({ imageUrl, altText, size = 'lg' }) => {
    return (
        <div className={`profile-avatar ${sizes[size]} rounded-full overflow-hidden animate-fade-in`}>
            {imageUrl ? (
                <img
                    src={imageUrl}
                    alt={altText}
                    className="w-full h-full object-cover"
                    loading="lazy"
                />
            ) : (
                <div className="w-full h-full flex items-center justify-center bg-[#42A5FF]/20">
                    <UserRound
                        className="text-[#42A5FF]"
                        size={size === 'xl' ? 64 : size === 'lg' ? 48 : size === 'md' ? 36 : 24}
                    />
                </div>
            )}
        </div>
    );
};

export default ProfileAvatar;
</file>

<file path="src/components/ProfileContent.jsx">
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { motion, AnimatePresence } from 'framer-motion';
import { User, Contact, Settings, Activity, Award, Calendar, Mail, PencilIcon, SaveIcon, Droplet, Pill, Dumbbell } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Card } from '@/components/ui/card';

// Importations des composants enfants
import TabNavigation from './TabNavigation';
import EditableField from './EditableField';
import ProfileHeader from './ProfileHeader';

// Base URL for backend
const BACKEND_BASE_URL = 'http://localhost:8089';

// Static daily advice data for patients (in English)
const DAILY_ADVICE = [
  {
    id: '1',
    title: 'Stay Hydrated',
    description: 'Drink at least 8 glasses of water daily to maintain energy and overall health.',
    image: 'https://picsum.photos/200?random=1',
    icon: <Droplet className="w-12 h-12 text-blue-600" />,
  },
  {
    id: '2',
    title: 'Take Your Medication',
    description: 'Follow your medication schedule to manage your health effectively.',
    image: 'https://picsum.photos/200?random=2',
    icon: <Pill className="w-12 h-12 text-blue-600" />,
  },
  {
    id: '3',
    title: 'Get Moving',
    description: 'Engage in 30 minutes of light exercise, like walking, to boost mood and fitness.',
    image: 'https://picsum.photos/200?random=3',
    icon: <Dumbbell className="w-12 h-12 text-blue-600" />,
  },
];

const ProfileContent = ({
  profileData,
  activeTab,
  setActiveTab,
  isEditing,
  setIsEditing,
  handleEdit,
  handleSave,
}) => {
  const [isDarkThemeLocal, setIsDarkThemeLocal] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') === 'dark';
    }
    return false;
  });
  const [avatarUrlLocal, setAvatarUrlLocal] = useState('');
  const [notificationsLocal, setNotificationsLocal] = useState(0);

  const { toast } = useToast();

  // Effect for theme
  useEffect(() => {
    const root = window.document.documentElement;
    if (isDarkThemeLocal) {
      root.classList.add('dark');
      if (typeof window !== 'undefined') localStorage.setItem('theme', 'dark');
    } else {
      root.classList.remove('dark');
      if (typeof window !== 'undefined') localStorage.setItem('theme', 'light');
    }
  }, [isDarkThemeLocal]);

  // Effect to sync avatar URL
  useEffect(() => {
    let finalImageUrl = '';
    if (profileData?.personal?.profileImage) {
      const imagePath = profileData.personal.profileImage;
      if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
        finalImageUrl = imagePath;
      } else if (imagePath.startsWith('/')) {
        finalImageUrl = `${BACKEND_BASE_URL}${imagePath}`;
      } else {
        console.warn("Unrecognized image path format:", imagePath);
      }
    }
    setAvatarUrlLocal(finalImageUrl);
    setNotificationsLocal(profileData?.user?.unreadNotifications || 3);
  }, [profileData]);

  // Debug role, tab, and profile data
  useEffect(() => {
    console.log("ProfileContent - Role:", profileData?.personal?.role, "Active Tab:", activeTab);
    console.log("Profile Data:", JSON.stringify(profileData, null, 2));
  }, [profileData, activeTab]);

  const getTabs = () => {
    const baseTabs = ['personal', 'contact', 'emergencyContacts', 'settings'];
    if (!profileData?.personal?.role) {
      console.log("No role defined, using base tabs");
      return baseTabs;
    }
    const role = profileData.personal.role;
    if (role === 'Patient') return [...baseTabs, 'medical', 'appointments'];
    if (['Doctor', 'Nurse'].includes(role)) return [...baseTabs, 'professional', 'certifications', 'appointments'];
    if (role === 'Administrator') return [...baseTabs, 'professional'];
    return baseTabs;
  };

  const tabs = getTabs();
  const currentRole = profileData?.personal?.role || 'User';
  const firstNameForHeader = profileData?.personal?.firstName || profileData?.personal?.username?.split(' ')[0] || '';
  const lastNameForHeader = profileData?.personal?.lastName || profileData?.personal?.username?.split(' ').slice(1).join(' ') || '';

  const handleAvatarUploadCallback = (event) => {
    const file = event.target.files[0];
    if (file) {
      const tempUrl = URL.createObjectURL(file);
      setAvatarUrlLocal(tempUrl);
      handleEdit('personal', 'profileImage', file);
      toast({
        title: "Profile picture uploading...",
        description: "Your new profile picture is being processed.",
      });
    }
  };

  const getFieldTooltipText = (field) => {
    const tooltips = {
      firstName: 'Your first name',
      lastName: 'Your last name',
      email: 'Email address for communication',
      phone: 'Phone number for contact',
      address: 'Physical address',
      dateOfBirth: 'Date of birth',
      allergies: 'List of known allergies',
      medicalConditions: 'Current medical conditions',
      specialty: 'Medical specialization',
      licenseNumber: 'Professional license number',
      notificationPreferences: 'Notification preferences',
      language: 'Preferred language for the interface',
      emergencyContactName: 'Emergency contact name',
      emergencyContactPhone: 'Emergency contact phone',
      certificationName: 'Certification name',
      certificationDate: 'Certification date',
      appointmentDate: 'Appointment date',
      appointmentDetails: 'Appointment details',
    };
    return tooltips[field] || `Edit ${field.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim()}`;
  };

  const renderFieldsForSection = (section) => {
    if (!profileData || !profileData[section]) {
      return <div className="col-span-1 md:col-span-2 text-center py-12 text-gray-500 dark:text-gray-400">No data available for this section.</div>;
    }
    const data = profileData[section];
    const skipFields = ['role', 'username', 'avatar', 'profileImage', 'id', '_id', 'userId', 'user', 'password'];

    const fields = Object.entries(data).filter(([key, value]) =>
      !skipFields.includes(key) &&
      (typeof value !== 'object' || value === null || (Array.isArray(value) && value.every(item => typeof item === 'string')))
    );

    if (fields.length === 0) {
      return <div className="col-span-1 md:col-span-2 text-center py-12 text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700/30 rounded-2xl">No editable information in this section.</div>;
    }

    const getFieldType = (fieldKey, fieldValue) => {
      if (fieldKey.toLowerCase().includes('allergies') || (Array.isArray(fieldValue) && fieldValue.every(item => typeof item === 'string'))) return 'array';
      if (fieldKey.toLowerCase().includes('date') || fieldKey === 'dateOfBirth') return 'date';
      if (fieldKey.toLowerCase().includes('notes') || fieldKey.toLowerCase().includes('description') || fieldKey === 'bio') return 'textarea';
      return 'text';
    };

    return fields.map(([fieldKey, fieldValue], index) => {
      const fieldType = getFieldType(fieldKey, fieldValue);
      const label = fieldKey.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();

      return (
        <motion.div
          key={`${section}-${fieldKey}`}
          className="w-full"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: index * 0.05 }}
        >
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <div>
                  <EditableField
                    label={label}
                    value={fieldValue === null || fieldValue === undefined ? '' : fieldValue}
                    field={fieldKey}
                    section={section}
                    isEditing={isEditing}
                    onChange={handleEdit}
                    type={fieldType}
                    className="w-full bg-white dark:bg-gray-700/50 border border-gray-300 dark:border-gray-600 rounded-lg p-3 text-sm focus-within:ring-2 focus-within:ring-blue-50 dark:focus-within:ring-blue-50 transition-all duration-300 shadow-sm hover:shadow-md dark:text-gray-100"
                  />
                </div>
              </TooltipTrigger>
              <TooltipContent side="top" className="bg-gray-800 text-white text-xs rounded p-2">
                {getFieldTooltipText(fieldKey)}
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </motion.div>
      );
    });
  };

  const getTabIcon = (tab) => {
    const icons = {
      personal: <User size={16} />,
      contact: <Mail size={16} />,
      emergencyContacts: <Contact size={16} />,
      settings: <Settings size={16} />,
      medical: <Activity size={16} />,
      professional: <Award size={16} />,
      certifications: <Award size={16} />,
      appointments: <Calendar size={16} />,
    };
    return icons[tab] || <User size={16} />;
  };

  const sectionTitle = activeTab.charAt(0).toUpperCase() + activeTab.slice(1).replace(/([A-Z])/g, ' $1');

  // Render Daily Advice Section
  const renderDailyAdvice = () => {
    console.log("Rendering Daily Advice - Role:", currentRole, "Tab:", activeTab);
    return (
      <motion.div
        className="mt-10 relative border-4 border-white-500" // Debug border
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <h2
          className="text-3xl font-bold mb-6"
          style={{ color: '#42A5FF' }}
        >
          Daily Advice
        </h2>
        <div className="relative bg-gradient-to-r from-blue-200 to-blue-100 dark:from-blue-800 dark:to-blue-700 rounded-2xl p-8 shadow-xl overflow-hidden">
          {/* Sparkling Background Effect */}
          <div className="absolute inset-0 sparkle-bg"></div>
          <div className="grid gap-6 md:grid-cols-3 relative z-10">
            {DAILY_ADVICE.map((advice, index) => (
              <motion.div
                key={advice.id}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.4, delay: index * 0.2 }}
              >
                <Card className="p-6 bg-white dark:bg-gray-900 rounded-xl shadow-lg hover:shadow-2xl transition-all transform hover:-translate-y-2">
                  <img
                    src={advice.image}
                    alt={advice.title}
                    className="w-full h-48 object-cover rounded-lg mb-4"
                    onError={(e) => {
                      console.log(`Image failed to load: ${advice.image}`);
                      e.target.style.display = 'none'; // Hide broken image
                      e.target.nextSibling.style.display = 'block'; // Show icon
                    }}
                    onLoad={(e) => {
                      e.target.style.display = 'block';
                      e.target.nextSibling.style.display = 'none';
                    }}
                  />
                  <div
                    className="hidden w-full h-48 flex items-center justify-center bg-gray-100 dark:bg-gray-800 rounded-lg mb-4"
                  >
                    {advice.icon}
                  </div>
                  <h3 className="text-xl font-semibold text-blue-900 dark:text-blue-100">
                    {advice.title}
                  </h3>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mt-2">
                    {advice.description}
                  </p>
                  <button
                    className="mt-4 w-full py-2 rounded-lg text-white font-medium transition-colors"
                    style={{ backgroundColor: '#42A5FF' }}
                  >
                    Learn More
                  </button>
                </Card>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.div>
    );
  };

  if (!profileData || !profileData.personal) {
    console.log("Profile data missing, showing loading state");
    return <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">Loading profile content...</div>;
  }

  return (
    <>
      {/* Embedded CSS */}
      <style>
        {`
          /* Sparkling Background Effect */
          .sparkle-bg {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            overflow: hidden;
            pointer-events: none;
          }

          .sparkle-bg::before,
          .sparkle-bg::after,
          .sparkle-bg .sparkle-1,
          .sparkle-bg .sparkle-2 {
            content: '';
            position: absolute;
            width: 10px;
            height: 10px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            animation: sparkle 3s infinite ease-in-out;
            opacity: 0;
          }

          .sparkle-bg::before {
            top: 15%;
            left: 20%;
            animation-delay: 0.3s;
          }

          .sparkle-bg::after {
            top: 50%;
            left: 60%;
            animation-delay: 1s;
          }

          .sparkle-bg .sparkle-1 {
            top: 70%;
            left: 30%;
            animation-delay: 1.5s;
          }

          .sparkle-bg .sparkle-2 {
            top: 30%;
            left: 80%;
            animation-delay: 2s;
          }

          @keyframes sparkle {
            0% {
              opacity: 0;
              transform: scale(0);
            }
            50% {
              opacity: 1;
              transform: scale(1.2);
            }
            100% {
              opacity: 0;
              transform: scale(0);
            }
          }

          /* Enhanced hover effects */
          .hover\\:shadow-2xl:hover {
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
          }

          .transform {
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
          }

          .hover\\:-translate-y-2:hover {
            transform: translateY(-8px);
          }

          /* Responsive adjustments */
          @media (max-width: 768px) {
            .md\\:grid-cols-3 {
              grid-template-columns: 1fr;
            }
          }
        `}
      </style>

      <div className={`min-h-screen transition-colors duration-300 ${isDarkThemeLocal ? 'bg-gray-900 text-gray-100' : 'bg-gray-50 text-gray-900'} pb-12`}>
        <ProfileHeader
          firstName={firstNameForHeader}
          lastName={lastNameForHeader}
          role={currentRole}
          avatarUrl={avatarUrlLocal}
          isDarkTheme={isDarkThemeLocal}
          notifications={notificationsLocal}
          isEditing={isEditing}
          setIsDarkTheme={setIsDarkThemeLocal}
          setNotifications={setNotificationsLocal}
          handleAvatarUpload={handleAvatarUploadCallback}
          onSettingsClick={() => setActiveTab('settings')}
        />

        <div className="max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 mt-8 md:mt-12 flex flex-col lg:flex-row gap-6 relative z-10">
          <motion.aside
            className="lg:w-80 w-full lg:sticky lg:top-24 lg:self-start bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg dark:shadow-gray-900/50"
            initial={{ opacity: 0, x: -30 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ type: 'spring', stiffness: 100, damping: 15, delay: 0.1 }}
          >
            <h2 className="text-xl font-semibold mb-1 text-gray-700 dark:text-gray-200">Navigation</h2>
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-4">Manage your profile sections.</p>
            <Separator className="mb-4 bg-gray-200 dark:bg-gray-700" />
            <TabNavigation
              tabs={tabs}
              activeTab={activeTab}
              onTabChange={setActiveTab}
              className="flex flex-col space-y-1"
              tabClassName={({ isActive }) =>
                `flex items-center gap-3 px-3 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 focus:ring-blue-500 ${
                  isActive
                    ? 'bg-blue-600 text-white shadow-md'
                    : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700/60'
                }`
              }
              tabIcon={getTabIcon}
            />
          </motion.aside>

          <motion.main
            className="flex-1 bg-white dark:bg-gray-800 rounded-xl shadow-lg dark:shadow-gray-900/50 p-6 md:p-8 min-h-[400px]"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ type: 'spring', stiffness: 100, damping: 15, delay: 0.2 }}
          >
            <div className="flex justify-between items-center mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-2xl md:text-3xl font-bold text-gray-700 dark:text-white">
                {sectionTitle}
              </h2>
              <motion.button
                className={`px-4 py-2 rounded-lg flex items-center gap-2 text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 ${
                  isEditing
                    ? 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500'
                    : 'bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 focus:ring-gray-400'
                }`}
                onClick={() => (isEditing ? handleSave() : setIsEditing(true))}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                {isEditing ? <><SaveIcon size={16} /><span>Save</span></> : <><PencilIcon size={16} /><span>Edit</span></>}
              </motion.button>
            </div>

            <AnimatePresence mode="wait">
              <motion.div
                key={activeTab}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
              >
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                  {renderFieldsForSection(activeTab)}
                </div>
              </motion.div>
            </AnimatePresence>

            {/* Render Daily Advice Section */}
            {renderDailyAdvice()}
          </motion.main>
        </div>
      </div>
    </>
  );
};

ProfileContent.propTypes = {
  profileData: PropTypes.object.isRequired,
  activeTab: PropTypes.string.isRequired,
  setActiveTab: PropTypes.func.isRequired,
  isEditing: PropTypes.bool.isRequired,
  setIsEditing: PropTypes.func.isRequired,
  handleEdit: PropTypes.func.isRequired,
  handleSave: PropTypes.func.isRequired,
};

export default ProfileContent;
</file>

<file path="src/components/ProfileHeader.jsx">
import React from 'react';
import PropTypes from 'prop-types';
import { motion } from 'framer-motion';
import { Bell, Moon, Sun, Upload, Settings } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';

const ProfileHeader = ({
  firstName,
  lastName,
  role,
  avatarUrl,
  isDarkTheme,
  notifications,
  isEditing,
  setIsDarkTheme,
  setNotifications,
  handleAvatarUpload,
  onSettingsClick,
}) => {
  const getInitials = () => {
    return `${firstName?.[0] || ''}${lastName?.[0] || ''}`.toUpperCase();
  };

  const avatarVariants = {
    initial: { scale: 1 },
    hover: { scale: 1.05, boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)' },
    tap: { scale: 0.95 }
  };

  const notificationCount = Number(notifications) || 0;

  return (
    <motion.div
      className="w-full rounded-b-2xl md:rounded-b-3xl overflow-hidden bg-blue-900 shadow-xl" // Changement ici
      initial={{ y: -20, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      {/* La partie supérieure de la bannière */}
      <div className="w-full h-24 md:h-32 bg-blue-900 relative">
        {/* Si vous voulez une image de fond, décommentez et ajustez */}
        {/* <img src="/path-to-your-banner-image.jpg" alt="Profile Banner" className="absolute inset-0 w-full h-full object-cover opacity-20" /> */}
        {/* <div className="absolute inset-0 bg-black/10"></div> */}
      </div>

      {/* Conteneur principal pour l'avatar, le nom, le rôle et les icônes d'action */}
      <div className="relative w-full max-w-5xl bg-blue-900 mx-auto px-4 sm:px-6 lg:px-8 -mt-16 md:-mt-20 pb-6 md:pb-8">
        <div className="flex flex-col md:flex-row justify-between items-center md:items-end gap-4">
          {/* Partie gauche : Avatar et Nom/Rôle */}
          <div className="flex flex-col md:flex-row items-center md:items-end gap-4">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <motion.div
                    className="relative"
                    variants={avatarVariants}
                    initial="initial"
                    whileHover="hover"
                    whileTap="tap"
                  >
                    <Avatar className="h-28 w-28 md:h-32 md:w-32 border-4 bg-blue-900 dark:border-gray-800 shadow-xl">
                      <AvatarImage src={avatarUrl} alt={`${firstName} ${lastName}`} className="object-cover" />
                      <AvatarFallback className="bg-primary/80 text-white text-2xl md:text-3xl">
                        {getInitials()}
                      </AvatarFallback>
                    </Avatar>
                    {isEditing && (
                      <label className="absolute bottom-1 right-1 bg-white dark:bg-gray-700 rounded-full p-1.5 cursor-pointer shadow-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600">
                        <Upload size={16} className="text-primary dark:text-gray-300" />
                        <input
                          type="file"
                          accept="image/*"
                          className="hidden"
                          onChange={handleAvatarUpload}
                        />
                      </label>
                    )}
                  </motion.div>
                </TooltipTrigger>
                <TooltipContent>{isEditing ? 'Changer la photo' : 'Photo de profil'}</TooltipContent>
              </Tooltip>
            </TooltipProvider>

            <div className="text-center md:text-left md:mb-1">
              <h1 className="text-2xl md:text-3xl font-bold text-white drop-shadow-sm">
                {firstName} {lastName}
              </h1>
              <div className="flex items-center justify-center md:justify-start mt-1">
                <Badge variant="outline" className="bg-white/25 backdrop-blur-sm text-white border-white/40 px-3 py-1 text-xs md:text-sm">
                  {role}
                </Badge>
              </div>
            </div>
          </div>

          {/* Partie droite : Icônes d'action */}
          <div className="flex items-center space-x-2 mt-4 md:mt-0 md:mb-1">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={cn(
                      "relative text-white/80 hover:text-white hover:bg-white/20 rounded-full w-9 h-9",
                      notificationCount > 0 && "animate-pulse"
                    )}
                    onClick={() => setNotifications(0)}
                    aria-label="Notifications"
                  >
                    <Bell className="h-5 w-5" />
                    {notificationCount > 0 && (
                      <span className="absolute top-1.5 right-1.5 h-2 w-2 bg-red-500 rounded-full border border-white/50"></span>
                    )}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>{notificationCount > 0 ? `${notificationCount} notification(s)` : 'Aucune notification'}</TooltipContent>
              </Tooltip>
            </TooltipProvider>

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="text-white/80 hover:text-white hover:bg-white/20 rounded-full w-9 h-9"
                    onClick={() => setIsDarkTheme(!isDarkTheme)}
                    aria-label="Changer de thème"
                  >
                    {isDarkTheme ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>{isDarkTheme ? 'Thème clair' : 'Thème sombre'}</TooltipContent>
              </Tooltip>
            </TooltipProvider>

            {onSettingsClick && (
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="text-white/80 hover:text-white hover:bg-white/20 rounded-full w-9 h-9"
                      onClick={onSettingsClick}
                      aria-label="Paramètres"
                    >
                      <Settings className="h-5 w-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>Paramètres</TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

ProfileHeader.propTypes = {
  firstName: PropTypes.string.isRequired,
  lastName: PropTypes.string.isRequired,
  role: PropTypes.string.isRequired,
  avatarUrl: PropTypes.string,
  isDarkTheme: PropTypes.bool.isRequired,
  notifications: PropTypes.number.isRequired,
  isEditing: PropTypes.bool.isRequired,
  setIsDarkTheme: PropTypes.func.isRequired,
  setNotifications: PropTypes.func.isRequired,
  handleAvatarUpload: PropTypes.func.isRequired,
  onSettingsClick: PropTypes.func,
};

ProfileHeader.defaultProps = {
  avatarUrl: null,
  notifications: 0,
};

export default ProfileHeader;
</file>

<file path="src/components/ProtectedRoute.jsx">
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children, allowedRoles }) => {
  const user = JSON.parse(sessionStorage.getItem("user"));

  // Si l'utilisateur n'est pas connecté
  if (!user) {
    return <Navigate to="/login" />;
  }

  // Si le rôle de l'utilisateur n'est pas autorisé
  if (!allowedRoles.includes(user.role)) {
    return <Navigate to="/home" />;
  }

  // L'utilisateur a le rôle autorisé, afficher les enfants
  return children;
};

export default ProtectedRoute;
</file>

<file path="src/components/register.jsx">
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import "../App.css";

const Register = () => {
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    phoneNumber: "",
    role: "Patient",
    name: "",
    dateOfBirth: "",
    gender: "",
    address: "",
    emergencyContact: "",
    bloodType: "",
    allergies: "",
    badgeNumber: "",
    specialization: "",
    licenseNumber: "",
    shift: "",
    profileImage: null,
  });
  
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const images = [
    {
      url: "/images/logo0.png",
      title: "Welcome to Our Platform",
      description: "Your journey to amazing experiences starts here.",
    },
    {
      url: "/images/imageurg.jpg",
      title: "Discover New Possibilities",
      description: "Unlock your potential with our innovative solutions.",
    },
    {
      url: "/images/25291-removebg-preview.png",
      title: "Connect With Others",
      description: "Take your real time of waiting.",
    },
  ];
  
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [otpSent, setOtpSent] = useState(false);
  const [otp, setOtp] = useState("");
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFileChange = (e) => {
    setFormData({ ...formData, profileImage: e.target.files[0] });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    // Vérifier si les mots de passe correspondent
    if (formData.password !== formData.confirmPassword) {
      setMessage("Les mots de passe ne correspondent pas");
      setIsLoading(false);
      return;
    }
    
    try {
      const formDataToSend = new FormData();
      for (const key in formData) {
        if (formData[key] !== null) {
          formDataToSend.append(key, formData[key]);
        }
      }

      // Envoyer les données d'inscription au backend
      const response = await axios.post(
        "http://localhost:8089/api/auth/register",
        formDataToSend,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
          withCredentials: true,
        }
      );

      setMessage("Inscription réussie ! Veuillez vérifier votre email pour l'OTP.");
      setOtpSent(true);
    } catch (error) {
      console.error("Erreur lors de l'inscription:", error);
      setMessage(
        error.response?.data?.message || "Erreur lors de l'inscription"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleVerifyOtp = async () => {
    try {
      await axios.post(
        "http://localhost:8089/api/auth/verify-otp",
        {
          email: formData.email,
          otp,
        },
        {
          withCredentials: true,
        }
      );

      setMessage("OTP vérifié avec succès. Vous pouvez maintenant vous connecter.");
      navigate("/login");
    } catch (error) {
      setMessage(
        error.response?.data?.message || "Erreur lors de la vérification de l'OTP"
      );
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 3000);
    return () => clearInterval(interval);
  }, [images.length]);

  return (
    <div className="d-flex vh-100">
      {/* Left Side - Logo and Carousel */}
      <div className="d-none d-md-flex col-md-6 position-relative overflow-hidden bg-light">
        {/* Carousel Images */}
        {images.map((image, index) => (
          <div
            key={index}
            className={`position-absolute w-100 h-100 transition-opacity ${
              index === currentImageIndex ? "opacity-100" : "opacity-0"
            }`}
            style={{ transition: "opacity 1s ease-in-out" }}
          >
            <img
              src={image.url || "/placeholder.svg"}
              alt={image.title}
              className="w-100 h-100 object-fit-cover"
              style={{ objectPosition: "center" }}
            />
            <div className="position-absolute bottom-0 p-4 text-white bg-dark bg-opacity-50 w-100">
              <h3 className="mb-1 fs-4">{image.title}</h3>
              <p className="mb-0 fs-6">{image.description}</p>
            </div>
          </div>
        ))}

        {/* Indicators */}
        <div className="position-absolute bottom-4 start-50 translate-middle-x d-flex gap-2 mb-4">
          {images.map((_, index) => (
            <button
              key={index}
              className={`rounded-circle ${
                index === currentImageIndex ? "bg-primary" : "bg-white opacity-75"
              }`}
              style={{ 
                width: "12px", 
                height: "12px", 
                border: "none", 
                cursor: "pointer" 
              }}
              onClick={() => setCurrentImageIndex(index)}
              aria-label={`Slide ${index + 1}`}
            ></button>
          ))}
        </div>
      </div>

      {/* Right Side */}
      <div className="col-md-6 d-flex flex-column justify-content-center p-5 bg-white shadow">
        <h2 className="mb-3">Sign Up</h2>
        <p className="text-muted">
          Create your account by filling out the information below.
        </p>

        {!otpSent ? (
          <form onSubmit={handleSubmit}>
            <div className="row">
              <div className="col-md-6">
                <input
                  type="text"
                  name="username"
                  placeholder="Nom d'utilisateur"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="email"
                  name="email"
                  placeholder="Email"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="password"
                  name="password"
                  placeholder="Mot de passe"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="password"
                  name="confirmPassword"
                  placeholder="Confirmer mot de passe"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="text"
                  name="phoneNumber"
                  placeholder="Téléphone"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <select
                  name="role"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                >
                  <option value="Patient">Patient</option>
                  <option value="Doctor">Médecin</option>
                  <option value="Nurse">Infirmier</option>
                  <option value="Administrator">Administrateur</option>
                </select>
              </div>
              <div className="col-md-6">
                {formData.role === "Patient" && (
                  <>
                    <input
                      type="text"
                      name="name"
                      placeholder="Nom complet"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="date"
                      name="dateOfBirth"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="gender"
                      placeholder="Genre"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="address"
                      placeholder="Adresse"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="emergencyContact"
                      placeholder="Contact d'urgence"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="bloodType"
                      placeholder="Groupe sanguin"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="allergies"
                      placeholder="Allergies (optionnel)"
                      className="form-control mb-2"
                      onChange={handleChange}
                    />
                  </>
                )}
                {formData.role === "Doctor" && (
                  <>
                    <input
                      type="text"
                      name="badgeNumber"
                      placeholder="Numéro de badge"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="specialization"
                      placeholder="Spécialisation"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="licenseNumber"
                      placeholder="Numéro de licence"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                  </>
                )}
                {formData.role === "Nurse" && (
                  <>
                    <input
                      type="text"
                      name="badgeNumber"
                      placeholder="Numéro de badge"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="shift"
                      placeholder="Horaire de travail"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="licenseNumber"
                      placeholder="Numéro de licence"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                  </>
                )}
                {formData.role === "Administrator" && (
                  <>
                    <input
                      type="text"
                      name="badgeNumber"
                      placeholder="Numéro de badge"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                  </>
                )}
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="profileImage">Image de profil</label>
              <input
                type="file"
                name="profileImage"
                id="profileImage"
                className="form-control mb-2"
                onChange={handleFileChange}
              />
            </div>

            <button
              type="submit"
              className="btn btn-primary w-100 mt-3"
              style={{
                backgroundColor: "#6DDCCF",
                borderColor: "#6DDCCF",
                color: "white",
              }}
              disabled={isLoading}
            >
              {isLoading ? "Inscription..." : "S'inscrire"}
            </button>

            <div className="mt-3 text-center">
              <span>Déjà un compte ? </span>
              <Link to="/login" className="text-decoration-none">
                Se connecter
              </Link>
            </div>
          </form>
        ) : (
          <div>
            <input
              type="text"
              placeholder="Entrez l'OTP"
              className="form-control mb-2"
              value={otp}
              onChange={(e) => setOtp(e.target.value)}
            />
            <button
              className="btn btn-primary w-100"
              style={{
                backgroundColor: "#6DDCCF",
                borderColor: "#6DDCCF",
                color: "white",
              }}
              onClick={handleVerifyOtp}
            >
              Vérifier l'OTP
            </button>
          </div>
        )}

        {message && (
          <div
            className={`alert ${
              message.includes("réussie") ? "alert-success" : "alert-danger"
            } mt-3`}
          >
            {message}
          </div>
        )}
      </div>
    </div>
  );
};

export default Register;
</file>

<file path="src/components/ResetPassword.jsx">
import React, { useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";

const ResetPassword = () => {
    const [newPassword, setNewPassword] = useState(""); // Changed from "password" to "newPassword"
    const [message, setMessage] = useState("");
    const [error, setError] = useState("");
    const navigate = useNavigate();
    const { token } = useParams(); // Capture the token from URL

    const handleSubmit = async (e) => {
        e.preventDefault();
        setMessage("");
        setError("");

        if (!newPassword) {
            setError("❌ New Password is required!");
            return;
        }

        try {
            const res = await axios.post(
                `http://localhost:8089/api/auth/reset-password/${token}`,
                { newPassword }, // Using the correct payload
                { withCredentials: true }
            );

            if (res.data.success) {
                setMessage("✅ Password successfully updated! Redirecting to login...");
                setTimeout(() => navigate("/login"), 3000);
            } else {
                setError("❌ Something went wrong. Please try again.");
            }
        } catch (err) {
            setError(err.response?.data?.message || "❌ Error resetting password.");
        }
    };

    return (
        <div className="d-flex justify-content-center align-items-center bg-secondary vh-100">
            <div className="bg-white p-4 rounded w-25 shadow">
                <h4 className="text-center">Reset Password</h4>
                {error && <p className="text-danger text-center">{error}</p>}
                {message && <p className="text-success text-center">{message}</p>}
                <form onSubmit={handleSubmit}>
                    <div className="mb-3">
                        <label htmlFor="newPassword">
                            <strong>New Password</strong>
                        </label>
                        <input
                            type="password"
                            placeholder="Enter new password"
                            autoComplete="off"
                            name="newPassword"
                            className="form-control rounded-0"
                            value={newPassword}
                            onChange={(e) => setNewPassword(e.target.value)}
                            required
                        />
                    </div>
                    <button type="submit" className="btn btn-success w-100 rounded-0" disabled={!newPassword}>
                        Update Password
                    </button>
                </form>
            </div>
        </div>
    );
};

export default ResetPassword;
</file>

<file path="src/components/staff/ResourceManagement.jsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Bed, Building2, Stethoscope, MonitorSmartphone, Plus, Pencil, Trash2 } from "lucide-react";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

const ResourceManagement = ({ resources, searchQuery, onSearchChange }) => {
  const { toast } = useToast();
  const [selectedResource, setSelectedResource] = useState(null);
  const [isEditing, setIsEditing] = useState(false);

  const getResourceIcon = (type) => {
    switch (type) {
      case "bed":
        return Bed;
      case "room":
        return Building2;
      case "machine":
        return MonitorSmartphone;
      case "equipment":
        return Stethoscope;
      default:
        return Stethoscope;
    }
  };

  const handleDelete = (resourceId) => {
    // In a real app, this would make an API call
    toast({
      title: "Resource Deleted",
      description: "The resource has been successfully deleted.",
    });
  };

  const handleAddOrUpdate = (isNew) => {
    // In a real app, this would make an API call
    toast({
      title: isNew ? "Resource Added" : "Resource Updated",
      description: `The resource has been successfully ${isNew ? 'added' : 'updated'}.`,
    });
    setSelectedResource(null);
    setIsEditing(false);
  };

  return (
    <Card className="glass-card col-span-2">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl">Hospital Resources</CardTitle>
          <Sheet>
            <SheetTrigger asChild>
              <Button size="sm" className="gap-2">
                <Plus className="h-4 w-4" />
                Add Resource
              </Button>
            </SheetTrigger>
            <SheetContent>
              <SheetHeader>
                <SheetTitle>
                  {isEditing ? "Edit Resource" : "Add New Resource"}
                </SheetTitle>
              </SheetHeader>
              <div className="space-y-4 mt-6">
                <Input placeholder="Resource Name" defaultValue={selectedResource?.name} />
                <Input
                  type="number"
                  placeholder="Total Quantity"
                  defaultValue={selectedResource?.total}
                />
                <Input
                  type="number"
                  placeholder="Available Quantity"
                  defaultValue={selectedResource?.available}
                />
                <select
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2"
                  defaultValue={selectedResource?.type}
                >
                  <option value="equipment">Equipment</option>
                  <option value="bed">Bed</option>
                  <option value="room">Room</option>
                  <option value="machine">Machine</option>
                </select>
                <Input placeholder="Location" defaultValue={selectedResource?.location} />
                <select
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2"
                  defaultValue={selectedResource?.status}
                >
                  <option value="operational">Operational</option>
                  <option value="maintenance">Maintenance</option>
                  <option value="offline">Offline</option>
                </select>
                <Button
                  className="w-full"
                  onClick={() => handleAddOrUpdate(!isEditing)}
                >
                  {isEditing ? "Update Resource" : "Add Resource"}
                </Button>
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <div className="flex items-center justify-between mt-2">
          <div className="text-sm text-muted-foreground">
            Track and manage hospital resources
          </div>
          <div className="relative">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search resources..."
              value={searchQuery}
              onChange={(e) => onSearchChange(e.target.value)}
              className="pl-8 w-[300px]"
            />
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid gap-4 md:grid-cols-2">
          {resources.map((resource) => {
            const Icon = getResourceIcon(resource.type);
            const availabilityPercentage = (resource.available / resource.total) * 100;
            const availabilityColor =
              availabilityPercentage > 50 ? "bg-green-500" :
              availabilityPercentage > 20 ? "bg-yellow-500" : "bg-red-500";

            return (
              <div
                key={resource.id}
                className="p-4 border rounded-lg bg-white/50 hover-scale"
              >
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <Icon className="h-5 w-5 text-primary" />
                    <h3 className="font-semibold">{resource.name}</h3>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        setSelectedResource(resource);
                        setIsEditing(true);
                      }}
                    >
                      <Pencil className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDelete(resource.id)}
                    >
                      <Trash2 className="h-4 w-4 text-destructive" />
                    </Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Available:</span>
                    <span className="font-medium">{resource.available} / {resource.total}</span>
                  </div>
                  <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div
                      className={`h-full ${availabilityColor} transition-all duration-500`}
                      style={{ width: `${availabilityPercentage}%` }}
                    />
                  </div>
                  {resource.location && (
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">Location:</span>
                      <span>{resource.location}</span>
                    </div>
                  )}
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Status:</span>
                    <span className="capitalize">{resource.status}</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};

export default ResourceManagement;
</file>

<file path="src/components/staff/StaffDirectory.jsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, UserCircle, BadgeCheck, Mail, Phone } from "lucide-react";

const StaffDirectory = ({ staffMembers, searchQuery, onSearchChange }) => {
  const getStatusColor = (status) => {
    switch (status) {
      case "Active":
        return "text-green-500";
      case "Off Duty":
        return "text-yellow-500";
      case "On Leave":
        return "text-red-500";
      default:
        return "text-gray-500";
    }
  };

  return (
    <Card className="glass-card col-span-2">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle>Staff Directory</CardTitle>
          <div className="relative">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search staff..."
              value={searchQuery}
              onChange={(e) => onSearchChange(e.target.value)}
              className="pl-8 w-[300px]"
            />
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {staffMembers.map((staff) => (
            <div
              key={staff.id}
              className="flex items-center justify-between p-4 border rounded-lg bg-white/50 hover-scale"
            >
              <div className="flex items-center gap-4">
                <UserCircle className="h-10 w-10 text-primary" />
                <div>
                  <div className="flex items-center gap-2">
                    <h3 className="font-semibold">{staff.name}</h3>
                    <BadgeCheck className="h-4 w-4 text-blue-500" />
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {staff.role} - {staff.department}
                  </p>
                  <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
                    <span className="flex items-center gap-1">
                      <Mail className="h-3 w-3" />
                      {staff.contact.email}
                    </span>
                    <span className="flex items-center gap-1">
                      <Phone className="h-3 w-3" />
                      {staff.contact.phone}
                    </span>
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <span className={`font-medium ${getStatusColor(staff.status)}`}>
                  {staff.status}
                </span>
                <Button size="sm">View Profile</Button>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default StaffDirectory;
</file>

<file path="src/components/staff/StaffOverview.jsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

const StaffOverview = () => {
  return (
    <div className="grid gap-6 md:grid-cols-3">
      <Card className="glass-card hover-scale">
        <CardHeader>
          <CardTitle>Staff Overview</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div>Total Staff: 24</div>
            <div>Doctors: 8</div>
            <div>Nurses: 12</div>
            <div>Admin: 4</div>
          </div>
        </CardContent>
      </Card>

      <Card className="glass-card hover-scale">
        <CardHeader>
          <CardTitle>Departments</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div>Emergency: 6 staff</div>
            <div>ICU: 8 staff</div>
            <div>General: 5 staff</div>
            <div>Surgery: 5 staff</div>
          </div>
        </CardContent>
      </Card>

      <Card className="glass-card hover-scale">
        <CardHeader>
          <CardTitle>Current Shift</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div>On Duty: 12</div>
            <div>Off Duty: 8</div>
            <div>On Leave: 4</div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default StaffOverview;
</file>

<file path="src/components/TabNavigation.jsx">
import React from 'react';
import PropTypes from 'prop-types'; // Importez PropTypes
import { motion } from 'framer-motion';

// L'interface TabNavigationProps est supprimée.

const TabNavigation = ({
  tabs,
  activeTab,
  onTabChange,
  className = '', // La valeur par défaut est conservée, c'est du JS valide
  tabClassName,
  tabIcon,
}) => {
  const getTabDisplayName = (tab) => { // Type 'string' supprimé du paramètre
    return tab
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, (str) => str.toUpperCase())
      .trim();
  };

  return (
    <nav className={className}>
      {tabs.map((tab) => {
        const isActive = activeTab === tab;
        const displayName = getTabDisplayName(tab);

        // Calcule la classe du bouton. Si tabClassName n'est pas fourni,
        // on pourrait avoir un style par défaut ou laisser vide si géré par le parent.
        // Ici, j'utilise le fallback 'default-tab' que vous aviez.
        const currentTabClassName = tabClassName
          ? tabClassName({ isActive })
          : 'default-tab-style'; // Assurez-vous que 'default-tab-style' est défini dans votre CSS ou ajustez

        return (
          <button
            key={tab}
            // className={`relative ${tabClassName ? tabClassName({ isActive }) : 'default-tab'}`}
            className={`relative ${currentTabClassName}`} // Utilisation de la variable calculée
            onClick={() => onTabChange(tab)}
          >
            {isActive && (
              <motion.div
                // className="tab-indicator" // Vous aurez besoin de définir cette classe ou de la styler en ligne
                className="absolute inset-0 bg-primary/20 rounded-md z-0" // Exemple de style pour l'indicateur
                layoutId="tab-indicator" // Important pour l'animation partagée de Framer Motion
                transition={{ type: 'spring', stiffness: 400, damping: 30 }}
              />
            )}
            {/* Contenu du bouton au-dessus de l'indicateur */}
            <div className="flex items-center gap-3 z-10 relative p-2"> {/* Ajout de padding pour la visibilité */}
              {tabIcon && tabIcon(tab)}
              <span className={`${isActive ? 'font-semibold text-primary' : 'font-normal text-foreground'}`}> {/* Styles pour le texte actif/inactif */}
                {displayName}
              </span>
            </div>
          </button>
        );
      })}
    </nav>
  );
};

// Définition des PropTypes
TabNavigation.propTypes = {
  tabs: PropTypes.arrayOf(PropTypes.string).isRequired,
  activeTab: PropTypes.string.isRequired,
  onTabChange: PropTypes.func.isRequired,
  className: PropTypes.string,
  tabClassName: PropTypes.func, // Attend une fonction qui retourne une chaîne de classes
  tabIcon: PropTypes.func,     // Attend une fonction qui retourne un nœud React (par exemple, un icône)
};

// Valeurs par défaut pour les props optionnelles (si non gérées dans la déstructuration)
// Dans ce cas, className a déjà une valeur par défaut dans la déstructuration.
// TabNavigation.defaultProps = {
//   className: '',
//   tabClassName: null, // ou une fonction par défaut si nécessaire
//   tabIcon: null,      // ou une fonction par défaut si nécessaire
// };

export default TabNavigation;
</file>

<file path="src/components/theme-provider.jsx">
// src/components/theme-provider.jsx
"use client";

import { createContext, useContext, useEffect, useState } from "react";

const ThemeContext = createContext({ theme: "light", setTheme: () => null });

export function ThemeProvider({ children, defaultTheme = "light", storageKey = "theme" }) {
  const [theme, setTheme] = useState(defaultTheme);

  useEffect(() => {
    const savedTheme = localStorage.getItem(storageKey);

    if (savedTheme) {
      setTheme(savedTheme);
    } else {
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      setTheme(prefersDark ? "dark" : "light");
    }
  }, [storageKey]);

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove("light", "dark");
    root.classList.add(theme);
    localStorage.setItem(storageKey, theme);
    console.log(`Theme changed to: ${theme}`); // Debugging
  }, [theme, storageKey]);

  const value = {
    theme,
    setTheme: (newTheme) => {
      setTheme(newTheme);
    },
    toggleTheme: () => {
      setTheme((prevTheme) => (prevTheme === "light" ? "dark" : "light"));
    },
  };

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;
}

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};
</file>

<file path="src/components/ui/accordion.jsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.jsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.jsx">
import * as React from "react"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.jsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.jsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.jsx">
import * as React from "react"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({ className, variant, ...props }) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/breadcrumb.jsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef(({ ...props }, ref) => (
  <nav ref={ref} aria-label="breadcrumb" {...props} />
))
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.jsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(function Button(props, ref) {
  const { className, variant, size, asChild = false, ...rest } = props; // Utilisez 'props' comme premier argument et déstructurez-le ici
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...rest} // Passez les props restantes, pas 'props' directement
    />
  )
})
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.jsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.jsx">
import * as React from "react"
import useEmblaCarousel from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

const CarouselContext = React.createContext(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.jsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" }

const ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartContext = React.createContext(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}


const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
                .map(([key, itemConfig]) => {
                  const color =
                    itemConfig.theme?.[theme] ||
                    itemConfig.color
                  return color ? `  --color-${key}: ${color};` : null
                })
                .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            }
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltipContent"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config,
  payload,
  key
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
      typeof payload.payload === "object" &&
      payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey = key

  if (
    key in payload &&
    typeof payload[key] === "string"
  ) {
    configLabelKey = payload[key]
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key] === "string"
  ) {
    configLabelKey = payloadPayload[
      key
    ]
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.jsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.jsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.jsx">
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.jsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/dialog.jsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.jsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.jsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.jsx">
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, FormProvider, useFormContext } from "react-hook-form";  // Importation correcte de react-hook-form
import { forwardRef, useContext } from "react";  // Importation correcte de useContext depuis React
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

// Fournir le contexte du formulaire
const Form = FormProvider;

// Créer un contexte pour le champ du formulaire
const FormFieldContext = React.createContext({});

// Le composant FormField avec un Provider pour le contexte
const FormField = (props) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

// Hook personnalisé pour utiliser le champ du formulaire
const useFormField = () => {
  const fieldContext = useContext(FormFieldContext);  // Utilisation de useContext depuis React
  const itemContext = useContext(FormItemContext);    // Utilisation de useContext depuis React
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

// Créer un contexte pour l'élément du formulaire
const FormItemContext = React.createContext({});

// Le composant FormItem avec un Provider pour l'ID unique
const FormItem = forwardRef(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

// Le composant FormLabel pour afficher l'étiquette du formulaire
const FormLabel = forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

// Le composant FormControl pour contrôler l'état du formulaire
const FormControl = forwardRef((props, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

// Le composant FormDescription pour afficher la description du formulaire
const FormDescription = forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

// Le composant FormMessage pour afficher les messages d'erreur du formulaire
const FormMessage = forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

// Exporter tous les composants et hooks nécessaires
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/hover-card.jsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.jsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
}
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.jsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.jsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/navigation-menu.jsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.jsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.jsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.jsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.jsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.jsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.jsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
      "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
      "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.jsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
        "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.jsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.jsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/sidebar.jsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

const SidebarContext = React.createContext(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              }
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              }
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          }
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.jsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.jsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/sonner.jsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({ ...props }) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="src/components/ui/switch.jsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.jsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
}
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.jsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName


export {
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.jsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.jsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext(
  {
    size: "default",
    variant: "default",
  }
)

const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.jsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.jsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.js">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/context/NotificationContext.jsx">
// src/context/NotificationContext.jsx
import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie'; // Pour récupérer le token si nécessaire, ou dépendre de withCredentials

const NotificationContext = createContext(null);

export const useNotifications = () => useContext(NotificationContext);

export const NotificationProvider = ({ children }) => {
    const [notifications, setNotifications] = useState([]); // Historique des notifications
    const [unreadCount, setUnreadCount] = useState(0);
    const [isLoading, setIsLoading] = useState(false); // Pour l'état de chargement

    const fetchNotifications = useCallback(async () => {
        setIsLoading(true);
        try {
            const token = Cookies.get('token'); // Ou utiliser une autre méthode d'auth
            const response = await axios.get('http://localhost:8089/api/notifications', {
                withCredentials: true, // Important si vous utilisez les cookies pour l'auth
                // headers: { Authorization: `Bearer ${token}` } // Si vous utilisez un header Bearer
            });
            setNotifications(response.data.notifications);
            setUnreadCount(response.data.unreadCount);
        } catch (error) {
            console.error("Failed to fetch notifications history:", error);
            // Gérer l'erreur, peut-être avec un toast
        } finally {
            setIsLoading(false);
        }
    }, []);

    // Charger les notifications initiales
    useEffect(() => {
        const token = Cookies.get('token'); // Ou session User
        if (token) { // Charger seulement si l'utilisateur est connecté
             fetchNotifications();
        }
    }, [fetchNotifications]);


    // Fonction pour ajouter une nouvelle notification (toast + mise à jour de la liste)
    // Cette fonction est appelée par le listener Socket.IO
    const addRealtimeNotification = useCallback((notificationData) => {
        // Pour le toast/sonner
        // (vous avez déjà cette logique, peut-être la garder séparée ou l'intégrer ici)

        // Pour l'historique (soit on ajoute directement, soit on re-fetch)
        // Option 1: Ajouter directement (plus réactif, mais peut désynchroniser si l'enregistrement DB échoue)
        // setNotifications(prev => [notificationData, ...prev.slice(0, 49)]);
        // setUnreadCount(prev => prev + 1);

        // Option 2: Re-fetch (plus sûr, mais léger délai)
        fetchNotifications(); // Recharge tout l'historique et le compteur

    }, [fetchNotifications]);

    const markOneAsRead = useCallback(async (notificationId) => {
        try {
            await axios.patch(`http://localhost:8089/api/notifications/${notificationId}/read`, {}, { withCredentials: true });
            setNotifications(prev =>
                prev.map(n => n._id === notificationId ? { ...n, isRead: true } : n)
            );
            setUnreadCount(prev => Math.max(0, prev - 1)); // Décrémenter le compteur
        } catch (error) {
            console.error("Failed to mark notification as read:", error);
        }
    }, []);

    const markAllAsReadContext = useCallback(async () => { // Renommé pour éviter conflit avec la prop
        try {
            await axios.patch('http://localhost:8089/api/notifications/read-all', {}, { withCredentials: true });
            setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));
            setUnreadCount(0);
        } catch (error) {
            console.error("Failed to mark all notifications as read:", error);
        }
    }, []);

    const clearAllNotificationsContext = useCallback(async () => {
         // Optionnel : si vous implémentez la suppression côté backend
        try {
            // Exemple: await axios.delete('http://localhost:8089/api/notifications/all', { withCredentials: true });
            setNotifications([]);
            setUnreadCount(0);
            console.warn("ClearAllNotifications est simulé côté client. Implémentez la suppression backend si nécessaire.")
        } catch (error) {
             console.error("Failed to clear all notifications:", error);
        }
    }, []);


    return (
        <NotificationContext.Provider value={{
            notifications,
            unreadCount,
            isLoading,
            fetchNotifications, // Exposer pour re-fetch manuel si besoin
            addRealtimeNotification, // Renommer l'ancienne `addNotification` si elle faisait autre chose
            markOneAsRead,
            markAllAsRead: markAllAsReadContext,
            clearAllNotifications: clearAllNotificationsContext,
        }}>
            {children}
        </NotificationContext.Provider>
    );
};
</file>

<file path="src/context/SocketContext.jsx">
// src/context/SocketContext.jsx
import React, { createContext, useContext, useEffect, useState, useRef } from 'react';
import io from 'socket.io-client';
import Cookies from 'js-cookie';

const SocketContext = createContext(null);

export const useSocket = () => useContext(SocketContext);

export const SocketProvider = ({ children }) => {
    const [socket, setSocket] = useState(null);
    const [isConnected, setIsConnected] = useState(false);
    const socketRef = useRef(null); // Use ref to prevent re-renders causing disconnect/reconnect

    useEffect(() => {
        const token = Cookies.get('token'); // Get token from cookies

        // Only connect if token exists (user is logged in) and socket isn't already set up
        if (token && !socketRef.current) {
            console.log("Attempting to connect socket...");
            // Pass token in auth for middleware verification
            const newSocket = io('http://localhost:8089', { // Your backend URL
                withCredentials: true, // Important for cookies if needed by backend's CORS
                auth: { token } // Send token for authentication
            });

            socketRef.current = newSocket; // Store in ref
            setSocket(newSocket); // Store in state for context consumers

            newSocket.on('connect', () => {
                console.log('Socket connected:', newSocket.id);
                setIsConnected(true);
                // Optional: Emit an 'authenticate' event if needed after connection
                // newSocket.emit('authenticate', token);
            });

            newSocket.on('disconnect', (reason) => {
                console.log('Socket disconnected:', reason);
                setIsConnected(false);
                // Handle potential cleanup or reconnection logic here if needed
                socketRef.current = null; // Clear ref on disconnect
                setSocket(null);
            });

            newSocket.on('connect_error', (err) => {
                console.error('Socket connection error:', err.message, err.data);
                setIsConnected(false);
                socketRef.current = null; // Clear ref on error
                setSocket(null);
            });

            // Clean up on component unmount
            return () => {
                console.log("Disconnecting socket...");
                newSocket.disconnect();
                socketRef.current = null;
                setSocket(null);
            };
        } else if (!token && socketRef.current) {
            // If token removed (logout), disconnect
            console.log("No token found, disconnecting socket...");
            socketRef.current.disconnect();
            socketRef.current = null;
            setSocket(null);
            setIsConnected(false);
        }

    }, []); // Run only once on mount

    return (
        <SocketContext.Provider value={{ socket, isConnected }}>
            {children}
        </SocketContext.Provider>
    );
};
</file>

<file path="src/hooks/use-mobile.jsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
    const [isMobile, setIsMobile] = React.useState(undefined)

    React.useEffect(() => {
        const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
        const onChange = () => {
            setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
        }
        mql.addEventListener("change", onChange)
        setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
        return () => mql.removeEventListener("change", onChange)
    }, [])

    return !!isMobile
}
</file>

<file path="src/hooks/use-toast.js">
import * as React from "react"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

const actionTypes = {
    ADD_TOAST: "ADD_TOAST",
    UPDATE_TOAST: "UPDATE_TOAST",
    DISMISS_TOAST: "DISMISS_TOAST",
    REMOVE_TOAST: "REMOVE_TOAST",
}

let count = 0

function genId() {
    count = (count + 1) % Number.MAX_SAFE_INTEGER
    return count.toString()
}

const toastTimeouts = new Map()

const addToRemoveQueue = (toastId) => {
    if (toastTimeouts.has(toastId)) {
        return
    }

    const timeout = setTimeout(() => {
        toastTimeouts.delete(toastId)
        dispatch({
            type: "REMOVE_TOAST",
            toastId: toastId,
        })
    }, TOAST_REMOVE_DELAY)

    toastTimeouts.set(toastId, timeout)
}

export const reducer = (state, action) => {
    switch (action.type) {
        case "ADD_TOAST":
            return {
                ...state,
                toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
            }

        case "UPDATE_TOAST":
            return {
                ...state,
                toasts: state.toasts.map((t) =>
                    t.id === action.toast.id ? { ...t, ...action.toast } : t
                ),
            }

        case "DISMISS_TOAST": {
            const { toastId } = action

            if (toastId) {
                addToRemoveQueue(toastId)
            } else {
                state.toasts.forEach((toast) => {
                    addToRemoveQueue(toast.id)
                })
            }

            return {
                ...state,
                toasts: state.toasts.map((t) =>
                    t.id === toastId || toastId === undefined
                        ? {
                            ...t,
                            open: false,
                        }
                        : t
                ),
            }
        }
        case "REMOVE_TOAST":
            if (action.toastId === undefined) {
                return {
                    ...state,
                    toasts: [],
                }
            }
            return {
                ...state,
                toasts: state.toasts.filter((t) => t.id !== action.toastId),
            }
    }
}

const listeners = []

let memoryState = { toasts: [] }

function dispatch(action) {
    memoryState = reducer(memoryState, action)
    listeners.forEach((listener) => {
        listener(memoryState)
    })
}

function toast({ ...props }) {
    const id = genId()

    const update = (props) =>
        dispatch({
            type: "UPDATE_TOAST",
            toast: { ...props, id },
        })
    const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

    dispatch({
        type: "ADD_TOAST",
        toast: {
            ...props,
            id,
            open: true,
            onOpenChange: (open) => {
                if (!open) dismiss()
            },
        },
    })

    return {
        id: id,
        dismiss,
        update,
    }
}

function useToast() {
    const [state, setState] = React.useState(memoryState)

    React.useEffect(() => {
        listeners.push(setState)
        return () => {
            const index = listeners.indexOf(setState)
            if (index > -1) {
                listeners.splice(index, 1)
            }
        }
    }, [state])

    return {
        ...state,
        toast,
        dismiss: (toastId) => dispatch({ type: "DISMISS_TOAST", toastId }),
    }
}

export { useToast, toast }
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;

@layer base {
  :root {
    --background: 210 40% 98%;
    --foreground: 222 47% 11%;
    --card: 0 0% 100%;
    --card-foreground: 222 47% 11%;
    --popover: 0 0% 100%;
    --popover-foreground: 222 47% 11%;
    --primary: 208 99% 45%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222 47% 11%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 90%;
    --accent-foreground: 222 47% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 208 99% 45%;
    --radius: 0.75rem;

   /* Sidebar specific variables for dark mode */
     /* Sidebar specific variables */
     --sidebar-background: 210 40% 87%;
     --sidebar-foreground: 222.2 47.4% 11.2%;
     --sidebar-primary: 221.2 83.2% 53.3%;
     --sidebar-primary-foreground: 210 40% 98%;
     --sidebar-accent: 221.2 83.2% 53.3%;
     --sidebar-accent-foreground: 210 40% 98%;
     --sidebar-border: 214.3 31.8% 91.4%;
     --sidebar-ring: 221.2 83.2% 53.3%;
  }

  .dark {
    --background: 217 32% 17%;
    --foreground: 210 40% 98%;
    --card: 222 47% 11%;
    --card-foreground: 210 40% 98%;
    --popover: 222 47% 11%;
    --popover-foreground: 210 40% 98%;
    --primary: 208 99% 45%;
    --primary-foreground: 210 40% 98%;
    --secondary: 217 32% 17%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217 32% 17%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217 32% 17%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217 32% 17%;
    --input: 217 32% 17%;
    --ring: 208 99% 45%;
 /* Sidebar specific variables for dark mode */
 --sidebar-background: 222.2 47.4% 11.2%;
 --sidebar-foreground: 210 40% 98%;
 --sidebar-primary: 217.2 91.2% 59.8%;
 --sidebar-primary-foreground: 222.2 47.4% 11.2%;
 --sidebar-accent: 217.2 91.2% 59.8%;
 --sidebar-accent-foreground: 222.2 47.4% 11.2%;
 --sidebar-border: 217.2 32.6% 17.5%;
 --sidebar-ring: 224.3 76.3% 48%;
}
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

.fade-in {
  animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.glass-card {
  @apply bg-white/90 backdrop-blur-sm border border-white/20 shadow-xl;
}

.hover-scale {
  @apply transition-transform duration-200 hover:scale-[1.02];
}
@layer components {
  .profile-glass {
    @apply bg-white bg-opacity-10 backdrop-filter backdrop-blur-lg border border-white border-opacity-20;
  }
  
  .profile-card {
    @apply bg-white rounded-2xl shadow-lg overflow-hidden transition-all duration-300;
  }

  .profile-field-container {
    @apply bg-profileBlue-50 rounded-lg p-4 transition-all duration-300 hover:shadow-md;
  }

  .profile-field-label {
    @apply text-sm font-medium text-profileBlue-600 mb-1;
  }
  
  .profile-field-value {
    @apply text-gray-800 font-normal;
  }

  .profile-tab {
    @apply relative px-4 py-2 font-medium transition-all duration-300 ease-in-out text-gray-600 hover:text-profileBlue-600;
  }

  .profile-tab-active {
    @apply text-profileBlue-600;
  }

  .profile-tab-active::after {
    content: '';
    @apply absolute bottom-0 left-0 w-full h-0.5 bg-profileBlue-400 rounded-t-full;
  }

  .profile-avatar {
    @apply relative rounded-full border-4 border-white shadow-lg overflow-hidden transition-all duration-300 transform hover:scale-105;
  }

  .profile-edit-button {
    @apply rounded-full flex items-center justify-center transition-all duration-300 ease-in-out;
  }
}
@layer utilities {
  .glass-card {
    @apply bg-white/90 backdrop-blur-sm border border-white/20 shadow-xl;
  }
  .hover-scale {
    @apply transition-transform duration-200 hover:scale-[1.02];
  }
  @layer components {
    .glass-card {
      @apply bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg border border-white/20 dark:border-gray-700/20 shadow-xl;
    }
    
    .profile-field-container {
      @apply transition-all duration-300 rounded-2xl overflow-hidden;
    }
    
    .profile-field-container:hover {
      @apply shadow-lg;
    }
    
    .tab-indicator {
      @apply absolute left-0 h-full bg-primary rounded-r-full w-1 transition-all duration-300;
    }
    
    .profile-gradient {
      background: linear-gradient(135deg, hsl(var(--primary)/0.8), hsl(var(--accent)/0.8));
    }
    
    .field-highlight {
      @apply ring-2 ring-primary/30 ring-offset-2 ring-offset-background;
    }
  }
}
@tailwind utilities;
</file>

<file path="src/index.jsx">
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
</file>

<file path="src/Layouts/DashboardLayout.jsx">
import { useEffect } from 'react';
import DashboardSidebar from "../components/DashboardSidebar";
import DashboardHeader from "../components/DashboardHeader"; // <--- 1. Import the header
import { SidebarProvider } from '../components/ui/sidebar';
import { useSocket } from '../context/SocketContext';
import { useNotifications } from '../context/NotificationContext';
import { toast } from "sonner";
import { useNavigate } from 'react-router-dom';

export default function DashboardLayout({ children }) {
    const { socket, isConnected } = useSocket();
    const { addNotification } = useNotifications();
    const navigate = useNavigate();

    useEffect(() => {
        if (socket && isConnected) {
            console.log("DashboardLayout: Socket connected, setting up 'notification' listener.");

            const handleNotification = (data) => {
                console.log("🔔 Notification received in Layout:", data);
                addNotification(data);

                let targetPath = '/emergency';
                toast.info(data.message || "New notification received", {
                    description: `Patient: ${data.patientName || 'N/A'}. Level: ${data.emergencyLevel || 'N/A'}. Status: ${data.newStatus || 'N/A'}`,
                    duration: 10000,
                    action: {
                        label: "View Details",
                        onClick: () => {
                            console.log(`Navigating due to notification for patient: ${data.patientId}`);
                            navigate(targetPath, { state: { highlightPatientId: data.patientId } });
                        },
                    },
                });
            };

            socket.on('notification', handleNotification);

            return () => {
                console.log("DashboardLayout: Cleaning up 'notification' listener.");
                socket.off('notification', handleNotification);
            };
        } else {
            console.log("DashboardLayout: Socket not available or not connected. Listener not set.");
        }
    }, [socket, isConnected, navigate, addNotification]);

    return (
        <SidebarProvider>
            <div className="dashboard-container" style={{ display: 'flex', width: '100%' }}>
                <DashboardSidebar />
                {/* Main content area that includes the header and the page content */}
                <div style={{ flex: 1, display: 'flex', flexDirection: 'column', maxHeight: '100vh' }}> {/* Wrapper div */}
                    <DashboardHeader /> {/* <--- 2. Render the header HERE */}
                    {/* Content area with padding and scrolling */}
                    <div className="dashboard-content" style={{ flex: 1, padding: '20px', overflowY: 'auto' }}>
                        {children} {/* Page content (Dashboard, Doctors, etc.) */}
                    </div>
                </div>
            </div>
        </SidebarProvider>
    );
}
</file>

<file path="src/Layouts/MainLayout.jsx">
import Header from "../components/header";
import Footer from "../components/footer";

export default function MainLayout({ children }) {
  return (
    <>
      <Header />
      <main>{children}</main>
      
      <Footer />
    </>
  );
}
</file>

<file path="src/Layouts/PublicLayout.jsx">
export default function PublicLayout({ children }) {
    return <div className="public-layout">{children}</div>;
  }
</file>

<file path="src/lib/utils.jsx">
import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
    return twMerge(clsx(inputs))
}
</file>

<file path="src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="src/main.jsx">
import { createRoot } from 'react-dom/client';
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import { SocketProvider } from './context/SocketContext.jsx'; 
import { NotificationProvider } from './context/NotificationContext.jsx'; 
import { Toaster } from "@/components/ui/sonner" 
import App from './App.jsx';
ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <BrowserRouter>
      <SocketProvider>        {/* Add SocketProvider */}
        <NotificationProvider> {/* Add NotificationProvider */}
          <App />
          <Toaster position="top-right" richColors /> {/* Add Sonner Toaster here */}
        </NotificationProvider>
      </SocketProvider>
    </BrowserRouter>
  </React.StrictMode>
);
</file>

<file path="src/pages/AddMedicalRecordModal.css">
/* src/components/AddMedicalRecordModal.css */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .modal-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    width: 500px;
  }
  
  .modal-content h2,
  .modal-content h3 {
    margin-bottom: 15px;
  }
  
  .modal-content form {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .modal-content label {
    display: flex;
    flex-direction: column;
  }
  
  .modal-content input,
  .modal-content select {
    padding: 8px;
    margin-top: 5px;
    border-radius: 4px;
    border: 1px solid #ccc;
  }
  
  .modal-content button {
    padding: 10px;
    margin-top: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .modal-content button[type="submit"] {
    background-color: #28a745;
    color: white;
  }
  
  .modal-content button[type="button"] {
    background-color: #6c757d;
    color: white;
  }
  
  .modal-content button[type="button"]:hover {
    background-color: #5a6268;
  }
</file>

<file path="src/pages/AddMedicalRecordModal.jsx">
// src/components/AddMedicalRecordModal.jsx
import React, { useState } from 'react';
import axios from 'axios';
import './AddMedicalRecordModal.css';

const AddMedicalRecordModal = ({ patients, onClose, onRecordAdded }) => {
  const [formData, setFormData] = useState({
    emergencyPatientId: '',
    bloodType: '',
    knownAllergies: '',
    patientFiles: [],
  });
  const [fileData, setFileData] = useState({ type: '', notes: '', details: {} });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(
        'http://localhost:8089/api/medical-records/create-for-emergency',
        formData,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      onRecordAdded(response.data.medicalRecord);
      onClose();
    } catch (err) {
      console.error('Erreur lors de la création du dossier médical:', err);
    }
  };

  const handleAddFile = () => {
    setFormData((prev) => ({
      ...prev,
      patientFiles: [...prev.patientFiles, fileData],
    }));
    setFileData({ type: '', notes: '', details: {} });
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>Ajouter un Dossier Médical</h2>
        <form onSubmit={handleSubmit}>
          <label>
            Patient :
            <select
              value={formData.emergencyPatientId}
              onChange={(e) => setFormData({ ...formData, emergencyPatientId: e.target.value })}
            >
              <option value="">Sélectionner un patient</option>
              {patients.map((patient) => (
                <option key={patient._id} value={patient._id}>
                  {patient.firstName} {patient.lastName}
                </option>
              ))}
            </select>
          </label>
          <label>
            Type de sang :
            <input
              type="text"
              value={formData.bloodType}
              onChange={(e) => setFormData({ ...formData, bloodType: e.target.value })}
            />
          </label>
          <label>
            Allergies :
            <input
              type="text"
              value={formData.knownAllergies}
              onChange={(e) => setFormData({ ...formData, knownAllergies: e.target.value.split(',') })}
            />
          </label>

          <h3>Ajouter un Fichier Patient</h3>
          <label>
            Type :
            <select
              value={fileData.type}
              onChange={(e) => setFileData({ ...fileData, type: e.target.value })}
            >
              <option value="">Sélectionner un type</option>
              <option value="PatientInformation">Informations Patient</option>
              <option value="Triage">Triage</option>
              <option value="VitalSigns">Signes Vitaux</option>
            </select>
          </label>
          <label>
            Notes :
            <input
              type="text"
              value={fileData.notes}
              onChange={(e) => setFileData({ ...fileData, notes: e.target.value })}
            />
          </label>
          {/* Simplifié : Ajoutez des champs spécifiques pour details selon le type si nécessaire */}
          <button type="button" onClick={handleAddFile}>
            Ajouter ce Fichier
          </button>

          <button type="submit">Créer le Dossier</button>
          <button type="button" onClick={onClose}>
            Annuler
          </button>
        </form>
      </div>
    </div>
  );
};

export default AddMedicalRecordModal;
</file>

<file path="src/pages/AddPatientFileModal.css">
/* src/components/AddPatientFileModal.css */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .modal-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    width: 400px;
  }
  
  .modal-content h2 {
    margin-bottom: 15px;
  }
  
  .modal-content form {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .modal-content label {
    display: flex;
    flex-direction: column;
  }
  
  .modal-content input,
  .modal-content select {
    padding: 8px;
    margin-top: 5px;
    border-radius: 4px;
    border: 1px solid #ccc;
  }
  
  .modal-content button {
    padding: 10px;
    margin-top: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .modal-content button[type="submit"] {
    background-color: #17a2b8;
    color: white;
  }
  
  .modal-content button[type="button"] {
    background-color: #6c757d;
    color: white;
  }
  
  .modal-content button[type="button"]:hover {
    background-color: #5a6268;
  }
</file>

<file path="src/pages/AddPatientFileModal.jsx">
"use client"

import { useState, useEffect } from "react"
import { X, Plus } from 'lucide-react'
import { motion, AnimatePresence } from "framer-motion"

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent } from "@/components/ui/card"

const AddPatientFileModal = ({ medicalRecordId, initialData, onClose, onSubmit }) => {
  const [fileData, setFileData] = useState({
    type: "",
    notes: "",
    details: {},
  })

  useEffect(() => {
    if (initialData) {
      setFileData(initialData)
    }
  }, [initialData])

  const handleChange = (e) => {
    const { name, value } = e.target
    setFileData({ ...fileData, [name]: value })
  }

  const handleSelectChange = (name, value) => {
    setFileData({ ...fileData, [name]: value })
  }

  const handleDetailsChange = (e) => {
    const { name, value } = e.target
    setFileData({
      ...fileData,
      details: {
        ...fileData.details,
        [name]: value,
      },
    })
  }

  const handleNestedDetailsChange = (parent, field, value) => {
    setFileData({
      ...fileData,
      details: {
        ...fileData.details,
        [parent]: {
          ...(fileData.details[parent] || {}),
          [field]: value,
        },
      },
    })
  }

  const handleArrayItemChange = (arrayName, index, field, value) => {
    const array = [...(fileData.details[arrayName] || [])]
    array[index] = { ...array[index], [field]: value }

    setFileData({
      ...fileData,
      details: {
        ...fileData.details,
        [arrayName]: array,
      },
    })
  }

  const addArrayItem = (arrayName, template) => {
    const array = [...(fileData.details[arrayName] || [])]
    array.push(template)

    setFileData({
      ...fileData,
      details: {
        ...fileData.details,
        [arrayName]: array,
      },
    })
  }

  const removeArrayItem = (arrayName, index) => {
    const array = [...(fileData.details[arrayName] || [])]
    array.splice(index, 1)

    setFileData({
      ...fileData,
      details: {
        ...fileData.details,
        [arrayName]: array,
      },
    })
  }

  const renderTypeSpecificFields = () => {
    switch (fileData.type) {
      case "Prescription":
        return (
          <motion.div 
            className="space-y-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Medications</Label>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => addArrayItem("medications", { name: "", dosage: "", frequency: "", duration: "" })}
                  className="transition-all duration-300 hover:scale-105"
                >
                  <Plus className="h-4 w-4 mr-1" /> Add
                </Button>
              </div>
              <AnimatePresence>
                {fileData.details.medications?.map((med, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <Card className="mt-2 overflow-hidden">
                      <CardContent className="p-4">
                        <div className="flex justify-between items-center mb-2">
                          <h4 className="font-medium text-sm">Medication {index + 1}</h4>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 text-red-500 transition-all duration-200 hover:bg-red-50 hover:rotate-90"
                            onClick={() => removeArrayItem("medications", index)}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                        <div className="grid grid-cols-2 gap-3">
                          <div className="space-y-1">
                            <Label htmlFor={`med-name-${index}`} className="text-xs">
                              Name
                            </Label>
                            <Input
                              id={`med-name-${index}`}
                              value={med.name || ""}
                              onChange={(e) => handleArrayItemChange("medications", index, "name", e.target.value)}
                              placeholder="Medication name"
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                          <div className="space-y-1">
                            <Label htmlFor={`med-dosage-${index}`} className="text-xs">
                              Dosage
                            </Label>
                            <Input
                              id={`med-dosage-${index}`}
                              value={med.dosage || ""}
                              onChange={(e) => handleArrayItemChange("medications", index, "dosage", e.target.value)}
                              placeholder="e.g., 500mg"
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                          <div className="space-y-1">
                            <Label htmlFor={`med-frequency-${index}`} className="text-xs">
                              Frequency
                            </Label>
                            <Input
                              id={`med-frequency-${index}`}
                              value={med.frequency || ""}
                              onChange={(e) => handleArrayItemChange("medications", index, "frequency", e.target.value)}
                              placeholder="e.g., 3 times a day"
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                          <div className="space-y-1">
                            <Label htmlFor={`med-duration-${index}`} className="text-xs">
                              Duration
                            </Label>
                            <Input
                              id={`med-duration-${index}`}
                              value={med.duration || ""}
                              onChange={(e) => handleArrayItemChange("medications", index, "duration", e.target.value)}
                              placeholder="e.g., 7 days"
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </motion.div>
        )

      case "Diagnostic":
        return (
          <motion.div 
            className="space-y-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="space-y-2">
              <Label htmlFor="diagnosis">Diagnosis</Label>
              <Textarea
                id="diagnosis"
                name="diagnosis"
                value={fileData.details.diagnosis || ""}
                onChange={handleDetailsChange}
                placeholder="Enter diagnosis"
                rows={3}
                className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
              />
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Diagnostic Tests</Label>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => addArrayItem("diagnosticTests", { testName: "", result: "", date: new Date() })}
                  className="transition-all duration-300 hover:scale-105"
                >
                  <Plus className="h-4 w-4 mr-1" /> Add
                </Button>
              </div>
              <AnimatePresence>
                {fileData.details.diagnosticTests?.map((test, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <Card className="mt-2 overflow-hidden">
                      <CardContent className="p-4">
                        <div className="flex justify-between items-center mb-2">
                          <h4 className="font-medium text-sm">Test {index + 1}</h4>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 text-red-500 transition-all duration-200 hover:bg-red-50 hover:rotate-90"
                            onClick={() => removeArrayItem("diagnosticTests", index)}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                        <div className="grid grid-cols-2 gap-3">
                          <div className="space-y-1">
                            <Label htmlFor={`test-name-${index}`} className="text-xs">
                              Test Name
                            </Label>
                            <Input
                              id={`test-name-${index}`}
                              value={test.testName || ""}
                              onChange={(e) => handleArrayItemChange("diagnosticTests", index, "testName", e.target.value)}
                              placeholder="Test name"
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                          <div className="space-y-1">
                            <Label htmlFor={`test-result-${index}`} className="text-xs">
                              Result
                            </Label>
                            <Input
                              id={`test-result-${index}`}
                              value={test.result || ""}
                              onChange={(e) => handleArrayItemChange("diagnosticTests", index, "result", e.target.value)}
                              placeholder="Result"
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                          <div className="space-y-1 col-span-2">
                            <Label htmlFor={`test-date-${index}`} className="text-xs">
                              Date
                            </Label>
                            <Input
                              id={`test-date-${index}`}
                              type="date"
                              value={test.date ? new Date(test.date).toISOString().split("T")[0] : ""}
                              onChange={(e) =>
                                handleArrayItemChange("diagnosticTests", index, "date", new Date(e.target.value))
                              }
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </motion.div>
        )

      // Similar pattern for other case types with animations
      case "Treatment":
        return (
          <motion.div 
            className="space-y-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            {/* Treatment fields with animations */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Procedures</Label>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => addArrayItem("procedures", { name: "", date: new Date(), notes: "" })}
                  className="transition-all duration-300 hover:scale-105"
                >
                  <Plus className="h-4 w-4 mr-1" /> Add
                </Button>
              </div>
              <AnimatePresence>
                {fileData.details.procedures?.map((proc, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <Card className="mt-2 overflow-hidden">
                      <CardContent className="p-4">
                        <div className="flex justify-between items-center mb-2">
                          <h4 className="font-medium text-sm">Procedure {index + 1}</h4>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 text-red-500 transition-all duration-200 hover:bg-red-50 hover:rotate-90"
                            onClick={() => removeArrayItem("procedures", index)}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                        <div className="grid gap-3">
                          <div className="space-y-1">
                            <Label htmlFor={`proc-name-${index}`} className="text-xs">
                              Procedure Name
                            </Label>
                            <Input
                              id={`proc-name-${index}`}
                              value={proc.name || ""}
                              onChange={(e) => handleArrayItemChange("procedures", index, "name", e.target.value)}
                              placeholder="Procedure name"
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                          <div className="space-y-1">
                            <Label htmlFor={`proc-date-${index}`} className="text-xs">
                              Date
                            </Label>
                            <Input
                              id={`proc-date-${index}`}
                              type="date"
                              value={proc.date ? new Date(proc.date).toISOString().split("T")[0] : ""}
                              onChange={(e) => handleArrayItemChange("procedures", index, "date", new Date(e.target.value))}
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                          <div className="space-y-1">
                            <Label htmlFor={`proc-notes-${index}`} className="text-xs">
                              Notes
                            </Label>
                            <Textarea
                              id={`proc-notes-${index}`}
                              value={proc.notes || ""}
                              onChange={(e) => handleArrayItemChange("procedures", index, "notes", e.target.value)}
                              placeholder="Notes about the procedure"
                              rows={2}
                              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                            />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </motion.div>
        )

      case "VitalSigns":
        return (
          <motion.div 
            className="space-y-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="grid grid-cols-2 gap-3">
              <div className="space-y-2">
                <Label htmlFor="temperature">Temperature (°C)</Label>
                <Input
                  id="temperature"
                  type="number"
                  step="0.1"
                  value={fileData.details.vitalSigns?.temperature || ""}
                  onChange={(e) =>
                    handleNestedDetailsChange("vitalSigns", "temperature", Number.parseFloat(e.target.value) || "")
                  }
                  placeholder="e.g., 37.2"
                  className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="heartRate">Heart Rate (bpm)</Label>
                <Input
                  id="heartRate"
                  type="number"
                  value={fileData.details.vitalSigns?.heartRate || ""}
                  onChange={(e) =>
                    handleNestedDetailsChange("vitalSigns", "heartRate", Number.parseInt(e.target.value) || "")
                  }
                  placeholder="e.g., 72"
                  className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="systolic">Blood Pressure (systolic)</Label>
                <Input
                  id="systolic"
                  type="number"
                  value={fileData.details.vitalSigns?.bloodPressure?.systolic || ""}
                  onChange={(e) =>
                    setFileData({
                      ...fileData,
                      details: {
                        ...fileData.details,
                        vitalSigns: {
                          ...(fileData.details.vitalSigns || {}),
                          bloodPressure: {
                            ...(fileData.details.vitalSigns?.bloodPressure || {}),
                            systolic: Number.parseInt(e.target.value) || "",
                          },
                        },
                      },
                    })
                  }
                  placeholder="e.g., 120"
                  className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="diastolic">Blood Pressure (diastolic)</Label>
                <Input
                  id="diastolic"
                  type="number"
                  value={fileData.details.vitalSigns?.bloodPressure?.diastolic || ""}
                  onChange={(e) =>
                    setFileData({
                      ...fileData,
                      details: {
                        ...fileData.details,
                        vitalSigns: {
                          ...(fileData.details.vitalSigns || {}),
                          bloodPressure: {
                            ...(fileData.details.vitalSigns?.bloodPressure || {}),
                            diastolic: Number.parseInt(e.target.value) || "",
                          },
                        },
                      },
                    })
                  }
                  placeholder="e.g., 80"
                  className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="respiratoryRate">Respiratory Rate</Label>
                <Input
                  id="respiratoryRate"
                  type="number"
                  value={fileData.details.vitalSigns?.respiratoryRate || ""}
                  onChange={(e) =>
                    handleNestedDetailsChange("vitalSigns", "respiratoryRate", Number.parseInt(e.target.value) || "")
                  }
                  placeholder="e.g., 16"
                  className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="oxygenSaturation">Oxygen Saturation (%)</Label>
                <Input
                  id="oxygenSaturation"
                  type="number"
                  value={fileData.details.vitalSigns?.oxygenSaturation || ""}
                  onChange={(e) =>
                    handleNestedDetailsChange("vitalSigns", "oxygenSaturation", Number.parseInt(e.target.value) || "")
                  }
                  placeholder="e.g., 98"
                  className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
                />
              </div>
            </div>
          </motion.div>
        )

      // Other cases with similar animation patterns
      default:
        return null
    }
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    onSubmit(fileData)
  }

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{initialData ? "Edit Document" : "Add New Document"}</DialogTitle>
        </DialogHeader>
        <motion.form 
          onSubmit={handleSubmit} 
          className="space-y-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        >
          <div className="space-y-2">
            <Label htmlFor="type">Document Type</Label>
            <Select
              value={fileData.type}
              onValueChange={(value) => handleSelectChange("type", value)}
              disabled={initialData}
            >
              <SelectTrigger className="transition-all duration-200 hover:border-blue-300">
                <SelectValue placeholder="Select a type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Prescription">Prescription</SelectItem>
                <SelectItem value="Diagnostic">Diagnostic</SelectItem>
                <SelectItem value="Treatment">Treatment</SelectItem>
                <SelectItem value="VitalSigns">Vital Signs</SelectItem>
                <SelectItem value="Triage">Triage</SelectItem>
                <SelectItem value="Discharge">Discharge</SelectItem>
                <SelectItem value="PatientInformation">Patient Information</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <AnimatePresence mode="wait">
            {fileData.type && renderTypeSpecificFields()}
          </AnimatePresence>

          <motion.div 
            className="space-y-2"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            <Label htmlFor="notes">Additional Notes</Label>
            <Textarea
              id="notes"
              name="notes"
              value={fileData.notes || ""}
              onChange={handleChange}
              placeholder="Additional notes"
              rows={3}
              className="transition-all duration-200 focus:ring-2 focus:ring-blue-200"
            />
          </motion.div>

          <motion.div 
            className="flex justify-end space-x-2"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            <Button 
              type="button" 
              variant="outline" 
              onClick={onClose}
              className="transition-all duration-200 hover:bg-gray-100"
            >
              Cancel
            </Button>
            <Button
              className="bg-[#D1DEEB] text-gray-900 hover:bg-[#b8c9db] shadow-lg rounded-lg py-3 px-6 transition-all duration-300 hover:shadow-xl hover:scale-105"
              type="submit"
              disabled={!fileData.type}
            >
              {initialData ? "Update" : "Add"}
            </Button>
          </motion.div>
        </motion.form>
      </DialogContent>
    </Dialog>
  )
}

export default AddPatientFileModal
</file>

<file path="src/pages/Alerts.jsx">
// Alerts.jsx
import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { io } from "socket.io-client";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const Alerts = () => {
  const [alerts, setAlerts] = useState([]);
  const socketRef = useRef(null);

  useEffect(() => {
    // 1) Fetch existing alerts
    axios
      .get("http://localhost:8089/api/alerts/ambulance", {
        withCredentials: true,
      })
      .then(({ data }) => {
        setAlerts(data.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)));
      })
      .catch((err) => console.error("Failed to fetch alerts:", err));

    // 2) Set up real-time socket
    socketRef.current = io("http://localhost:8089", { withCredentials: true });

    socketRef.current.on("connect", () => {
      console.log("🔔 Alerts socket connected:", socketRef.current.id);
    });

    socketRef.current.on("alert", (alert) => {
      setAlerts((prev) => [alert, ...prev]);
    });

    return () => {
      socketRef.current.disconnect();
    };
  }, []);

  const clearAlerts = () => setAlerts([]);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">🚨 Ambulance Alerts</h1>
        <Button variant="outline" onClick={clearAlerts}>
          Clear All
        </Button>
      </div>

      {alerts.length === 0 ? (
        <p className="text-muted-foreground">No alerts at the moment.</p>
      ) : (
        <div className="space-y-4 max-h-[70vh] overflow-y-auto pr-2">
          {alerts.map((a) => (
            <Card key={a._id}>
              <CardHeader className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-1 sm:gap-0">
                <CardTitle className="text-lg font-semibold">
                  🚑 Source: {a.source}
                </CardTitle>
                <span className="text-sm text-muted-foreground">
                  {new Date(a.timestamp).toLocaleString()}
                </span>
              </CardHeader>
              <CardContent>
                <p>{a.message}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default Alerts;
</file>

<file path="src/pages/AmbulanceCheck.jsx">
import React, { useState, useEffect, useCallback, memo } from "react";
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  CircularProgress,
  useTheme,
  Avatar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
} from "@mui/material";
import { styled, keyframes } from "@mui/material/styles";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import {
  Phone as PhoneIcon,
  Person as DriverIcon,
  LocalShipping as AmbulanceTypeIcon,
  Pin as PinIcon,
  EventAvailable as BookIcon,
} from "@mui/icons-material";
import Particles from "react-tsparticles";
import { loadFull } from "tsparticles";

// Animation de droite à gauche pour l'ambulance
const moveAmbulance = keyframes`
  0% { transform: translateX(100vw); }
  100% { transform: translateX(-100vw); }
`;

// Animation d'entrée pour les cartes
const fadeInUp = keyframes`
  0% { opacity: 0; transform: translateY(20px); }
  100% { opacity: 1; transform: translateY(0); }
`;

// Styles des cartes
const AmbulanceCard = styled(Card)(({ theme }) => ({
  borderRadius: "14px",
  boxShadow: "0 6px 15px rgba(0, 0, 0, 0.1)",
  background: "linear-gradient(145deg, #ffffff 0%, #e0f2fe 100%)",
  transition: "all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1)",
  borderLeft: "4px solid #1d4ed8",
  maxWidth: "250px",
  margin: "0 auto",
  animation: `${fadeInUp} 0.5s ease-out forwards`,
  "&:hover": {
    transform: "translateY(-6px)",
    boxShadow: "0 10px 25px rgba(29, 78, 216, 0.2)",
  },
}));

const CardContentWrapper = styled(CardContent)(({ theme }) => ({
  padding: theme.spacing(2),
  display: "flex",
  flexDirection: "column",
  gap: theme.spacing(1),
}));

const BookButton = styled(Button)(({ theme }) => ({
  background: "linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%)",
  color: "white",
  fontWeight: 700,
  padding: theme.spacing(0.8, 2),
  borderRadius: "8px",
  marginTop: theme.spacing(1),
  boxShadow: "0 3px 5px rgba(29, 78, 216, 0.2)",
  display: "flex",
  alignItems: "center",
  gap: theme.spacing(0.5),
  fontSize: "0.85rem",
  "&:hover": {
    background: "linear-gradient(135deg, #1e40af 0%, #2563eb 100%)",
    transform: "translateY(-2px)",
    boxShadow: "0 5px 10px rgba(29, 78, 216, 0.3)",
  },
  "&:disabled": {
    background: "#e5e7eb",
    color: "#9ca3af",
    boxShadow: "none",
  },
}));

const AmbulanceAnimation = styled("div")({
  position: "fixed",
  bottom: "60px",
  zIndex: 1,
  "& img": {
    width: "450px",
    height: "auto",
    animation: `${moveAmbulance} 12s linear infinite`,
    filter: "drop-shadow(0 5px 15px rgba(0, 0, 0, 0.2))",
  },
});

// Styles pour le formulaire
const FormField = styled(TextField)(({ theme }) => ({
  marginBottom: theme.spacing(2),
  "& .MuiOutlinedInput-root": {
    "& fieldset": { borderColor: theme.palette.grey[300] },
    "&:hover fieldset": { borderColor: theme.palette.primary.main },
    "&.Mui-focused fieldset": { borderColor: theme.palette.primary.main },
    borderRadius: "8px",
  },
}));

const SubmitButton = styled(Button)(({ theme }) => ({
  background: "linear-gradient(135deg, #22c55e 0%, #16a34a 100%)",
  color: "white",
  fontWeight: 700,
  padding: theme.spacing(1.5, 3),
  borderRadius: "8px",
  "&:hover": {
    background: "linear-gradient(135deg, #16a34a 0%, #15803d 100%)",
    transform: "translateY(-2px)",
  },
  "&:disabled": {
    background: "#e5e7eb",
    color: "#9ca3af",
  },
}));

// Composant InfoItem
const InfoItem = ({ icon, label, value }) => {
  return (
    <Box sx={{ display: "flex", alignItems: "center", gap: 0.8, mb: 0.3 }}>
      {label === "Drivers" ? (
        <Avatar sx={{ bgcolor: "#e0f2fe", width: 24, height: 24, mr: 0.5 }}>
          👨‍✈️
        </Avatar>
      ) : (
        React.cloneElement(icon, { sx: { color: "#1d4ed8", fontSize: 16 } })
      )}
      <Typography
        variant="body2"
        sx={{ color: "#1f2937", fontWeight: 500, fontSize: "0.85rem" }}
      >
        <strong>{label}:</strong> {value || "N/A"}
      </Typography>
    </Box>
  );
};

// Composant de carte optimisé
const AmbulanceCardItem = memo(({ ambulance, onBookNow, index }) => {
  const isAvailable = ambulance.status === "AVAILABLE";

  return (
    <AmbulanceCard>
      <CardContentWrapper>
        <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 0.5 }}>
          <Avatar sx={{ bgcolor: "#e0f2fe", width: 36, height: 36 }}>
            🚑
          </Avatar>
          <Typography variant="h6" sx={{ fontWeight: 700, color: "#1e40af", fontSize: "1.1rem" }}>
            Ambulance N°{index + 1}
          </Typography>
        </Box>
        <InfoItem
          icon={<DriverIcon />}
          label="Drivers"
          value={ambulance.drivers?.length ? ambulance.drivers.join(", ") : "N/A"}
        />
        <InfoItem icon={<PhoneIcon />} label="Contact" value={ambulance.mobile} />
        <Box sx={{ display: "flex", justifyContent: "center", mt: 0.5 }}>
          <BookButton onClick={() => onBookNow(ambulance._id)} disabled={!isAvailable}>
            <BookIcon sx={{ fontSize: 16 }} /> Book Now
          </BookButton>
        </Box>
      </CardContentWrapper>
    </AmbulanceCard>
  );
});

// Error Boundary
class ErrorBoundary extends React.Component {
  state = { hasError: false };

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      return (
        <Box sx={{ textAlign: "center", mt: 5 }}>
          <Typography variant="h6" color="error">
            Something went wrong. Please try again later.
          </Typography>
        </Box>
      );
    }
    return this.props.children;
  }
}

const AmbulanceCheck = () => {
  const theme = useTheme();
  const navigate = useNavigate();
  const [ambulances, setAmbulances] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [openBookingDialog, setOpenBookingDialog] = useState(false);
  const [selectedAmbulanceId, setSelectedAmbulanceId] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    address: "",
    email: "",
    phone: "",
    location: "",
  });
  const [formErrors, setFormErrors] = useState({});
  const [paymentLoading, setPaymentLoading] = useState(false);

  useEffect(() => {
    const fetchAmbulances = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          throw new Error("No token found. Please log in.");
        }

        const response = await axios.get("http://localhost:8089/api/ambulance", {
          headers: { Authorization: `Bearer ${token}` },
          withCredentials: true,
        });
        console.log("API Response:", response.data);

        const ambulanceData = Array.isArray(response.data) ? response.data : response.data.data || [];
        setAmbulances(ambulanceData);
        setLoading(false);
      } catch (err) {
        console.error("Error fetching ambulances:", err);
        setError("Failed to load ambulances. Please try again later.");
        setLoading(false);
        setAmbulances([]);
        if (err.response?.status === 401) {
          alert("Session expired. Please log in again.");
          localStorage.removeItem("token");
          navigate("/login");
        }
      }
    };
    fetchAmbulances();
  }, [navigate]);

  const handleBookNow = useCallback((id) => {
    setSelectedAmbulanceId(id);
    setOpenBookingDialog(true);
  }, []);

  const handleCloseDialog = () => {
    setOpenBookingDialog(false);
    setSelectedAmbulanceId(null);
    setFormData({ name: "", address: "", email: "", phone: "", location: "" });
    setFormErrors({});
  };

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });

    let errors = { ...formErrors };
    if (name === "email" && value && !/\S+@\S+\.\S+/.test(value)) {
      errors.email = "Please enter a valid email";
    } else if (name === "phone" && value && !/^[0-9]{8,15}$/.test(value)) {
      errors.phone = "Phone number must be 8-15 digits";
    } else {
      delete errors[name];
    }
    setFormErrors(errors);
  };

  const validateForm = () => {
    const errors = {};
    if (!formData.name) errors.name = "Name is required";
    if (!formData.address) errors.address = "Address is required";
    if (!formData.email) errors.email = "Email is required";
    else if (!/\S+@\S+\.\S+/.test(formData.email)) errors.email = "Please enter a valid email";
    if (!formData.phone) errors.phone = "Phone number must be 8-15 digits";
    else if (!/^[0-9]{8,15}$/.test(formData.phone)) errors.phone = "Phone number must be 8-15 digits";
    if (!formData.location) errors.location = "Location is required";
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      setPaymentLoading(true);
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          throw new Error("No token found. Please log in.");
        }

        const response = await axios.post(
          `${import.meta.env.VITE_API_URL}/payments/generate`,
          {
            ambulanceId: selectedAmbulanceId,
            userData: formData,
          },
          {
            headers: { Authorization: `Bearer ${token}` },
            withCredentials: true,
          }
        );

        if (response.data.success) {
          window.location.href = response.data.paymentLink;
        } else {
          throw new Error(response.data.message || "Payment initiation failed");
        }
      } catch (err) {
        console.error("Error generating payment link:", err);
        if (err.response?.status === 401) {
          alert("Session expired. Please log in again.");
          localStorage.removeItem("token");
          navigate("/login");
        } else {
          const errorMessage = err.response?.data?.message || err.message || "Failed to initiate payment. Please try again.";
          alert(errorMessage);
        }
        setPaymentLoading(false);
      }
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", alignItems: "center", minHeight: "100vh" }}>
        <CircularProgress size={60} thickness={4} />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ textAlign: "center", mt: 5 }}>
        <Typography variant="h6" color="error">{error}</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ position: "relative", minHeight: "100vh" }}>
      {/* Background Particles */}
      <Box sx={{ position: "fixed", inset: 0, zIndex: -1 }}>
        <Particles
          id="ambulance-particles"
          init={async (main) => await loadFull(main)}
          options={{
            background: {
              color: { value: "#E8F4F8" },
            },
            particles: {
              number: { value: 100, density: { enable: true, value_area: 800 } },
              color: { value: "#1d4ed8" },
              shape: { type: "circle" },
              opacity: { value: 0.8, random: true },
              size: { value: 4, random: true },
              move: { enable: true, speed: 3, direction: "none", random: true },
            },
            interactivity: {
              events: {
                onhover: { enable: true, mode: "repulse" },
                onclick: { enable: true, mode: "push" },
              },
              modes: {
                repulse: { distance: 100 },
                push: { quantity: 4 },
              },
            },
            detectRetina: true,
          }}
        />
      </Box>

      {/* Main Content */}
      <Box
        sx={{
          minHeight: "100vh",
          background: "rgba(248, 250, 252, 0.95)",
          padding: theme.spacing(8, 2),
          position: "relative",
          overflow: "hidden",
          zIndex: 2,
        }}
      >
        {/* Header */}
        <Box sx={{ textAlign: "center", mb: 8 }}>
          <Typography
            variant="h3"
            sx={{
              fontWeight: 800,
              color: "#1e40af",
              mb: 2,
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              gap: 2,
              textTransform: "uppercase",
            }}
          >
            <br />
            🚑 Available Ambulances
          </Typography>
          <Typography variant="subtitle1" sx={{ color: "#64748b", fontWeight: 500 }}>
            Select an ambulance for emergency service
          </Typography>
        </Box>

        {/* Grille des ambulances */}
        <Box sx={{ maxWidth: "1500px", margin: "0 auto", position: "relative", zIndex: 2 }}>
          {!Array.isArray(ambulances) || ambulances.length === 0 ? (
            <Box
              sx={{
                textAlign: "center",
                p: 4,
                borderRadius: 2,
                backgroundColor: "white",
                boxShadow: theme.shadows[2],
                maxWidth: "500px",
                margin: "0 auto",
              }}
            >
              <Typography variant="h6" color="textSecondary">
                No ambulances available at this time
              </Typography>
            </Box>
          ) : (
            <Grid container spacing={3} justifyContent="center">
              {ambulances.map((ambulance, index) => (
                <Grid item xs={12} sm={6} md={4} lg={3} key={ambulance._id}>
                  <AmbulanceCardItem
                    ambulance={ambulance}
                    onBookNow={handleBookNow}
                    index={index}
                  />
                </Grid>
              ))}
            </Grid>
          )}
        </Box>

        {/* Animation */}
        <AmbulanceAnimation>
          <img src="/Ambulance/logo.png" alt="Ambulance animation" />
        </AmbulanceAnimation>

        {/* Popup de réservation */}
        <Dialog open={openBookingDialog} onClose={handleCloseDialog} maxWidth="sm" fullWidth>
          <DialogTitle sx={{ bgcolor: "#1d4ed8", color: "white", textAlign: "center" }}>
            Book Ambulance
          </DialogTitle>
          <DialogContent sx={{ mt: 2 }}>
            <Box component="form" onSubmit={handleFormSubmit}>
              <FormField
                fullWidth
                label="Full Name"
                name="name"
                value={formData.name}
                onChange={handleFormChange}
                error={!!formErrors.name}
                helperText={formErrors.name}
                required
              />
              <FormField
                fullWidth
                label="Address"
                name="address"
                value={formData.address}
                onChange={handleFormChange}
                error={!!formErrors.address}
                helperText={formErrors.address}
                required
              />
              <FormField
                fullWidth
                label="Email"
                name="email"
                value={formData.email}
                onChange={handleFormChange}
                error={!!formErrors.email}
                helperText={formErrors.email}
                required
              />
              <FormField
                fullWidth
                label="Phone Number"
                name="phone"
                value={formData.phone}
                onChange={handleFormChange}
                error={!!formErrors.phone}
                helperText={formErrors.phone}
                required
                inputProps={{ maxLength: 15 }}
              />
              <FormField
                fullWidth
                label="Pickup Location"
                name="location"
                value={formData.location}
                onChange={handleFormChange}
                error={!!formErrors.location}
                helperText={formErrors.location}
                required
              />
            </Box>
          </DialogContent>
          <DialogActions sx={{ justifyContent: "center", pb: 3 }}>
            <Button onClick={handleCloseDialog} color="secondary">
              Cancel
            </Button>
            <SubmitButton type="submit" onClick={handleFormSubmit} disabled={paymentLoading}>
              {paymentLoading ? <CircularProgress size={24} /> : "Proceed to Payment"}
            </SubmitButton>
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
};

const WrappedAmbulanceCheck = () => (
  <ErrorBoundary>
    <AmbulanceCheck />
  </ErrorBoundary>
);

export default WrappedAmbulanceCheck;
</file>

<file path="src/pages/AmbulanceDashboard.jsx">
import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { io } from "socket.io-client";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  Polyline,
  useMap,
} from "react-leaflet";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "@/components/ui/card";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Input } from "@/components/ui/input";

// Ensure Leaflet CSS is included
import "leaflet/dist/leaflet.css";

// Haversine formula for ETA estimation
const computeDistance = (lat1, lon1, lat2, lon2) => {
  const R = 6371; // km
  const dLat = ((lat2 - lat1) * Math.PI) / 180;
  const dLon = ((lon2 - lon1) * Math.PI) / 180;
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos((lat1 * Math.PI) / 180) *
      Math.cos((lat2 * Math.PI) / 180) *
      Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

// Parse "lat,lng" string to coordinate array
const parseDestination = (dest) => {
  if (!dest) return null;
  const [latStr, lngStr] = dest.split(",");
  const lat = parseFloat(latStr);
  const lng = parseFloat(lngStr);
  return isNaN(lat) || isNaN(lng) ? null : [lat, lng];
};

// OSRM route fetch
const fetchRoute = async (origin, destination) => {
  try {
    const url = `http://router.project-osrm.org/route/v1/driving/${origin.lng},${origin.lat};${destination.lng},${destination.lat}?overview=full&geometries=geojson`;
    const res = await fetch(url);
    const data = await res.json();
    if (data.routes?.length) {
      return data.routes[0].geometry.coordinates.map(([lng, lat]) => [lat, lng]);
    }
  } catch (err) {
    console.error(err);
  }
  return null;
};

// Nominatim search to fetch place coordinates
const fetchPlaceCoordinates = async (query) => {
  try {
    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;
    const resp = await fetch(url);
    const data = await resp.json();
    if (data.length) {
      return { lat: parseFloat(data[0].lat), lng: parseFloat(data[0].lon) };
    }
  } catch (err) {
    console.error(err);
  }
  return null;
};

// Helper component to wrap Fragment and prevent invalid props
const FragmentWrapper = ({ children }) => <React.Fragment>{children}</React.Fragment>;

// Helper component that uses the useMap hook to provide the map instance
const SetMapInstance = ({ setMapInstance }) => {
  const map = useMap();
  useEffect(() => {
    setMapInstance(map);
  }, [map, setMapInstance]);
  return null;
};

const AmbulanceForm = ({ ambulance, onSave, onSearchPlace }) => {
  const [name, setName] = useState(ambulance?.name || "");
  const [status, setStatus] = useState(ambulance?.status || "AVAILABLE");
  const [lastUpdated, setLastUpdated] = useState(ambulance?.lastUpdated || "");
  const [latitude, setLatitude] = useState(ambulance?.latitude || 0);
  const [longitude, setLongitude] = useState(ambulance?.longitude || 0);
  const [destination, setDestination] = useState(ambulance?.destination || "");
  const [drivers, setDrivers] = useState(ambulance?.drivers?.join(",") || "");
  const [mobile, setMobile] = useState(ambulance?.mobile || "");
  const [searchQuery, setSearchQuery] = useState("");

  const handleSearch = async () => {
    const coords = await onSearchPlace(searchQuery);
    if (coords) setDestination(`${coords.lat},${coords.lng}`);
  };

  const handleSubmit = () => {
    onSave({ 
      name, 
      status, 
      lastUpdated, 
      latitude, 
      longitude, 
      destination, 
      drivers: drivers.split(",").map(d => d.trim()), 
      mobile 
    });
  };

  return (
    <div className="space-y-4 mt-4">
      <Input
        placeholder="Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <Input
        placeholder="Status"
        value={status}
        onChange={(e) => setStatus(e.target.value)}
      />
      <Input
        placeholder="Last Updated"
        value={lastUpdated}
        onChange={(e) => setLastUpdated(e.target.value)}
      />
      <Input
        type="number"
        placeholder="Latitude"
        value={latitude}
        onChange={(e) => setLatitude(parseFloat(e.target.value))}
      />
      <Input
        type="number"
        placeholder="Longitude"
        value={longitude}
        onChange={(e) => setLongitude(parseFloat(e.target.value))}
      />
      <Input
        placeholder='Destination ("lat,lng")'
        value={destination}
        onChange={(e) => setDestination(e.target.value)}
      />
      <Input
        placeholder="Driver IDs (comma-separated)"
        value={drivers}
        onChange={(e) => setDrivers(e.target.value)}
      />
      <Input
        placeholder="Mobile Number"
        value={mobile}
        onChange={(e) => setMobile(e.target.value)}
      />
      <div className="flex space-x-2">
        <Input
          placeholder="Search for a place"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <Button onClick={handleSearch}>Search</Button>
      </div>
      <Button onClick={handleSubmit}>Save</Button>
    </div>
  );
};

const AmbulanceDashboard = () => {
  const [ambulances, setAmbulances] = useState([]);
  const [sheetOpen, setSheetOpen] = useState(false);
  const [currentAmbulance, setCurrentAmbulance] = useState(null);
  const [nurses, setNurses] = useState([]);
  const [selectedNurse, setSelectedNurse] = useState("");
  const [isAdmin, setIsAdmin] = useState(false);
  const [routes, setRoutes] = useState({});
  const [mapInstance, setMapInstance] = useState(null);
  const socketRef = useRef(null);

  // Check if current user is an administrator
  useEffect(() => {
    const user = JSON.parse(sessionStorage.getItem("user"));
    if (user?.role === "Administrator") setIsAdmin(true);
  }, []);

  // Initial REST fetch for ambulances
  useEffect(() => {
    axios
      .get("http://localhost:8089/api/ambulance", { withCredentials: true })
      .then(({ data }) => {
        setAmbulances(data);
      })
      .catch(console.error);
  }, []);

  // Socket.IO listener for real-time updates
  useEffect(() => {
    socketRef.current = io("http://localhost:8089", { withCredentials: true });
    socketRef.current.on("connect", () =>
      console.log("🔌 Dashboard socket connected:", socketRef.current.id)
    );

    // location updates
    socketRef.current.on(
      "locationUpdate",
      ({ id, latitude, longitude, timestamp }) => {
        setAmbulances((prev) =>
          prev.map((a) =>
            a._id === id
              ? { ...a, latitude, longitude, lastUpdated: timestamp }
              : a
          )
        );
      }
    );

    // destination updates
    socketRef.current.on(
      "destinationUpdate",
      ({ id, destinationLatitude, destinationLongitude }) => {
        setAmbulances((prev) =>
          prev.map((a) =>
            a._id === id
              ? {
                  ...a,
                  destination: `${destinationLatitude},${destinationLongitude}`,
                  lastUpdated: new Date().toISOString(),
                }
              : a
          )
        );
      }
    );

    return () => socketRef.current.disconnect();
  }, []);

  // Fetch nurses when editing if user is admin
  useEffect(() => {
    if (sheetOpen && isAdmin) {
      axios
        .get("http://localhost:8089/api/users/nurses", { withCredentials: true })
        .then(({ data }) => setNurses(data))
        .catch(console.error);
    }
  }, [sheetOpen, isAdmin]);

  // Fit map bounds using only ambulances with valid coordinates
  useEffect(() => {
    if (mapInstance && ambulances.length) {
      const validBounds = ambulances
        .filter((a) => a.latitude != null && a.longitude != null)
        .map((a) => [a.latitude, a.longitude]);
      if (validBounds.length > 0) {
        mapInstance.fitBounds(validBounds);
      }
    }
  }, [ambulances, mapInstance]);

  // Pre-compute routes for ambulances with valid destination data
  useEffect(() => {
    ambulances.forEach(async (a) => {
      if (!a.destination) return;
      const dest = parseDestination(a.destination);
      if (!dest) return;
      const coords = await fetchRoute(
        { lat: a.latitude, lng: a.longitude },
        { lat: dest[0], lng: dest[1] }
      );
      if (coords) {
        setRoutes((r) => ({ ...r, [a._id]: coords }));
      }
    });
  }, [ambulances]);

  // Save (POST/PUT) ambulance data, then emit destinationUpdate if present
  const handleSaveAmbulance = async (data) => {
    try {
      const res = currentAmbulance?._id
        ? await axios.put(
            `http://localhost:8089/api/ambulance/${currentAmbulance._id}`,
            data,
            { withCredentials: true }
          )
        : await axios.post("http://localhost:8089/api/ambulance", data, {
            withCredentials: true,
          });
      const saved = res.data;

      // update local list
      setAmbulances((prev) =>
        currentAmbulance
          ? prev.map((a) => (a._id === saved._id ? saved : a))
          : [...prev, saved]
      );

      // emit destinationUpdate if we have one
      if (saved.destination) {
        const [lat, lng] = parseDestination(saved.destination);
        socketRef.current.emit("destinationUpdate", {
          id: saved._id,
          destinationLatitude: lat,
          destinationLongitude: lng,
        });
      }

      setSheetOpen(false);
    } catch (err) {
      console.error(err);
    }
  };

  // Delete an ambulance
  const handleDeleteAmbulance = (id) => {
    axios
      .delete(`http://localhost:8089/api/ambulance/${id}`, {
        withCredentials: true,
      })
      .then(() => setAmbulances((prev) => prev.filter((a) => a._id !== id)))
      .catch(console.error);
  };

  // Add nurse to ambulance team
  const handleAddTeamMember = () => {
    if (!selectedNurse || !currentAmbulance?._id) return;
    axios
      .post(
        `http://localhost:8089/api/ambulance/${currentAmbulance._id}/team`,
        { userId: selectedNurse },
        { withCredentials: true }
      )
      .then(({ data }) => {
        const updated = data.ambulance;
        setCurrentAmbulance(updated);
        setAmbulances((prev) =>
          prev.map((a) => (a._id === updated._id ? updated : a))
        );
        setSelectedNurse("");
      })
      .catch(console.error);
  };

  // Search place helper using Nominatim
  const handleSearchPlace = async (q) => {
    const coords = await fetchPlaceCoordinates(q);
    if (coords && mapInstance) {
      mapInstance.flyTo([coords.lat, coords.lng], 15);
    }
    return coords;
  };

  // Focus map on a particular ambulance
  const viewOnMap = (ambulance) => {
    if (!mapInstance) return;
    const lat = parseFloat(ambulance.latitude);
    const lng = parseFloat(ambulance.longitude);
    if (isNaN(lat) || isNaN(lng)) return;
    mapInstance.flyTo([lat, lng], 15);
  };

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <div className="w-1/3 p-6 overflow-y-auto">
        <h1 className="text-2xl font-extrabold tracking-tight mb-2" style={{ color: '#42A5FF' }}>Ambulance Tracking</h1>
        <Button
          onClick={() => {
            setCurrentAmbulance(null);
            setSheetOpen(true);
          }}
          className="mb-4 text-white"
        >
          Add Ambulance
        </Button>
        {ambulances.map((a) => (
          <Card key={a._id} className="mb-4">
            <CardHeader>
              <CardTitle>{a.name}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Status: {a.status}</p>
              <p>Last Updated: {a.lastUpdated || "N/A"}</p>
              <p>Drivers: {a.drivers?.length ? a.drivers.join(", ") : "N/A"}</p>
              <p>Mobile: {a.mobile || "N/A"}</p>
              {a.destination && parseDestination(a.destination) && (
                <p>
                  Destination: {a.destination}{" "}
                  {routes[a._id] && (
                    <>
                      (
                      {Math.round(
                        computeDistance(
                          a.latitude,
                          a.longitude,
                          ...parseDestination(a.destination)
                        ) /
                          40 *
                          60
                      )}{" "}
                      mins)
                    </>
                  )}
                </p>
              )}
              <Button className="text-white" onClick={() => viewOnMap(a)}>View on Map</Button>
              <Button
                variant="outline"
                size="sm"
                className="mt-2 ml-2"
                onClick={() => {
                  setCurrentAmbulance(a);
                  setSheetOpen(true);
                }}
              >
                Edit
              </Button>
              {isAdmin && (
                <Button
                  variant="destructive"
                  size="sm"
                  className="mt-2 ml-2"
                  onClick={() => handleDeleteAmbulance(a._id)}
                >
                  Delete
                </Button>
              )}
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Map */}
      <div className="w-2/3">
        <MapContainer
          center={[51.505, -0.09]}
          zoom={13}
          style={{ height: "100%", width: "100%", zIndex: 0 }}
        >
          <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
          <SetMapInstance setMapInstance={setMapInstance} />
          {ambulances
            .filter((a) => a.latitude != null && a.longitude != null)
            .map((a) => {
              const routeCoords = routes[a._id];
              const destinationCoords = parseDestination(a.destination);
              return (
                <FragmentWrapper key={a._id}>
                  <Marker position={[a.latitude, a.longitude]}>
                    <Popup>
                      {a.name} - {a.status}
                      <br />
                      Drivers: {a.drivers?.length ? a.drivers.join(", ") : "N/A"}
                      <br />
                      Mobile: {a.mobile || "N/A"}
                      {destinationCoords && (
                        <>
                          <br />
                          Destination: {a.destination}
                          <br />
                          ETA:{" "}
                          {Math.round(
                            computeDistance(
                              a.latitude,
                              a.longitude,
                              ...destinationCoords
                            ) /
                              40 *
                              60
                          )}{" "}
                          mins
                        </>
                      )}
                    </Popup>
                  </Marker>
                  {routeCoords && <Polyline positions={routeCoords} />}
                </FragmentWrapper>
              );
            })}
        </MapContainer>
      </div>

      {/* Slide-out Sheet */}
      <Sheet open={sheetOpen} onOpenChange={setSheetOpen}>
        <SheetContent
          className="w-[400px] sm:w-[540px]"
          style={{ zIndex: 10000 }}
        >
          <SheetHeader>
            <SheetTitle>
              {currentAmbulance ? "Edit Ambulance" : "Add New Ambulance"}
            </SheetTitle>
          </SheetHeader>
          <AmbulanceForm
            ambulance={currentAmbulance}
            onSave={handleSaveAmbulance}
            onSearchPlace={handleSearchPlace}
          />
          {isAdmin && currentAmbulance?._id && (
            <div className="mt-6">
              <h3 className="text-xl font-semibold mb-2">Team Management</h3>
              {currentAmbulance.team?.length ? (
                <ul className="mb-4">
                  {currentAmbulance.team.map((n) => (
                    <li key={n._id} className="flex items-center">
                      <span>
                        {n.username} ({n.email})
                      </span>
                    </li>
                  ))}
                </ul>
              ) : (
                <p>No team members yet.</p>
              )}
              <div className="flex items-center space-x-2">
                <select
                  value={selectedNurse}
                  onChange={(e) => setSelectedNurse(e.target.value)}
                  className="border rounded p-1 flex-1"
                >
                  <option value="">Select Nurse to add</option>
                  {nurses
                    .filter(
                      (n) =>
                        !currentAmbulance.team?.find((m) => m._id === n._id)
                    )
                    .map((n) => (
                      <option key={n._id} value={n._id}>
                        {n.username} ({n.email})
                      </option>
                    ))}
                </select>
                <Button onClick={handleAddTeamMember}>Add Nurse</Button>
              </div>
            </div>
          )}
        </SheetContent>
      </Sheet>
    </div>
  );
};

export default AmbulanceDashboard;
</file>

<file path="src/pages/AmbulanceNurseDashboard.jsx">
// NurseDashboard.jsx
import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { io } from "socket.io-client";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  Polyline,
} from "react-leaflet";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

// Parse destination string "lat,lng" into a [lat, lng] array
const parseDestination = (dest) => {
  if (!dest) return null;
  const parts = dest.split(",");
  if (parts.length !== 2) return null;
  const lat = parseFloat(parts[0].trim());
  const lng = parseFloat(parts[1].trim());
  return isNaN(lat) || isNaN(lng) ? null : [lat, lng];
};

// Fetch a route from OSRM API between two points and return coordinates and duration
const fetchRoute = async (origin, destination) => {
  try {
    const url = `https://router.project-osrm.org/route/v1/driving/${origin.lng},${origin.lat};${destination.lng},${destination.lat}?overview=full&geometries=geojson`;
    const res = await fetch(url);
    const data = await res.json();
    if (data.routes && data.routes.length > 0) {
      const coords = data.routes[0].geometry.coordinates.map(
        ([lng, lat]) => [lat, lng]
      );
      const duration = data.routes[0].duration; // duration in seconds
      return { coordinates: coords, duration };
    }
  } catch (error) {
    console.error("Error fetching route:", error);
  }
  return null;
};

// Fetch place coordinates from Nominatim
const fetchPlaceCoordinates = async (query) => {
  try {
    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;
    const response = await fetch(url, {
      headers: { "User-Agent": "NurseDashboard/1.0 (contact@example.com)" },
    });
    const data = await response.json();
    if (data.length > 0) {
      return { lat: parseFloat(data[0].lat), lng: parseFloat(data[0].lon) };
    }
  } catch (error) {
    console.error("Error fetching place coordinates:", error);
  }
  return null;
};

const NurseDashboard = () => {
  const [assignedAmbulance, setAssignedAmbulance] = useState(null);
  const [ambulanceStatus, setAmbulanceStatus] = useState("");
  const [location, setLocation] = useState(null);
  const [alertMessage, setAlertMessage] = useState("");
  const [alertText, setAlertText] = useState("");
  const [sharing, setSharing] = useState(false);
  const [destination, setDestination] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [route, setRoute] = useState([]);
  const [eta, setEta] = useState(null);

  const mapRef = useRef(null);
  const locationIntervalRef = useRef(null);
  const socketRef = useRef(null);

  const statusOptions = [
    "OFF_DUTY",
    "AVAILABLE",
    "ON_MISSION",
    "MAINTENANCE",
  ];

  // 1) Fetch assigned ambulance data & initialize Socket.IO connection
  useEffect(() => {
    const fetchAssignedAmbulance = async () => {
      try {
        const { data } = await axios.get(
          "http://localhost:8089/api/ambulance/assigned",
          { withCredentials: true }
        );
        if (data) {
          setAssignedAmbulance(data);
          setAmbulanceStatus(data.status);
          if (data.latitude != null && data.longitude != null) {
            setLocation({ lat: data.latitude, lng: data.longitude });
          }
          setDestination(data.destination || "");
        }
      } catch (err) {
        console.error(err);
        setAlertMessage("Failed to load ambulance data.");
      }
    };
    fetchAssignedAmbulance();

    // Socket.IO setup
    socketRef.current = io("http://localhost:8089", { withCredentials: true });
    socketRef.current.on("connect", () =>
      console.log("🔌 Nurse socket connected:", socketRef.current.id)
    );

    // Listen for real-time destination updates
    socketRef.current.on("destinationUpdate", (data) => {
      console.log("🏁 Nurse received destinationUpdate:", data);
      setAssignedAmbulance((prev) => {
        if (!prev || prev._id !== data.id) return prev;
        const newDest = `${data.destinationLatitude},${data.destinationLongitude}`;
        return { ...prev, destination: newDest };
      });
    });

    return () => {
      if (locationIntervalRef.current) clearInterval(locationIntervalRef.current);
      socketRef.current.disconnect();
    };
  }, []);

  // 2) Update route & ETA whenever location or ambulance destination changes
  useEffect(() => {
    const updateRoute = async () => {
      if (assignedAmbulance && location && assignedAmbulance.destination) {
        const destCoords = parseDestination(assignedAmbulance.destination);
        if (destCoords) {
          const result = await fetchRoute(
            { lat: location.lat, lng: location.lng },
            { lat: destCoords[0], lng: destCoords[1] }
          );
          if (result) {
            setRoute(result.coordinates);
            setEta(result.duration);
          } else {
            setRoute([]);
            setEta(null);
          }
        } else {
          setRoute([]);
          setEta(null);
        }
      }
    };
    updateRoute();
  }, [assignedAmbulance, location]);

  // 3) Start sharing location at an interval (every 60 seconds)
  const startLocationSharing = () => {
    if (!assignedAmbulance || sharing) return;
    setSharing(true);
    locationIntervalRef.current = setInterval(() => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          ({ coords }) => {
            const { latitude, longitude } = coords;
            // Emit location update
            socketRef.current.emit("locationUpdate", {
              id: assignedAmbulance._id,
              latitude,
              longitude,
              timestamp: new Date().toISOString(),
            });
            setLocation({ lat: latitude, lng: longitude });
            if (mapRef.current) {
              mapRef.current.setView([latitude, longitude], 13);
            }
          },
          (error) => {
            console.error("Geolocation error:", error);
          },
          { enableHighAccuracy: true }
        );
      }
    }, 60000);
  };

  const stopLocationSharing = () => {
    if (locationIntervalRef.current) {
      clearInterval(locationIntervalRef.current);
      setSharing(false);
      setAlertMessage("Location sharing stopped.");
    }
  };

  const viewOnMap = () => {
    if (mapRef.current && location) {
      mapRef.current.flyTo([location.lat, location.lng], 15);
    }
  };

  // 4) Search for a place via Nominatim and update the destination accordingly
  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setAlertMessage("Please enter a place to search.");
      return;
    }
    const coords = await fetchPlaceCoordinates(searchQuery);
    if (coords) {
      setDestination(`${coords.lat},${coords.lng}`);
      setAlertMessage(`Destination set to ${coords.lat},${coords.lng}`);
      if (mapRef.current) {
        mapRef.current.flyTo([coords.lat, coords.lng], 15);
      }
    } else {
      setAlertMessage("Place not found. Please try again.");
    }
  };

  // 5) Save updated destination information to the backend and emit
  const handleSaveDestination = async () => {
    if (!assignedAmbulance) {
      setAlertMessage("No ambulance assigned.");
      return;
    }
    const destCoords = parseDestination(destination);
    if (!destCoords && destination !== "") {
      setAlertMessage("Invalid destination format. Use 'lat,lng'.");
      return;
    }
    try {
      const updatedPayload = { ...assignedAmbulance, destination: destination || null };
      const { data } = await axios.put(
        `http://localhost:8089/api/ambulance/${assignedAmbulance._id}`,
        updatedPayload,
        { withCredentials: true }
      );
      setAssignedAmbulance(data);
      setAlertMessage(
        destination
          ? "Destination updated successfully."
          : "Destination cleared."
      );

      // Emit the new destination over Socket.IO
      if (destCoords) {
        socketRef.current.emit("destinationUpdate", {
          id: data._id,
          destinationLatitude: destCoords[0],
          destinationLongitude: destCoords[1],
        });
      }
    } catch (err) {
      console.error(err);
      setAlertMessage("Failed to update destination.");
    }
  };

  // 6) Update ambulance status
  const updateAmbulanceStatus = async (newStatus) => {
    if (!assignedAmbulance) return;
    try {
      const { data } = await axios.put(
        `http://localhost:8089/api/ambulance/${assignedAmbulance._id}/status`,
        { status: newStatus },
        { withCredentials: true }
      );
      setAssignedAmbulance(data.ambulance || data);
      setAmbulanceStatus(data.ambulance?.status || data.status);
    } catch (err) {
      console.error(err);
    }
  };

  // 7) Send alert message via Socket.IO
  const sendAlertToDoctors = () => {
    if (!alertText.trim()) {
      setAlertMessage("Please type a message.");
      return;
    }
    socketRef.current.emit("alert", {
      message: alertText,
      source: `Ambulance ${assignedAmbulance?._id || "Unknown"}`,
    });
    setAlertMessage("Alert sent!");
    setAlertText("");
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Nurse Dashboard</h1>
      {assignedAmbulance ? (
        <>
          <div className="mb-4">
            <h2 className="text-xl font-semibold">My Assigned Ambulance</h2>
            <p>
              <strong>ID:</strong> {assignedAmbulance._id}
            </p>
            <p>
              <strong>Status:</strong> {ambulanceStatus}
            </p>
            <select
              value={ambulanceStatus}
              onChange={(e) => updateAmbulanceStatus(e.target.value)}
              className="border rounded p-1 mt-2"
            >
              {statusOptions.map((s) => (
                <option key={s} value={s}>
                  {s}
                </option>
              ))}
            </select>
          </div>

          <div className="mb-4">
            <Input
              placeholder="Type your alert message"
              value={alertText}
              onChange={(e) => setAlertText(e.target.value)}
              className="mb-2"
            />
            <Button onClick={sendAlertToDoctors}>
              Send Alert to Doctors
            </Button>
          </div>

          <div className="mb-4 flex space-x-2">
            <Button onClick={startLocationSharing} disabled={sharing}>
              {sharing ? "Sharing Location..." : "Share Location"}
            </Button>
            <Button onClick={stopLocationSharing} disabled={!sharing}>
              Stop Sharing
            </Button>
            <Button onClick={viewOnMap} disabled={!location}>
              View on Map
            </Button>
          </div>

          <div className="mb-4">
            <h3 className="text-lg font-semibold">Set Destination</h3>
            <div className="space-y-2 mt-2">
              <Input
                placeholder='Destination (format: "lat,lng")'
                value={destination}
                onChange={(e) => setDestination(e.target.value)}
              />
              <div className="flex space-x-2">
                <Input
                  placeholder="Search for a place"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
                <Button onClick={handleSearch}>Search</Button>
              </div>
              <Button onClick={handleSaveDestination}>
                {destination ? "Save Destination" : "Clear Destination"}
              </Button>
            </div>
          </div>

          {location ? (
            <>
              {assignedAmbulance.destination && eta && (
                <p className="mb-2 text-lg font-semibold">
                  ETA to destination: {Math.round(eta / 60)} minutes
                </p>
              )}
              <div className="h-96">
                <MapContainer
                  ref={mapRef}
                  center={[location.lat, location.lng]}
                  zoom={13}
                  style={{ height: "100%", width: "100%" }}
                >
                  <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
                  <Marker position={[location.lat, location.lng]}>
                    <Popup>
                      {assignedAmbulance._id} (Status: {ambulanceStatus})
                      {assignedAmbulance.destination && (
                        <>
                          <br />
                          Destination: {assignedAmbulance.destination}
                          {eta && (
                            <>
                              <br />ETA: {Math.round(eta / 60)} mins
                            </>
                          )}
                        </>
                      )}
                    </Popup>
                  </Marker>
                  {assignedAmbulance.destination &&
                    (() => {
                      const destCoords = parseDestination(
                        assignedAmbulance.destination
                      );
                      return destCoords ? (
                        <Marker position={destCoords}>
                          <Popup>Destination</Popup>
                        </Marker>
                      ) : null;
                    })()}
                  {route.length > 0 && <Polyline positions={route} />}
                </MapContainer>
              </div>
            </>
          ) : (
            <p>Loading location...</p>
          )}
        </>
      ) : (
        <p>You are not currently assigned to an ambulance.</p>
      )}

      {alertMessage && <p className="mt-4 text-red-500">{alertMessage}</p>}
    </div>
  );
};

export default NurseDashboard;
</file>

<file path="src/pages/annotation/AnnotationDialog.jsx">
"use client"
import { useState, useEffect } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { MessageSquare, AlertCircle, Check, HelpCircle, AlertTriangle } from "lucide-react"

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"

const AnnotationDialog = ({ isOpen, onClose, patientFileId, onAnnotationAdded, initialPosition = null }) => {
  const [text, setText] = useState("")
  const [type, setType] = useState("comment")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [position, setPosition] = useState(initialPosition || { x: 0, y: 0 })

  useEffect(() => {
    if (initialPosition) {
      setPosition(initialPosition)
    }
  }, [initialPosition])

  const handleSubmit = async () => {
    if (!text.trim()) {
      setError("Veuillez saisir un texte pour l'annotation")
      return
    }

    try {
      setLoading(true)
      setError("")

      const token = Cookies.get("token")
      const response = await axios.post(
        "http://localhost:8089/api/annotations",
        {
          patientFileId,
          text,
          position,
          type,
          color: getColorForType(type),
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      )

      if (onAnnotationAdded) {
        onAnnotationAdded(response.data)
      }

      onClose()
    } catch (err) {
      console.error("Erreur lors de la création de l'annotation:", err)
      setError(err.response?.data?.message || "Erreur lors de la création de l'annotation")
    } finally {
      setLoading(false)
    }
  }

  const getColorForType = (annotationType) => {
    switch (annotationType) {
      case "comment":
        return "#FFD700" // Gold
      case "highlight":
        return "#90EE90" // Light green
      case "warning":
        return "#FF6347" // Tomato
      case "question":
        return "#87CEFA" // Light sky blue
      default:
        return "#FFD700" // Default gold
    }
  }

  const getIconForType = (annotationType) => {
    switch (annotationType) {
      case "comment":
        return <MessageSquare className="h-4 w-4" />
      case "highlight":
        return <Check className="h-4 w-4" />
      case "warning":
        return <AlertTriangle className="h-4 w-4" />
      case "question":
        return <HelpCircle className="h-4 w-4" />
      default:
        return <MessageSquare className="h-4 w-4" />
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Ajouter une annotation</DialogTitle>
        </DialogHeader>

        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
            <Label htmlFor="annotation-text">Texte de l'annotation</Label>
            <Textarea
              id="annotation-text"
              placeholder="Saisissez votre annotation ici..."
              value={text}
              onChange={(e) => setText(e.target.value)}
              rows={4}
            />
          </div>

          <div className="grid gap-2">
            <Label>Type d'annotation</Label>
            <RadioGroup value={type} onValueChange={setType} className="grid grid-cols-2 gap-2">
              <div className="flex items-center space-x-2 border rounded-md p-2">
                <RadioGroupItem value="comment" id="comment" />
                <Label htmlFor="comment" className="flex items-center cursor-pointer">
                  <MessageSquare className="h-4 w-4 mr-2 text-yellow-500" />
                  Commentaire
                </Label>
              </div>
              <div className="flex items-center space-x-2 border rounded-md p-2">
                <RadioGroupItem value="highlight" id="highlight" />
                <Label htmlFor="highlight" className="flex items-center cursor-pointer">
                  <Check className="h-4 w-4 mr-2 text-green-500" />
                  Point important
                </Label>
              </div>
              <div className="flex items-center space-x-2 border rounded-md p-2">
                <RadioGroupItem value="warning" id="warning" />
                <Label htmlFor="warning" className="flex items-center cursor-pointer">
                  <AlertTriangle className="h-4 w-4 mr-2 text-red-500" />
                  Avertissement
                </Label>
              </div>
              <div className="flex items-center space-x-2 border rounded-md p-2">
                <RadioGroupItem value="question" id="question" />
                <Label htmlFor="question" className="flex items-center cursor-pointer">
                  <HelpCircle className="h-4 w-4 mr-2 text-blue-500" />
                  Question
                </Label>
              </div>
            </RadioGroup>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Annuler
          </Button>
          <Button onClick={handleSubmit} disabled={loading}>
            {loading ? "Création..." : "Ajouter l'annotation"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

export default AnnotationDialog
</file>

<file path="src/pages/annotation/AnnotationList.jsx">
"use client"
import { useState, useEffect } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { MessageSquare, AlertCircle, Check, HelpCircle, AlertTriangle, Trash2, Edit, X } from "lucide-react"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Textarea } from "@/components/ui/textarea"
import { Skeleton } from "@/components/ui/skeleton"

const AnnotationList = ({ patientFileId, onAnnotationDeleted, onAnnotationUpdated }) => {
  const [annotations, setAnnotations] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const [editingId, setEditingId] = useState(null)
  const [editText, setEditText] = useState("")

  useEffect(() => {
    fetchAnnotations()
  }, [patientFileId])

  const fetchAnnotations = async () => {
    try {
      setLoading(true)
      setError("")

      const token = Cookies.get("token")
      const response = await axios.get(`http://localhost:8089/api/annotations/file/${patientFileId}`, {
        headers: { Authorization: `Bearer ${token}` },
      })

      setAnnotations(response.data)
    } catch (err) {
      console.error("Erreur lors de la récupération des annotations:", err)
      setError(err.response?.data?.message || "Erreur lors de la récupération des annotations")
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id) => {
    try {
      const token = Cookies.get("token")
      await axios.delete(`http://localhost:8089/api/annotations/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      })

      setAnnotations(annotations.filter((annotation) => annotation._id !== id))

      if (onAnnotationDeleted) {
        onAnnotationDeleted(id)
      }
    } catch (err) {
      console.error("Erreur lors de la suppression de l'annotation:", err)
      setError(err.response?.data?.message || "Erreur lors de la suppression de l'annotation")
    }
  }

  const startEditing = (annotation) => {
    setEditingId(annotation._id)
    setEditText(annotation.text)
  }

  const cancelEditing = () => {
    setEditingId(null)
    setEditText("")
  }

  const saveEdit = async (id) => {
    try {
      const token = Cookies.get("token")
      const response = await axios.put(
        `http://localhost:8089/api/annotations/${id}`,
        { text: editText },
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      )

      setAnnotations(annotations.map((annotation) => (annotation._id === id ? response.data : annotation)))

      if (onAnnotationUpdated) {
        onAnnotationUpdated(response.data)
      }

      setEditingId(null)
    } catch (err) {
      console.error("Erreur lors de la mise à jour de l'annotation:", err)
      setError(err.response?.data?.message || "Erreur lors de la mise à jour de l'annotation")
    }
  }

  const toggleResolved = async (annotation) => {
    try {
      const token = Cookies.get("token")
      const response = await axios.put(
        `http://localhost:8089/api/annotations/${annotation._id}`,
        { isResolved: !annotation.isResolved },
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      )

      setAnnotations(annotations.map((a) => (a._id === annotation._id ? response.data : a)))

      if (onAnnotationUpdated) {
        onAnnotationUpdated(response.data)
      }
    } catch (err) {
      console.error("Erreur lors de la mise à jour de l'annotation:", err)
      setError(err.response?.data?.message || "Erreur lors de la mise à jour de l'annotation")
    }
  }

  const getIconForType = (type) => {
    switch (type) {
      case "comment":
        return <MessageSquare className="h-4 w-4 text-yellow-500" />
      case "highlight":
        return <Check className="h-4 w-4 text-green-500" />
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-red-500" />
      case "question":
        return <HelpCircle className="h-4 w-4 text-blue-500" />
      default:
        return <MessageSquare className="h-4 w-4 text-yellow-500" />
    }
  }

  const getTypeLabel = (type) => {
    switch (type) {
      case "comment":
        return "Commentaire"
      case "highlight":
        return "Point important"
      case "warning":
        return "Avertissement"
      case "question":
        return "Question"
      default:
        return "Commentaire"
    }
  }

  if (loading) {
    return (
      <div className="space-y-3">
        <Skeleton className="h-6 w-[200px]" />
        {[1, 2, 3].map((i) => (
          <Card key={i} className="mb-3">
            <CardHeader className="pb-2">
              <div className="flex justify-between">
                <Skeleton className="h-5 w-[150px]" />
                <Skeleton className="h-5 w-[100px]" />
              </div>
            </CardHeader>
            <CardContent>
              <Skeleton className="h-4 w-full mb-2" />
              <Skeleton className="h-4 w-3/4" />
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }

  if (annotations.length === 0) {
    return (
      <div className="text-center py-6 border rounded-md bg-slate-50">
        <MessageSquare className="h-8 w-8 text-slate-400 mx-auto mb-2" />
        <p className="text-slate-600">Aucune annotation pour ce document</p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <h3 className="font-medium text-lg flex items-center">
        <MessageSquare className="h-5 w-5 mr-2 text-slate-600" />
        Annotations ({annotations.length})
      </h3>

      <div className="space-y-3">
        {annotations.map((annotation) => (
          <Card
            key={annotation._id}
            className={`border-l-4 ${
              annotation.isResolved ? "border-l-green-500 bg-green-50" : `border-l-${getColorClass(annotation.type)}`
            }`}
          >
            <CardHeader className="pb-2">
              <div className="flex justify-between items-start">
                <div className="flex items-center">
                  {getIconForType(annotation.type)}
                  <CardTitle className="text-sm ml-2 font-medium">
                    {annotation.authorId?.username || "Utilisateur"}{" "}
                    <span className="text-slate-500 font-normal">
                      • {new Date(annotation.createdAt).toLocaleDateString()}
                    </span>
                  </CardTitle>
                </div>
                <div className="flex items-center space-x-1">
                  {annotation.isResolved && (
                    <Badge variant="outline" className="bg-green-100 text-green-800 border-green-200">
                      <Check className="h-3 w-3 mr-1" />
                      Résolu
                    </Badge>
                  )}
                  <Badge variant="outline" className={getBadgeClass(annotation.type)}>
                    {getTypeLabel(annotation.type)}
                  </Badge>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {editingId === annotation._id ? (
                <div className="space-y-2">
                  <Textarea
                    value={editText}
                    onChange={(e) => setEditText(e.target.value)}
                    rows={3}
                    className="resize-none"
                  />
                  <div className="flex justify-end space-x-2">
                    <Button variant="outline" size="sm" onClick={cancelEditing}>
                      <X className="h-4 w-4 mr-1" />
                      Annuler
                    </Button>
                    <Button size="sm" onClick={() => saveEdit(annotation._id)}>
                      <Check className="h-4 w-4 mr-1" />
                      Enregistrer
                    </Button>
                  </div>
                </div>
              ) : (
                <div>
                  <p className="text-sm">{annotation.text}</p>
                  <div className="flex justify-end mt-2 space-x-1">
                    <Button variant="ghost" size="sm" className="h-7 px-2" onClick={() => toggleResolved(annotation)}>
                      {annotation.isResolved ? (
                        <>
                          <X className="h-3.5 w-3.5 mr-1" />
                          Rouvrir
                        </>
                      ) : (
                        <>
                          <Check className="h-3.5 w-3.5 mr-1" />
                          Résoudre
                        </>
                      )}
                    </Button>
                    <Button variant="ghost" size="sm" className="h-7 px-2" onClick={() => startEditing(annotation)}>
                      <Edit className="h-3.5 w-3.5 mr-1" />
                      Modifier
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-7 px-2 text-red-500 hover:text-red-700 hover:bg-red-50"
                      onClick={() => handleDelete(annotation._id)}
                    >
                      <Trash2 className="h-3.5 w-3.5 mr-1" />
                      Supprimer
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}

const getColorClass = (type) => {
  switch (type) {
    case "comment":
      return "yellow-500"
    case "highlight":
      return "green-500"
    case "warning":
      return "red-500"
    case "question":
      return "blue-500"
    default:
      return "yellow-500"
  }
}

const getBadgeClass = (type) => {
  switch (type) {
    case "comment":
      return "bg-yellow-100 text-yellow-800 border-yellow-200"
    case "highlight":
      return "bg-green-100 text-green-800 border-green-200"
    case "warning":
      return "bg-red-100 text-red-800 border-red-200"
    case "question":
      return "bg-blue-100 text-blue-800 border-blue-200"
    default:
      return "bg-yellow-100 text-yellow-800 border-yellow-200"
  }
}

export default AnnotationList
</file>

<file path="src/pages/annotation/AnnotationMarker.jsx">
"use client"
import { useState } from "react"
import { MessageSquare, AlertTriangle, Check, HelpCircle } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

const AnnotationMarker = ({ annotation, onClick }) => {
  const [isHovered, setIsHovered] = useState(false)

  const getIcon = () => {
    switch (annotation.type) {
      case "comment":
        return <MessageSquare className="h-4 w-4" />
      case "highlight":
        return <Check className="h-4 w-4" />
      case "warning":
        return <AlertTriangle className="h-4 w-4" />
      case "question":
        return <HelpCircle className="h-4 w-4" />
      default:
        return <MessageSquare className="h-4 w-4" />
    }
  }

  const getBackgroundColor = () => {
    if (annotation.isResolved) {
      return "bg-green-500 hover:bg-green-600"
    }

    switch (annotation.type) {
      case "comment":
        return "bg-yellow-500 hover:bg-yellow-600"
      case "highlight":
        return "bg-green-500 hover:bg-green-600"
      case "warning":
        return "bg-red-500 hover:bg-red-600"
      case "question":
        return "bg-blue-500 hover:bg-blue-600"
      default:
        return "bg-yellow-500 hover:bg-yellow-600"
    }
  }

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <div
            className={`absolute cursor-pointer rounded-full p-1.5 text-white ${getBackgroundColor()} transition-all ${
              isHovered ? "scale-110" : ""
            }`}
            style={{
              left: `${annotation.position.x}%`,
              top: `${annotation.position.y}%`,
              transform: "translate(-50%, -50%)",
              zIndex: 10,
            }}
            onClick={() => onClick(annotation)}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
          >
            {getIcon()}
          </div>
        </TooltipTrigger>
        <TooltipContent side="right">
          <div className="max-w-xs">
            <p className="font-medium text-xs">{annotation.authorId?.username || "Utilisateur"}</p>
            <p className="text-xs truncate">{annotation.text}</p>
          </div>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
}

export default AnnotationMarker
</file>

<file path="src/pages/archive/ArchivedFilesList.jsx">
"use client"
import { useState, useEffect } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { useNavigate } from "react-router-dom"
import { Archive, AlertCircle, FileText, User, RotateCcw, Eye, Search, Calendar } from "lucide-react"

import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import RestoreDialog from "./RestoreDialog"

const ArchivedFilesList = ({ medicalRecordId }) => {
  const [archivedFiles, setArchivedFiles] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const [searchTerm, setSearchTerm] = useState("")
  const [fileTypeFilter, setFileTypeFilter] = useState("all")
  const [showRestoreDialog, setShowRestoreDialog] = useState(false)
  const [selectedFileId, setSelectedFileId] = useState(null)
  const navigate = useNavigate()

  useEffect(() => {
    fetchArchivedFiles()
  }, [medicalRecordId])

  const fetchArchivedFiles = async () => {
    try {
      setLoading(true)
      setError("")

      const token = Cookies.get("token")
      const response = await axios.get(
        `http://localhost:8089/api/archive/medical-records/${medicalRecordId}/archived`,
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      )

      setArchivedFiles(response.data)
    } catch (err) {
      console.error("Erreur lors de la récupération des documents archivés:", err)
      setError(err.response?.data?.message || "Erreur lors de la récupération des documents archivés")
    } finally {
      setLoading(false)
    }
  }

  const handleRestore = (fileId) => {
    setSelectedFileId(fileId)
    setShowRestoreDialog(true)
  }

  const handleFileRestored = (restoredFile) => {
    setArchivedFiles(archivedFiles.filter((file) => file._id !== restoredFile._id))
  }

  const getFileIcon = (fileType) => {
    switch (fileType) {
      case "Prescription":
        return <FileText className="h-5 w-5 text-emerald-500" />
      case "Diagnostic":
        return <FileText className="h-5 w-5 text-violet-500" />
      case "Treatment":
        return <FileText className="h-5 w-5 text-amber-500" />
      case "VitalSigns":
        return <FileText className="h-5 w-5 text-rose-500" />
      case "Triage":
        return <FileText className="h-5 w-5 text-orange-500" />
      case "Discharge":
        return <FileText className="h-5 w-5 text-sky-500" />
      case "PatientInformation":
        return <FileText className="h-5 w-5 text-slate-500" />
      default:
        return <FileText className="h-5 w-5 text-slate-500" />
    }
  }

  const filteredFiles = archivedFiles.filter((file) => {
    const matchesSearch =
      file.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (file.notes && file.notes.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (file.archiveReason && file.archiveReason.toLowerCase().includes(searchTerm.toLowerCase()))

    const matchesType = fileTypeFilter === "all" || file.type === fileTypeFilter

    return matchesSearch && matchesType
  })

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <Skeleton className="h-8 w-[200px]" />
          <Skeleton className="h-10 w-[150px]" />
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[1, 2, 3].map((i) => (
            <Card key={i} className="overflow-hidden">
              <CardHeader className="pb-2">
                <Skeleton className="h-6 w-[180px]" />
              </CardHeader>
              <CardContent className="pb-2">
                <div className="space-y-2">
                  <Skeleton className="h-4 w-[150px]" />
                  <Skeleton className="h-4 w-[200px]" />
                  <Skeleton className="h-4 w-[170px]" />
                </div>
              </CardContent>
              <CardFooter>
                <Skeleton className="h-10 w-full" />
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }

  if (archivedFiles.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg border">
        <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-slate-100 mb-4">
          <Archive className="h-8 w-8 text-slate-400" />
        </div>
        <h3 className="text-lg font-medium text-slate-900">Aucun document archivé</h3>
        <p className="text-slate-500 mt-1 max-w-md mx-auto">
          Ce dossier médical ne contient pas de documents archivés.
        </p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <h3 className="text-xl font-semibold text-slate-800 flex items-center">
          <Archive className="mr-2 h-5 w-5 text-slate-600" />
          Documents Archivés ({archivedFiles.length})
        </h3>

        <div className="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-slate-500" />
            <Input
              type="search"
              placeholder="Rechercher..."
              className="pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <Select value={fileTypeFilter} onValueChange={setFileTypeFilter}>
            <SelectTrigger className="w-full sm:w-40">
              <SelectValue placeholder="Type de document" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">Tous les types</SelectItem>
              <SelectItem value="Prescription">Prescription</SelectItem>
              <SelectItem value="Diagnostic">Diagnostic</SelectItem>
              <SelectItem value="Treatment">Traitement</SelectItem>
              <SelectItem value="VitalSigns">Signes vitaux</SelectItem>
              <SelectItem value="Triage">Triage</SelectItem>
              <SelectItem value="Discharge">Sortie</SelectItem>
              <SelectItem value="PatientInformation">Info patient</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {filteredFiles.length === 0 ? (
        <Alert className="bg-slate-50">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>Aucun document ne correspond à votre recherche.</AlertDescription>
        </Alert>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {filteredFiles.map((file) => (
            <Card
              key={file._id}
              className="overflow-hidden border-l-4 border-l-slate-400 hover:shadow-md transition-shadow"
            >
              <CardHeader className="pb-2">
                <CardTitle className="flex items-center text-lg">
                  {getFileIcon(file.type)}
                  <span className="ml-2">{file.type}</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="pb-2">
                <div className="space-y-2 text-sm">
                  <div className="flex items-center">
                    <Calendar className="h-4 w-4 mr-2 text-slate-500" />
                    <span className="font-medium">Archivé le:</span>
                    <span className="ml-1 text-slate-600">{new Date(file.archivedAt).toLocaleDateString()}</span>
                  </div>

                  {file.archivedBy && (
                    <div className="flex items-center">
                      <User className="h-4 w-4 mr-2 text-slate-500" />
                      <span className="font-medium">Archivé par:</span>
                      <span className="ml-1 text-slate-600">{file.archivedBy.username || "Utilisateur"}</span>
                    </div>
                  )}

                  {file.archiveReason && (
                    <div className="bg-slate-50 p-2 rounded-md border border-slate-200">
                      <span className="font-medium text-xs text-slate-700">Raison:</span>
                      <p className="text-xs text-slate-600 mt-1">{file.archiveReason}</p>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter className="pt-2 flex gap-2">
                <Button variant="outline" className="flex-1" onClick={() => handleRestore(file._id)}>
                  <RotateCcw className="h-4 w-4 mr-2" />
                  Restaurer
                </Button>
                <Button variant="secondary" className="flex-1" onClick={() => navigate(`/patient-files/${file._id}`)}>
                  <Eye className="h-4 w-4 mr-2" />
                  Consulter
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}

      {showRestoreDialog && (
        <RestoreDialog
          isOpen={showRestoreDialog}
          onClose={() => setShowRestoreDialog(false)}
          patientFileId={selectedFileId}
          onFileRestored={handleFileRestored}
        />
      )}
    </div>
  )
}

export default ArchivedFilesList
</file>

<file path="src/pages/archive/ArchiveDialog.jsx">
"use client"
import { useState } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { AlertCircle } from "lucide-react"

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"

const ArchiveDialog = ({ isOpen, onClose, patientFileId, onFileArchived }) => {
  const [reason, setReason] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")

  const handleArchive = async () => {
    try {
      setLoading(true)
      setError("")

      const token = Cookies.get("token")
      const response = await axios.put(
        `http://localhost:8089/api/archive/patient-files/${patientFileId}/archive`,
        { reason: reason.trim() || "Document archivé" },
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      )

      if (onFileArchived) {
        onFileArchived(response.data.patientFile)
      }

      onClose()
    } catch (err) {
      console.error("Erreur lors de l'archivage du document:", err)
      setError(err.response?.data?.message || "Erreur lors de l'archivage du document")
    } finally {
      setLoading(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Archiver le document médical</DialogTitle>
        </DialogHeader>

        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
            <Label htmlFor="archive-reason">Raison de l'archivage (optionnel)</Label>
            <Textarea
              id="archive-reason"
              placeholder="Indiquez la raison pour laquelle vous archivez ce document..."
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              rows={3}
            />
          </div>

          <Alert variant="warning" className="bg-amber-50 border-amber-200 text-amber-800">
            <AlertCircle className="h-4 w-4 text-amber-800" />
            <AlertDescription>
              Les documents archivés seront déplacés dans une section séparée mais resteront accessibles si nécessaire.
            </AlertDescription>
          </Alert>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Annuler
          </Button>
          <Button
            variant="default"
            onClick={handleArchive}
            disabled={loading}
            className="bg-amber-600 hover:bg-amber-700"
          >
            {loading ? "Archivage..." : "Archiver le document"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

export default ArchiveDialog
</file>

<file path="src/pages/archive/RestoreDialog.jsx">
"use client"
import { useState } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { AlertCircle } from "lucide-react"

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"

const RestoreDialog = ({ isOpen, onClose, patientFileId, onFileRestored }) => {
  const [reason, setReason] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")

  const handleRestore = async () => {
    try {
      setLoading(true)
      setError("")

      const token = Cookies.get("token")
      const response = await axios.put(
        `http://localhost:8089/api/archive/patient-files/${patientFileId}/restore`,
        { reason: reason.trim() || "Document restauré" },
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      )

      if (onFileRestored) {
        onFileRestored(response.data.patientFile)
      }

      onClose()
    } catch (err) {
      console.error("Erreur lors de la restauration du document:", err)
      setError(err.response?.data?.message || "Erreur lors de la restauration du document")
    } finally {
      setLoading(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Restaurer le document médical</DialogTitle>
        </DialogHeader>

        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
            <Label htmlFor="restore-reason">Raison de la restauration (optionnel)</Label>
            <Textarea
              id="restore-reason"
              placeholder="Indiquez la raison pour laquelle vous restaurez ce document..."
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              rows={3}
            />
          </div>

          <Alert className="bg-blue-50 border-blue-200 text-blue-800">
            <AlertCircle className="h-4 w-4 text-blue-800" />
            <AlertDescription>
              Le document sera restauré et à nouveau disponible dans la liste principale des documents.
            </AlertDescription>
          </Alert>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Annuler
          </Button>
          <Button variant="default" onClick={handleRestore} disabled={loading}>
            {loading ? "Restauration..." : "Restaurer le document"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

export default RestoreDialog
</file>

<file path="src/pages/Calendar.jsx">
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar as CalendarIcon, Clock, User, Loader2 } from "lucide-react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import axios from "axios";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

const CalendarComponent = () => {
    const [selectedDate, setSelectedDate] = useState(new Date());
    const [emergencyRegistrations, setEmergencyRegistrations] = useState([]);
    const [loadingRegistrations, setLoadingRegistrations] = useState(true);

    useEffect(() => {
        const fetchEmergencyRegistrations = async () => {
            setLoadingRegistrations(true);
            try {
                const response = await axios.get("http://localhost:8089/api/emergency-patients", {
                    withCredentials: true,
                });

                console.log("Raw Response Data:", response.data);

                const formattedRegistrations = response.data.map(reg => {
                    let appointmentDate = reg.createdAt ? new Date(reg.createdAt) : null;

                    if (isNaN(appointmentDate.getTime())) {
                        console.warn("Date invalide détectée pour:", reg);
                        appointmentDate = new Date();
                    }

                    return {
                        id: reg._id,
                        patientName: `${reg.firstName} ${reg.lastName} (Urgence - Statut: ${reg.status})`,
                        doctorName: "Urgence",
                        date: appointmentDate,
                        time: appointmentDate.toLocaleTimeString(),
                        type: `Demande d'Urgence - Statut: ${reg.status}`,
                        isEmergency: true,
                        originalData: reg,
                        status: reg.status
                    };
                });

                console.log("Formatted Registrations:", formattedRegistrations);
                setEmergencyRegistrations(formattedRegistrations);
            } catch (error) {
                console.error("Erreur lors de la récupération des enregistrements d'urgence:", error);
                toast.error("Erreur lors du chargement des demandes d'urgence.");
            } finally {
                setLoadingRegistrations(false);
            }
        };

        fetchEmergencyRegistrations();
    }, []);

    useEffect(() => {
        console.log("Emergency Registrations State:", emergencyRegistrations);
    }, [emergencyRegistrations]);

    const handleDateChange = (date) => {
        setSelectedDate(date);
    };

    const getAppointmentsForSelectedDate = () => {
        return emergencyRegistrations;
    };

    const handleStatusChange = async (appointmentId, newStatus) => {
        if (!appointmentId || typeof appointmentId !== "string" || appointmentId.length !== 24) {
            console.error("Invalid appointmentId:", appointmentId);
            toast.error("Impossible de mettre à jour le statut : ID de rendez-vous invalide.");
            return;
        }

        // Map French status to server-expected status
        const statusMap = {
            "Demande Enregistrée": "Demande Enregistrée",
            "En Cours d'Examen": "En Cours d'Examen",
            "Médecin En Route": "Médecin En Route",
            "Traité": "Traité",
            "Annulé": "Annulé"
        };

        const serverStatus = statusMap[newStatus];
        if (!serverStatus) {
            console.error("Invalid status value:", newStatus);
            toast.error("Impossible de mettre à jour le statut : Valeur de statut invalide.");
            return;
        }

        try {
            const payload = { status: serverStatus };
            console.log("Sending PUT request:", { appointmentId, newStatus, serverStatus, payload });

            const response = await axios.put(
                `http://localhost:8089/api/emergency-patients/${appointmentId}/status`,
                payload,
                { withCredentials: true }
            );

            console.log("Status updated:", response.data);
            setEmergencyRegistrations(prevRegistrations =>
                prevRegistrations.map(reg =>
                    reg.id === appointmentId
                        ? { ...reg, status: newStatus, type: `Demande d'Urgence - Statut: ${newStatus}` }
                        : reg
                )
            );

            toast.success("Statut mis à jour avec succès!");
        } catch (error) {
            console.error("Erreur lors de la mise à jour du statut:", error);
            console.error("Server response:", JSON.stringify(error.response?.data, null, 2));
            const errorMessage = error.response?.data?.message || error.response?.data?.error || "Erreur lors de la mise à jour du statut.";
            toast.error("Erreur lors de la mise à jour du statut", { description: errorMessage });
        }
    };

    const getStatusBadgeVariant = (status) => {
        switch (status) {
            case "Demande Enregistrée": return "default";
            case "En Cours d'Examen": return "secondary";
            case "Médecin En Route": return "outline";
            case "Traité": return "success";
            case "Annulé": return "destructive";
            default: return "default";
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-b from-blue-50 to-teal-50 py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-7xl mx-auto">
                <h1 className="text-3xl font-extrabold tracking-tight mb-2" style={{ color: '#42A5FF' }}>Tableau de Bord des Urgences</h1>
                <div className="grid gap-6 lg:grid-cols-[350px_1fr]">
                    <Card className="bg-white/80 backdrop-blur-md shadow-xl rounded-2xl border border-gray-100">
                        <CardHeader>
                            <CardTitle className="text-xl font-semibold text-gray-800">Calendrier</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <div className="calendar-container">
                                <Calendar
                                    onChange={handleDateChange}
                                    value={selectedDate}
                                    className="border-none bg-transparent text-gray-800 font-sans rounded-lg"
                                />
                            </div>
                        </CardContent>
                    </Card>

                    <Card className="bg-white/80 backdrop-blur-md shadow-xl rounded-2xl border border-gray-100">
                        <CardHeader>
                            <CardTitle className="text-xl font-semibold text-gray-800">Demandes d'Urgence Enregistrées</CardTitle>
                        </CardHeader>
                        <CardContent>
                            {loadingRegistrations ? (
                                <div className="flex items-center justify-center py-12">
                                    <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
                                    <span className="ml-2 text-gray-600">Chargement des demandes d'urgence...</span>
                                </div>
                            ) : emergencyRegistrations.length === 0 ? (
                                <div className="text-center py-12 text-gray-500">
                                    <p>Aucune demande d'urgence trouvée.</p>
                                </div>
                            ) : (
                                <div className="space-y-4 max-h-[600px] overflow-y-auto pr-2">
                                    {emergencyRegistrations.map((appointment) => (
                                        <div
                                            key={appointment.id}
                                            className="flex items-center justify-between p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300 border-l-4 border-red-500"
                                        >
                                            <div className="space-y-2">
                                                <div className="flex items-center gap-2">
                                                    <User className="h-5 w-5 text-gray-600" />
                                                    <span className="font-medium text-gray-800">{appointment.patientName}</span>
                                                </div>
                                                <div className="flex items-center gap-3 text-sm text-gray-500">
                                                    <CalendarIcon className="h-4 w-4" />
                                                    <span>{appointment.date.toLocaleDateString()}</span>
                                                    <Clock className="h-4 w-4" />
                                                    <span>{appointment.time}</span>
                                                </div>
                                            </div>
                                            <div className="flex items-center gap-4">
                                                <TooltipProvider>
                                                    <Tooltip>
                                                        <TooltipTrigger>
                                                            <Badge
                                                                variant={getStatusBadgeVariant(appointment.status)}
                                                                className="text-xs font-medium"
                                                            >
                                                                {appointment.status}
                                                            </Badge>
                                                        </TooltipTrigger>
                                                        <TooltipContent>Statut Actuel</TooltipContent>
                                                    </Tooltip>
                                                </TooltipProvider>

                                                <Select
                                                    onValueChange={(value) => handleStatusChange(appointment.id, value)}
                                                    defaultValue={appointment.status}
                                                >
                                                    <SelectTrigger className="w-[200px] rounded-md border-gray-200 shadow-sm hover:border-blue-300">
                                                        <SelectValue placeholder="Statut" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        <SelectItem value="Demande Enregistrée">Demande Enregistrée</SelectItem>
                                                        <SelectItem value="En Cours d'Examen">En Cours d'Examen</SelectItem>
                                                        <SelectItem value="Médecin En Route">Médecin En Route</SelectItem>
                                                        <SelectItem value="Traité">Traité</SelectItem>
                                                        <SelectItem value="Annulé">Annulé</SelectItem>
                                                    </SelectContent>
                                                </Select>

                                                <Button
                                                    size="sm"
                                                    variant="outline"
                                                    className="rounded-md border-blue-200 text-blue-600 hover:bg-blue-50 transition-colors"
                                                >
                                                    Détails
                                                </Button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </CardContent>
                    </Card>
                </div>
            </div>

            <style jsx>{`
                .calendar-container .react-calendar {
                    border: none !important;
                    background: transparent !important;
                    font-family: 'Inter', sans-serif !important;
                }
                .calendar-container .react-calendar__tile {
                    padding: 12px !important;
                    border-radius: 8px !important;
                    transition: background 0.2s, transform 0.2s !important;
                }
                .calendar-container .react-calendar__tile:hover {
                    background: #e0f2fe !important;
                    transform: scale(1.05) !important;
                }
                .calendar-container .react-calendar__tile--active {
                    background: #3b82f6 !important;
                    color: white !important;
                }
                .calendar-container .react-calendar__month-view__days__day--weekend {
                    color: #ef4444 !important;
                }
                .calendar-container .react-calendar__navigation button {
                    font-size: 1rem !important;
                    font-weight: 600 !important;
                    color: #1f2937 !important;
                    padding: 8px !important;
                }
                .calendar-container .react-calendar__navigation button:hover {
                    background: #f3f4f6 !important;
                    border-radius: 8px !important;
                }
            `}</style>
        </div>
    );
};

export default CalendarComponent;
</file>

<file path="src/pages/ConfirmationEmergencyRegister.jsx">
import React, { useState, useEffect } from 'react';
import { useLocation, Link, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { AlertTriangle, CheckCircle, Clock, User, Stethoscope } from "lucide-react";
import axios from 'axios';

const ConfirmationEmergencyRegister = () => {
    const location = useLocation();
    const navigate = useNavigate();

    // Récupération des données depuis l'état de la navigation
    const formData = location.state?.formData;
    const patientId = location.state?.patientId;
    const patientCode = location.state?.patientCode;
    const initialAssignedDoctor = location.state?.assignedDoctor; // Peut être un ID ou un objet

    // États pour les données récupérées et l'UI
    const [estimatedWaitTime, setEstimatedWaitTime] = useState('Calcul en cours...');
    const [doctorInfo, setDoctorInfo] = useState(null); // Pour stocker les détails complets
    const [loadingWaitTime, setLoadingWaitTime] = useState(true);
    const [errorWaitTime, setErrorWaitTime] = useState(null);
    const [loadingDoctor, setLoadingDoctor] = useState(false);

    // Effet pour récupérer le temps d'attente estimé et les détails du médecin assigné
    useEffect(() => {
        const fetchWaitTime = async () => {
            if (!patientId) return;
            setLoadingWaitTime(true);
            setErrorWaitTime(null);
            try {
                const response = await axios.get(`http://localhost:8089/api/emergency-patients/${patientId}/estimated-wait-time`, { withCredentials: true });
                setEstimatedWaitTime(response.data.estimatedWaitTime || "Indisponible");
            } catch (error) {
                console.error("Erreur récupération temps d'attente:", error);
                setEstimatedWaitTime("Estimation indisponible");
                setErrorWaitTime("Impossible de récupérer l'estimation du temps d'attente.");
            } finally {
                setLoadingWaitTime(false);
            }
        };

        const fetchDoctorDetails = async () => {
            if (initialAssignedDoctor && typeof initialAssignedDoctor === 'object' && initialAssignedDoctor !== null) {
                // Si l'objet docteur complet est déjà disponible depuis la navigation
                setDoctorInfo(initialAssignedDoctor);
            } else if (initialAssignedDoctor && typeof initialAssignedDoctor === 'string') {
                // Si seul l'ID du docteur est disponible, fetcher les détails
                setLoadingDoctor(true);
                try {
                    // Assurez-vous que la route /api/users/:id existe et renvoie les détails de l'utilisateur
                    const response = await axios.get(`http://localhost:8089/api/users/${initialAssignedDoctor}`, { withCredentials: true });
                    setDoctorInfo(response.data);
                } catch (error) {
                    console.error("Erreur récupération détails médecin:", error);
                    // Fallback si l'appel échoue
                    setDoctorInfo({ username: 'Information Indisponible', specialization: 'N/A', email: 'N/A', _id: initialAssignedDoctor });
                } finally {
                    setLoadingDoctor(false);
                }
            } else {
                // Aucun médecin assigné initialement
                setDoctorInfo(null);
            }
        };

        if (patientId) {
            fetchWaitTime();
            fetchDoctorDetails();
        } else {
            console.error("ID Patient manquant dans location.state pour ConfirmationEmergencyRegister.");
            setLoadingWaitTime(false); // S'assurer que les chargements sont arrêtés
            setLoadingDoctor(false);
        }
    }, [patientId, initialAssignedDoctor]); // Dépendances de l'effet

    // --- DÉFINITION DE LA FONCTION handleTrackStatusClick ---
    const handleTrackStatusClick = () => {
        // Log pour vérifier les données avant la navigation
        console.log("Navigating to /emergency-status with state:", {
            patientId,
            patientCode,
            doctorInfo // `doctorInfo` est l'état local, mis à jour par useEffect
        });
        navigate('/emergency-status', {
            state: {
                patientId,
                patientCode,
                doctorInfo // Utiliser l'état `doctorInfo` qui a été mis à jour
            }
        });
    };
    // --- FIN DÉFINITION ---

    // Gestion de l'erreur si les données initiales (formData ou patientId) manquent
    if (!formData || !patientId) {
        return (
            <div className="min-h-screen bg-gray-100 flex items-center justify-center pt-24 pb-12 px-4 sm:px-6 lg:px-8">
                <Card className="max-w-md w-full shadow-lg rounded-2xl border border-red-200 bg-white transition-all duration-300 hover:shadow-xl">
                    <CardHeader className="bg-red-50 rounded-t-2xl py-6 px-6">
                        <CardTitle className="text-red-700 flex items-center justify-center text-2xl font-semibold">
                            <AlertTriangle className="mr-2 h-6 w-6" />
                            Erreur de Confirmation
                        </CardTitle>
                    </CardHeader>
                    <CardContent className="p-6 space-y-6">
                        <p className="text-gray-600 text-center text-base">Les informations de confirmation n'ont pas pu être trouvées. Veuillez réessayer votre enregistrement.</p>
                        <div className="flex justify-center space-x-4">
                            <Button asChild variant="outline" className="rounded-lg">
                                <Link to="/home">Retour à l'Accueil</Link>
                            </Button>
                            <Button asChild className="bg-red-600 text-white hover:bg-red-700 rounded-lg">
                                <Link to="/emergency-register">Nouvelle Demande</Link>
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        );
    }

    // Rendu JSX principal
    return (
        <div className="min-h-screen bg-gray-100 pt-24 pb-12 px-4 sm:px-6 lg:px-8">
            <Card className="max-w-4xl mx-auto shadow-xl rounded-2xl border border-gray-200 bg-white overflow-hidden transition-all duration-300 hover:shadow-2xl">
                <CardHeader className="bg-gradient-to-r from-sky-500 to-sky-700 text-white py-8 px-6">
                    <CardTitle className="text-3xl font-bold flex items-center">
                        <CheckCircle className="mr-3 h-8 w-8 text-green-300" />
                        Demande d'Urgence Enregistrée
                    </CardTitle>
                    <CardDescription className="text-sky-100 text-lg mt-2">
                        Votre demande a été soumise avec succès. Voici un résumé des informations.
                    </CardDescription>
                </CardHeader>

                <CardContent className="p-8 grid gap-8">
                    {/* Section Informations Personnelles */}
                    <div className="bg-teal-50 rounded-xl p-6 shadow-sm border border-teal-100">
                        <h4 className="text-lg font-semibold text-teal-900 mb-4">Informations Personnelles</h4>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm text-gray-700">
                            <p><span className="font-medium">Nom:</span> {formData.firstName} {formData.lastName}</p>
                            <p><span className="font-medium">Né(e) le:</span> {formData.dateOfBirth ? new Date(formData.dateOfBirth).toLocaleDateString('fr-FR') : 'N/A'}</p>
                            <p><span className="font-medium">Genre:</span> {formData.gender}</p>
                            <p><span className="font-medium">Téléphone:</span> {formData.phoneNumber}</p>
                            {formData.email && <p><span className="font-medium">Email:</span> {formData.email}</p>}
                            <p className="sm:col-span-2"><span className="font-medium">Adresse:</span> {formData.address}</p>
                            <p className="sm:col-span-2"><span className="font-medium">Contact d'Urgence:</span> {formData.emergencyContact}</p>
                        </div>
                    </div>

                    {/* Section Informations Médicales */}
                    <div className="bg-amber-50 rounded-xl p-6 shadow-sm border border-amber-100">
                        <h4 className="text-lg font-semibold text-amber-900 mb-4">Informations Médicales</h4>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm text-gray-700">
                            {formData.insuranceInfo && <p><span className="font-medium">Assurance:</span> {formData.insuranceInfo}</p>}
                            {formData.allergies && <p><span className="font-medium">Allergies:</span> {formData.allergies}</p>}
                            {formData.currentMedications && <p><span className="font-medium">Médicaments Actuels:</span> {formData.currentMedications}</p>}
                            {formData.medicalHistory && <p><span className="font-medium">Antécédents Médicaux:</span> {formData.medicalHistory}</p>}
                            <p className="sm:col-span-2"><span className="font-medium">Symptômes Actuels:</span> {formData.currentSymptoms}</p>
                            <p><span className="font-medium">Niveau de Douleur:</span> {formData.painLevel}/10</p>
                            <p><span className="font-medium">Niveau d'Urgence:</span> {formData.emergencyLevel}</p>
                        </div>
                    </div>

                    {/* Section Prochaines Étapes */}
                    <div className="bg-blue-50 rounded-xl p-6 shadow-sm border border-blue-100">
                        <h4 className="text-lg font-semibold text-blue-800 mb-4 flex items-center">
                            <AlertTriangle className="mr-2 h-5 w-5 text-blue-600" /> Prochaines Étapes
                        </h4>
                        <div className="space-y-3 text-gray-700 text-sm">
                            <p className="flex items-center">
                                <Clock className="mr-2 h-4 w-4 text-blue-600 flex-shrink-0" />
                                <strong className="w-40">Temps d'attente estimé:</strong>
                                <span className={`font-semibold ${loadingWaitTime ? 'italic text-gray-500' : ''}`}>
                                    {loadingWaitTime ? 'Calcul en cours...' : estimatedWaitTime}
                                    {errorWaitTime && <span className="text-red-500 text-xs ml-1">({errorWaitTime})</span>}
                                </span>
                            </p>
                            <div className="flex items-start">
                                <Stethoscope className="mr-2 h-4 w-4 text-blue-600 flex-shrink-0 mt-0.5" />
                                <strong className="w-40">Médecin Assigné:</strong>
                                {loadingDoctor ? (
                                    <span className="italic text-gray-500">Chargement des informations du médecin...</span>
                                ) : doctorInfo ? (
                                    <span className="font-semibold">
                                        {doctorInfo.username}
                                        {doctorInfo.specialization && ` (${doctorInfo.specialization})`}
                                        {doctorInfo.email && `, Contact: ${doctorInfo.email}`}
                                    </span>
                                ) : (
                                    <span className="italic text-gray-500">Assignation en cours...</span>
                                )}
                            </div>
                            <p><strong>Restez Disponible :</strong> Notre équipe médicale vous contactera sous peu. Veuillez garder votre téléphone à proximité.</p>
                            <p><strong>Préparation :</strong> Ayez à portée de main votre carte d'assurance, la liste de vos médicaments actuels et tout document médical pertinent.</p>
                        </div>
                    </div>

                    {/* Footer Buttons */}
                    <div className="flex justify-between mt-6">
                        <Button asChild variant="outline" className="rounded-lg">
                            <Link to="/home">Retour à l'Accueil</Link>
                        </Button>
                        <Button
                            onClick={handleTrackStatusClick} // Appel de la fonction ici
                            className="bg-indigo-600 text-white hover:bg-indigo-700 rounded-lg"
                        >
                            Suivre le Statut de la Demande
                        </Button>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

export default ConfirmationEmergencyRegister;
</file>

<file path="src/pages/Dashboard.jsx">
import { Card } from "@/components/ui/card";
import { Users, Hospital, AlertTriangle, Activity } from "lucide-react";
import { useState, useEffect } from "react";
import { BarChart, Bar, PieChart, Pie, Cell, ResponsiveContainer, XAxis, YAxis, Tooltip, Legend } from "recharts";
import axios from "axios";
import "../App.css";

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"];
const EMERGENCY_COLORS = {
    low: "#00C49F",
    medium: "#FFBB28",
    high: "#FF8042",
    critical: "#FF0000"
};

const Dashboard = () => {
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [patientsCount, setPatientsCount] = useState(0);
    const [emergencyStats, setEmergencyStats] = useState({
        total: 0,
        today: 0
    });
    const [userStats, setUserStats] = useState([]);
    const [emergencyLevelStats, setEmergencyLevelStats] = useState([]);
    const [userRole, setUserRole] = useState(null);

    useEffect(() => {
        const fetchUserRole = async () => {
            try {
                const response = await axios.get("http://localhost:8089/api/auth/me", {
                    withCredentials: true,
                });
                setUserRole(response.data.role);
            } catch (err) {
                console.error("Error fetching user role:", err);
            }
        };
        fetchUserRole();
    }, []);

    useEffect(() => {
        const fetchPatientsCount = async () => {
            try {
                const response = await axios.get("http://localhost:8089/api/users/patients/count", {
                    withCredentials: true,
                });
                setPatientsCount(response.data.count);
            } catch (err) {
                console.error("Error fetching patients count", err);
            }
        };
        fetchPatientsCount();
    }, []);

    useEffect(() => {
        const fetchEmergencyStats = async () => {
            try {
                const [totalRes, todayRes, levelRes] = await Promise.all([
                    axios.get("http://localhost:8089/api/emergency-patients/stats/total", {
                        withCredentials: true,
                    }),
                    axios.get("http://localhost:8089/api/emergency-patients/stats/today", {
                        withCredentials: true,
                    }),
                    axios.get("http://localhost:8089/api/emergency-patients/stats/levels", {
                        withCredentials: true,
                    })
                ]);
                setEmergencyStats({
                    total: totalRes.data.total,
                    today: todayRes.data.today
                });
                setEmergencyLevelStats(levelRes.data);
            } catch (err) {
                console.error("Error fetching emergency stats:", err);
            }
        };
        fetchEmergencyStats();
    }, []);

    useEffect(() => {
        const fetchUserStatistics = async () => {
            if(userRole === 'Administrator') { // Seulement si admin
                try {
                    const response = await axios.get("http://localhost:8089/api/users/stats", {
                        withCredentials: true,
                    });
                    setUserStats(response.data);
                } catch (err) {
                    console.error("Error fetching user stats:", err);
                }
            }
        };
        fetchUserStatistics();
    }, [userRole]);

    const statsCards = [
        { title: "Total Patients", value: patientsCount.toLocaleString(), icon: Users, color: "text-blue-600", bg: "bg-blue-100" },
        { title: "Emergency Cases Today", value: emergencyStats.today.toLocaleString(), icon: Hospital, color: "text-red-500", bg: "bg-red-50" },
        { title: "Total Emergency Cases", value: emergencyStats.total.toLocaleString(), icon: Hospital, color: "text-red-700", bg: "bg-red-100" }
    ];

    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {
        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
        const x = cx + radius * Math.cos(-midAngle * Math.PI / 180);
        const y = cy + radius * Math.sin(-midAngle * Math.PI / 180);

        return (
            <text x={x} y={y} fill="white" textAnchor="middle" dominantBaseline="central">
                {`${(percent * 100).toFixed(0)}%`}
            </text>
        );
    };

    return (
        <div className="space-y-6">
            <div className="flex items-center justify-between ">
            <h1 className="text-3xl font-extrabold tracking-tight mb-2" style={{ color: '#42A5FF' }}> Dashboard</h1>
                <div className="text-sm text-muted-foreground">
                    {new Date().toLocaleDateString("en-US", {
                        weekday: "long",
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                    })}
                </div>
            </div>

            <div className="grid gap-6 md:grid-cols-3">
                {statsCards.map((stat) => (
                    <Card key={stat.title} className="p-6 hover-scale">
                        <div className="flex items-center gap-4">
                            <div className={`${stat.color} ${stat.bg} p-3 rounded-lg`}>
                                <stat.icon className="w-8 h-8" />
                            </div>
                            <div>
                                <p className="text-sm text-muted-foreground">{stat.title}</p>
                                <h3 className="text-2xl font-bold text-blue-900">{stat.value}</h3>
                            </div>
                        </div>
                    </Card>
                ))}
            </div>

            <div className={`grid gap-6 ${userRole === 'Administrator' ? 'md:grid-cols-2 lg:grid-cols-3' : 'md:grid-cols-1'}`}>
                {userRole === 'Administrator' && (
                    <Card className="p-6">
                        <h2 className="text-xl font-semibold mb-4 text-blue-900">Department Statistics</h2>
                        <ResponsiveContainer width="100%" height={300}>
                            <BarChart data={userStats}>
                                <XAxis dataKey="name" />
                                <YAxis />
                                <Tooltip />
                                <Bar dataKey="count" fill="#0088FE" />
                            </BarChart>
                        </ResponsiveContainer>
                    </Card>
                )}

                {userRole === 'Administrator' && (
                    <Card className="p-6">
                        <h2 className="text-xl font-semibold mb-4 text-blue-900">User Distribution</h2>
                        <ResponsiveContainer width="100%" height={300}>
                            <PieChart>
                                <Pie
                                    data={userStats}
                                    dataKey="count"
                                    nameKey="name"
                                    cx="50%"
                                    cy="50%"
                                    outerRadius={100}
                                    fill="#8884d8"
                                    label={renderCustomizedLabel}
                                    labelLine={false}
                                >
                                    {userStats.map((entry, index) => (
                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                    ))}
                                </Pie>
                                <Tooltip />
                                <Legend />
                            </PieChart>
                        </ResponsiveContainer>
                    </Card>
                )}

                <Card className="p-6">
                    <h2 className="text-xl font-semibold mb-4 text-blue-900">Emergency Cases by Severity</h2>
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart
                            data={emergencyLevelStats}
                            layout="vertical"
                        >
                            <XAxis type="number" />
                            <YAxis dataKey="emergencyLevel" type="category" />
                            <Tooltip />
                            <Legend />
                            <Bar 
                                dataKey="count" 
                                name="Number of Cases"
                                fill="#8884d8"
                            >
                                {emergencyLevelStats.map((entry, index) => (
                                    <Cell 
                                        key={`cell-${index}`} 
                                        fill={EMERGENCY_COLORS[entry.emergencyLevel]} 
                                    />
                                ))}
                            </Bar>
                        </BarChart>
                    </ResponsiveContainer>
                </Card>
            </div>

            <div className="grid gap-6 md:grid-cols-2">
                <Card className="p-6">
                    <h2 className="text-xl font-semibold mb-4 text-blue-900">Emergency Level Distribution</h2>
                    <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                            <Pie
                                data={emergencyLevelStats}
                                dataKey="count"
                                nameKey="emergencyLevel"
                                cx="50%"
                                cy="50%"
                                outerRadius={100}
                                label={renderCustomizedLabel}
                                labelLine={false}
                            >
                                {emergencyLevelStats.map((entry, index) => (
                                    <Cell 
                                        key={`cell-${index}`} 
                                        fill={EMERGENCY_COLORS[entry.emergencyLevel]} 
                                    />
                                ))}
                            </Pie>
                            <Tooltip 
                                formatter={(value, name, props) => [
                                    value, 
                                    `${name} (Average pain: ${props.payload.averagePainLevel?.toFixed(1) || 'N/A'})`
                                ]}
                            />
                            <Legend />
                        </PieChart>
                    </ResponsiveContainer>
                </Card>

                <Card className="p-6">
                    <h2 className="text-xl font-semibold mb-4 text-blue-900">Emergency Cases Overview</h2>
                    <div className="space-y-4">
                        {emergencyLevelStats.map((stat) => (
                            <div key={stat.emergencyLevel} className="flex items-center justify-between p-4 border rounded-lg">
                                <div className="flex items-center gap-3">
                                    <div 
                                        className="w-4 h-4 rounded-full" 
                                        style={{ backgroundColor: EMERGENCY_COLORS[stat.emergencyLevel] }}
                                    />
                                    <span className="capitalize font-medium">{stat.emergencyLevel}</span>
                                </div>
                                <div className="text-right">
                                    <p className="font-bold">{stat.count} cases</p>
                                    <p className="text-sm text-muted-foreground">
                                        Avg. pain: {stat.averagePainLevel?.toFixed(1) || 'N/A'}
                                    </p>
                                </div>
                            </div>
                        ))}
                    </div>
                </Card>
            </div>
        </div>
    );
};

export default Dashboard;
</file>

<file path="src/pages/Doctors.jsx">
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import {
  UserPlus,
  Search,
  Filter,
  Pencil,
  Trash2,
  Mail,
  Phone,
  Stethoscope,
  Users,
  RefreshCw,
  BadgeCheck,
  FileText,
} from "lucide-react"
import axios from "axios"
import { motion } from "framer-motion"

const Doctors = () => {
  const [doctors, setDoctors] = useState([])
  const [searchQuery, setSearchQuery] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const doctorsPerPage = 6
  const [editingDoctor, setEditingDoctor] = useState(null)
  const [newDoctor, setNewDoctor] = useState({
    username: "",
    email: "",
    password: "",
    phoneNumber: "",
    specialization: "",
    licenseNumber: "",
    badgeNumber: "",
    profileImage: null,
  })
  const [previewImage, setPreviewImage] = useState(null)
  const [formErrors, setFormErrors] = useState({})
  const [isSheetOpen, setIsSheetOpen] = useState(false)
  const [refreshing, setRefreshing] = useState(false)

  const specializations = ["Cardiology", "Surgery", "Pediatrics", "Orthopedics", "Neurology", "Dermatology"]

  const fetchDoctors = async () => {
    setLoading(true)
    setError(null)
    try {
      const token = localStorage.getItem("authToken")
      const response = await axios.get("http://localhost:8089/api/users/doctors", {
        withCredentials: true,
        headers: {
          Authorization: token ? `Bearer ${token}` : "",
        },
      })

      const fetchedDoctors = response.data || []
      setDoctors(fetchedDoctors)
      setTotalPages(Math.ceil(fetchedDoctors.length / doctorsPerPage))
    } catch (error) {
      console.error("Error fetching doctors:", error)
      setError(error.response?.data?.message || "Failed to fetch doctors")
      if (error.response?.status === 401) {
        // Handle unauthorized access
        localStorage.removeItem("authToken")
        window.location.href = "/login"
      }
    } finally {
      setLoading(false)
    }
  }

  const refreshData = async () => {
    setRefreshing(true)
    await fetchDoctors()
    setTimeout(() => setRefreshing(false), 800)
  }

  useEffect(() => {
    fetchDoctors()
  }, [])

  const validateFields = (data, isUpdate = false) => {
    const errors = {}
    const { username, email, password, phoneNumber, specialization, licenseNumber, badgeNumber } = data

    if (!username) errors.username = "Username is required"
    if (!email) errors.email = "Email is required"
    else if (!/\S+@\S+\.\S+/.test(email)) errors.email = "Invalid email"
    if (!phoneNumber) errors.phoneNumber = "Phone number is required"
    else if (!/^\d{9,}$/.test(phoneNumber)) errors.phoneNumber = "Invalid phone number (at least 9 digits)"
    if (!specialization) errors.specialization = "Specialization is required"
    if (!licenseNumber) errors.licenseNumber = "License number is required"
    else if (!/^\d+$/.test(licenseNumber)) errors.licenseNumber = "License number must be numeric"
    if (!badgeNumber) errors.badgeNumber = "Badge number is required"
    else if (!/^\d+$/.test(badgeNumber)) errors.badgeNumber = "Badge number must be numeric"
    if (!isUpdate && (!password || password.length < 6)) errors.password = "Password must be at least 6 characters"

    setFormErrors(errors)
    return Object.keys(errors).length === 0
  }

  const handleSearch = (query) => {
    setSearchQuery(query)
    setCurrentPage(1)

    if (!query.trim()) {
      fetchDoctors()
      return
    }

    const filtered = doctors.filter(
      (doctor) =>
        doctor.username?.toLowerCase().includes(query.toLowerCase()) ||
        doctor.specialization?.toLowerCase().includes(query.toLowerCase()),
    )

    setDoctors(filtered)
    setTotalPages(Math.ceil(filtered.length / doctorsPerPage))
  }

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this doctor?")) return

    setLoading(true)
    try {
      const token = localStorage.getItem("authToken")
      await axios.delete(`http://localhost:8089/api/users/${id}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })

      alert("Doctor deleted successfully")
      fetchDoctors()
    } catch (error) {
      console.error("Error deleting doctor:", error)
      alert(error.response?.data?.message || "Error deleting doctor")
    } finally {
      setLoading(false)
    }
  }

  const handleAdd = async (e) => {
    e.preventDefault()
    if (!validateFields(newDoctor)) return

    setLoading(true)
    const formData = new FormData()
    formData.append("username", newDoctor.username)
    formData.append("email", newDoctor.email)
    formData.append("password", newDoctor.password)
    formData.append("phoneNumber", newDoctor.phoneNumber)
    formData.append("specialization", newDoctor.specialization)
    formData.append("licenseNumber", newDoctor.licenseNumber)
    formData.append("badgeNumber", newDoctor.badgeNumber)
    formData.append("role", "Doctor")
    formData.append("isValidated", true)

    if (newDoctor.profileImage) {
      formData.append("profileImage", newDoctor.profileImage)
    }

    try {
      const token = localStorage.getItem("authToken")
      const response = await axios.post("http://localhost:8089/api/auth/register", formData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })

      setNewDoctor({
        username: "",
        email: "",
        password: "",
        phoneNumber: "",
        specialization: "",
        licenseNumber: "",
        badgeNumber: "",
        profileImage: null,
      })
      setPreviewImage(null)
      setFormErrors({})
      setIsSheetOpen(false)
      alert(response.data?.message || "Doctor added successfully")
      fetchDoctors()
    } catch (error) {
      console.error("Error adding doctor:", error)
      alert(error.response?.data?.message || "Error adding doctor")
    } finally {
      setLoading(false)
    }
  }

  const handleUpdate = async (e) => {
    e.preventDefault()
    if (!editingDoctor || !validateFields(editingDoctor, true)) return

    setLoading(true)
    const formData = new FormData()
    formData.append("username", editingDoctor.username)
    formData.append("email", editingDoctor.email)
    formData.append("phoneNumber", editingDoctor.phoneNumber)
    formData.append("specialization", editingDoctor.specialization)
    formData.append("licenseNumber", editingDoctor.licenseNumber)
    formData.append("badgeNumber", editingDoctor.badgeNumber)

    if (editingDoctor.profileImage instanceof File) {
      formData.append("profileImage", editingDoctor.profileImage)
    }

    try {
      const token = localStorage.getItem("authToken")
      const response = await axios.put(`http://localhost:8089/api/users/${editingDoctor._id}`, formData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })

      setEditingDoctor(null)
      setPreviewImage(null)
      setFormErrors({})
      setIsSheetOpen(false)
      alert(response.data?.message || "Doctor updated successfully")
      fetchDoctors()
    } catch (error) {
      console.error("Error updating doctor:", error)
      alert(error.response?.data?.message || "Error updating doctor")
    } finally {
      setLoading(false)
    }
  }

  const handleImageChange = (e) => {
    const file = e.target.files[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => setPreviewImage(reader.result)
      reader.readAsDataURL(file)

      if (editingDoctor) {
        setEditingDoctor({ ...editingDoctor, profileImage: file })
      } else {
        setNewDoctor({ ...newDoctor, profileImage: file })
      }
    }
  }

  const handleEditClick = (doctor) => {
    setEditingDoctor({ ...doctor })
    setPreviewImage(doctor.profileImage ? `http://localhost:8089${doctor.profileImage}` : null)
    setFormErrors({})
    setIsSheetOpen(true)
  }

  const handleSheetClose = () => {
    setIsSheetOpen(false)
    setEditingDoctor(null)
    setNewDoctor({
      username: "",
      email: "",
      password: "",
      phoneNumber: "",
      specialization: "",
      licenseNumber: "",
      badgeNumber: "",
      profileImage: null,
    })
    setPreviewImage(null)
    setFormErrors({})
  }

  // Pagination
  const paginatedDoctors = doctors.slice((currentPage - 1) * doctorsPerPage, currentPage * doctorsPerPage)


  

  const Pagination = () => {
    const pages = Array.from({ length: totalPages }, (_, i) => i + 1)

    return (
      <div className="flex justify-center gap-2 mt-8" role="navigation" aria-label="Pagination">
        <Button
          disabled={currentPage === 1}
          onClick={() => setCurrentPage(currentPage - 1)}
          className="bg-indigo-100 text-indigo-700 hover:bg-indigo-200 transition-all duration-300 rounded-lg px-4 py-2 disabled:opacity-50"
        >
          Previous
        </Button>
        {pages.map((page) => (
          <Button
            key={page}
            onClick={() => setCurrentPage(page)}
            className={`${
              currentPage === page ? "bg-indigo-600 text-white" : "bg-indigo-100 text-indigo-700 hover:bg-indigo-200"
            } transition-all duration-300 rounded-lg px-4 py-2`}
          >
            {page}
          </Button>
        ))}
        <Button
          disabled={currentPage === totalPages}
          onClick={() => setCurrentPage(currentPage + 1)}
          className="bg-indigo-100 text-indigo-700 hover:bg-indigo-200 transition-all duration-300 rounded-lg px-4 py-2 disabled:opacity-50"
        >
          Next
        </Button>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-indigo-50 to-white p-8">
      {/* Enhanced Header with Stats */}
      <div className="mb-12">
  <motion.div
    initial={{ opacity: 0, y: -20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.5 }}
    className="text-center mb-8 mx-auto max-w-4xl"
  >
    <h1 className="text-5xl font-extrabold tracking-tight mb-2" style={{ color: '#42A5FF' }}>
      Medical Staff Directory
    </h1>
    <p className="text-gray-600 text-lg max-w-2xl mx-auto">
      Manage your healthcare professionals with our comprehensive doctor management system
    </p>
  </motion.div>

  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.5, delay: 0.2 }}
    className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8 justify-center mx-auto max-w-6xl"
  >
    <Card className="bg-white/80 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all duration-300 border border-indigo-100 max-w-md w-full">
      <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">Total Doctors</p>
                  <h3 className="text-3xl font-bold text-gray-900 mt-1">{doctors.length}</h3>
                </div>
                <div className="bg-indigo-100 p-3 rounded-full">
                  <Users className="h-6 w-6 text-indigo-600" />
                </div>
              </div>
            </CardContent>
          </Card>


          <Card className="bg-white/80 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all duration-300 border border-indigo-100">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">Last Updated</p>
                  <h3 className="text-lg font-bold text-gray-900 mt-1">{new Date().toLocaleDateString()}</h3>
                </div>
                <div className="bg-green-100 p-3 rounded-full">
                  <RefreshCw
                    className={`h-6 w-6 text-green-600 ${refreshing ? "animate-spin" : ""}`}
                    onClick={refreshData}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-10">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search doctors by name or specialization..."
            className="w-full pl-10 p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
            value={searchQuery}
            onChange={(e) => handleSearch(e.target.value)}
            disabled={loading}
            aria-label="Search doctors"
          />
        </div>
        <div className="flex gap-3">
          <Button
            variant="outline"
            className="bg-white hover:bg-gray-50 border border-gray-200 text-gray-700 transition-all duration-300 shadow-sm"
          >
            <Search className="w-4 h-4 mr-2" />
            Search
          </Button>
        
        </div>
      </div>

      {loading && doctors.length === 0 ? (
        <div className="flex justify-center items-center h-64">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          >
            <RefreshCw className="w-12 h-12 text-indigo-600" />
          </motion.div>
          <span className="ml-4 text-indigo-600 text-xl">Loading doctors...</span>
        </div>
      ) : error ? (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center bg-red-50 p-8 rounded-xl border border-red-200"
        >
          <p className="text-red-500 text-lg mb-4">{error}</p>
          <Button
            onClick={fetchDoctors}
            className="bg-indigo-600 text-white hover:bg-indigo-700 transition-all duration-300 rounded-lg px-6 py-2"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Retry
          </Button>
        </motion.div>
      ) : paginatedDoctors.length === 0 ? (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center bg-gray-50 p-12 rounded-xl border border-gray-200"
        >
          <p className="text-gray-500 text-xl mb-4" role="alert">
            No doctors found matching your search criteria.
          </p>
          {searchQuery && (
            <Button
              onClick={() => {
                setSearchQuery("")
                fetchDoctors()
              }}
              className="bg-indigo-600 text-white hover:bg-indigo-700 transition-all duration-300 rounded-lg px-6 py-2"
            >
              Clear Search
            </Button>
          )}
        </motion.div>
      ) : (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
          >
            {paginatedDoctors.map((doctor, index) => (
              <motion.div
                key={doctor._id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
              >
                <Card className="relative bg-white/90 backdrop-blur-sm shadow-xl hover:shadow-2xl hover:-translate-y-2 transition-all duration-500 rounded-2xl overflow-hidden border border-gray-200 hover:border-indigo-400">
                  <CardContent className="p-6 text-center">
                    <div className="relative group">
                      <div className="absolute inset-0 bg-indigo-500/10 rounded-full blur-xl opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                      <img
                        src={
                          doctor.profileImage
                            ? `http://localhost:8089${doctor.profileImage.startsWith("/") ? doctor.profileImage : "/" + doctor.profileImage}`
                            : "https://via.placeholder.com/150?text=Doctor"
                        }
                        alt={doctor.username}
                        className="w-40 h-40 mx-auto object-cover rounded-full border-4 border-gray-100 group-hover:border-indigo-300 transition-all duration-500 group-hover:scale-110"
                      />
                      {doctor.specialization && (
                        <motion.span
                          initial={{ x: -20, opacity: 0 }}
                          animate={{ x: 0, opacity: 1 }}
                          transition={{ delay: 0.2 }}
                          className="absolute top-2 left-2 bg-indigo-50 text-indigo-700 text-sm font-medium px-3 py-1 rounded-full shadow-md border border-indigo-200 group-hover:bg-indigo-100 transition-all duration-300"
                        >
                          <Stethoscope className="w-3 h-3 inline mr-1" /> {doctor.specialization}
                        </motion.span>
                      )}
                    </div>
                    <h2 className="text-2xl font-bold text-gray-800 mt-6 truncate">
                      {doctor.username || "Name not available"}
                    </h2>
                    <div className="mt-6 space-y-4 text-gray-600 text-sm">
                      {doctor.badgeNumber && (
                        <p className="flex items-center justify-center gap-2">
                          <BadgeCheck className="w-4 h-4 text-indigo-500" /> Badge: {doctor.badgeNumber}
                        </p>
                      )}
                      {doctor.licenseNumber && (
                        <p className="flex items-center justify-center gap-2">
                          <FileText className="w-4 h-4 text-green-500" /> License: {doctor.licenseNumber}
                        </p>
                      )}
                      <div className="flex items-center justify-center gap-2 group relative">
                        <Mail className="h-4 w-4 text-indigo-400" />
                        <span className="group-hover:text-indigo-600 transition-colors duration-300">
                          {doctor.email || "Email not available"}
                        </span>
                        <div className="absolute bottom-8 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2">
                          Send email
                        </div>
                      </div>
                      <div className="flex items-center justify-center gap-2 group relative">
                        <Phone className="h-4 w-4 text-green-400" />
                        <span className="group-hover:text-green-600 transition-colors duration-300">
                          {doctor.phoneNumber || "Number not available"}
                        </span>
                        <div className="absolute bottom-8 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2">
                          Call
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-center mt-8 gap-4">
                      <Button
                        variant="outline"
                        size="sm"
                        className="relative group bg-indigo-50 text-indigo-600 border-indigo-200 hover:bg-indigo-100 hover:border-indigo-300 hover:shadow-lg transition-all duration-300"
                        onClick={() => handleEditClick(doctor)}
                        disabled={loading}
                      >
                        <Pencil className="h-4 w-4 mr-1" /> Edit
                        <span className="absolute bottom-10 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2">
                          Edit this doctor
                        </span>
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        className="relative group bg-red-50 text-red-600 border-red-200 hover:bg-red-100 hover:border-red-300 hover:shadow-lg transition-all duration-300"
                        onClick={() => handleDelete(doctor._id)}
                        disabled={loading}
                      >
                        <Trash2 className="h-4 w-4 mr-1" /> Delete
                        <span className="absolute bottom-10 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2">
                          Delete this doctor
                        </span>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </motion.div>
          {totalPages > 1 && <Pagination />}
        </>
      )}
    </div>
  )
}

export default Doctors
</file>

<file path="src/pages/Emergency.jsx">
"use client"
import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

import { AlertCircle, Ambulance, Phone, X, Search, Filter } from "lucide-react"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog"
import axios from "axios"
import { motion, AnimatePresence } from "framer-motion"

const Emergency = () => {
  const [searchQuery, setSearchQuery] = useState("")
  const [emergencyCases, setEmergencyCases] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [selectedCase, setSelectedCase] = useState(null)
  const [isDetailsOpen, setIsDetailsOpen] = useState(false)

  const statusColors = {
    critical: "bg-red-100 text-red-800",
    high: "bg-orange-100 text-orange-800",
    medium: "bg-yellow-100 text-yellow-800",
    low: "bg-green-100 text-green-800"
  }

  useEffect(() => {
    const fetchEmergencyCases = async () => {
      try {
        const response = await axios.get("http://localhost:8089/api/emergency-patients", {
          withCredentials: true
        })
        setEmergencyCases(response.data)
      } catch (err) {
        setError("Erreur de chargement des urgences")
      } finally {
        setLoading(false)
      }
    }
    fetchEmergencyCases()
  }, [])

  const handleDelete = async (id) => {
    if (window.confirm("Confirmer la suppression de cette urgence ?")) {
      try {
        await axios.delete(`http://localhost:8089/api/emergency-patients/${id}`, {
          withCredentials: true
        })
        setEmergencyCases(prev => prev.filter(caseItem => caseItem._id !== id))
      } catch (err) {
        console.error("Erreur de suppression:", err)
      }
    }
  }

  const filteredCases = emergencyCases.filter(caseItem =>
    `${caseItem.firstName} ${caseItem.lastName}`.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-red-50 to-white p-8">
      <header className="flex items-center justify-between mb-10">
      <h1 className="text-3xl font-extrabold tracking-tight mb-2" style={{ color: '#42A5FF' }}>Gestion des Urgences</h1>
       
      </header>

      <div className="flex gap-4 mb-10">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Rechercher des urgences..."
            className="w-full pl-10 p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-red-300 focus:border-red-500 shadow-sm"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
       
      </div>

      {loading ? (
        <div className="flex justify-center">
          <span className="text-red-600 text-2xl animate-pulse">⏳ Chargement...</span>
        </div>
      ) : error ? (
        <div className="text-center">
          <p className="text-red-500">{error}</p>
          <Button
            onClick={() => window.location.reload()}
            className="mt-4 bg-red-600 text-white hover:bg-red-700 rounded-lg px-6 py-2"
          >
            Réessayer
          </Button>
        </div>
      ) : filteredCases.length === 0 ? (
        <p className="text-center text-gray-500 text-lg">Aucune urgence trouvée</p>
      ) : (
        <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
          {filteredCases.map((caseItem) => (
            <Card
              key={caseItem._id}
              className="relative bg-white/90 backdrop-blur-sm shadow-xl hover:shadow-2xl hover:-translate-y-2 transition-all duration-500 rounded-2xl border border-gray-200 hover:border-red-400"
            >
              <CardContent className="p-6 text-center">
                <div className="relative group">
                  <div className="absolute inset-0 bg-red-500/10 rounded-full blur-xl opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                  <div className="w-40 h-40 mx-auto bg-red-100 rounded-full border-4 border-gray-100 group-hover:border-red-300 flex items-center justify-center">
                    <AlertCircle className="w-20 h-20 text-red-400" />
                  </div>
                </div>
                
                <h2 className="text-2xl font-bold text-gray-800 mt-6 truncate">
                  {caseItem.firstName} {caseItem.lastName}
                </h2>
                
                <div className="mt-6 space-y-4 text-gray-600 text-sm">
                 
                  
                  <div className={`inline-flex items-center px-4 py-1 rounded-full text-sm font-medium ${
                    statusColors[caseItem.emergencyLevel] || "bg-gray-100 text-gray-800"
                  }`}>
                    {caseItem.emergencyLevel?.toUpperCase() || "NON CLASSÉ"}
                  </div>
                </div>

                <div className="flex justify-center mt-8 gap-4">
                  <Button
                    variant="outline"
                    size="sm"
                    className="bg-red-50 text-red-600 border-red-200 hover:bg-red-100 hover:border-red-300"
                    onClick={() => {
                      setSelectedCase(caseItem)
                      setIsDetailsOpen(true)
                    }}
                  >
                    Détails
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100 hover:border-gray-300"
                    onClick={() => handleDelete(caseItem._id)}
                  >
                    <X className="h-4 w-4 mr-1" />
                    Supprimer
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      <AnimatePresence>
        {isDetailsOpen && selectedCase && (
          <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
            <DialogContent className="sm:max-w-md bg-white rounded-2xl shadow-2xl">
              <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                <DialogHeader>
                  <DialogTitle className="text-2xl font-bold text-gray-800">
                    Détails de l'urgence
                  </DialogTitle>
                </DialogHeader>
                
                <div className="space-y-4 p-4">
                  <div className="flex items-center gap-4">
                    <div className={`px-3 py-1 rounded-full ${
                      statusColors[selectedCase.emergencyLevel] || "bg-gray-100"
                    }`}>
                      {selectedCase.emergencyLevel?.toUpperCase()}
                    </div>
                   
                  </div>

                  <div className="space-y-2 text-left">
                    <p><strong>🕒 Date de déclaration:</strong> {new Date(selectedCase.createdAt).toLocaleString()}</p>
                    <p><strong>👤 Patient:</strong> {selectedCase.firstName} {selectedCase.lastName}</p>
                    <p><strong>🏥 Symptômes:</strong> {selectedCase.symptoms || "Non spécifiés"}</p>
                    <p><strong>👨⚕️ Médecin assigné:</strong> {selectedCase.assignedDoctor || "Aucun"}</p>
                  </div>
                </div>

                <DialogFooter>
                  <DialogClose asChild>
                    <Button className="bg-gradient-to-r from-red-600 to-red-700 text-white hover:from-red-700 hover:to-red-800 w-full">
                      Fermer
                    </Button>
                  </DialogClose>
                </DialogFooter>
              </motion.div>
            </DialogContent>
          </Dialog>
        )}
      </AnimatePresence>
    </div>
  )
}

export default Emergency
</file>

<file path="src/pages/EmergencyRegister.jsx">
"use client"

import { useEffect, useRef, useState } from "react"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { toast } from "sonner"
import { z } from "zod"
import { AlertTriangle, Heart, Stethoscope, UserPlus, Sparkles, Loader2, Info } from "lucide-react"
import { useNavigate } from "react-router-dom"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from "@/components/ui/form"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import axios from "axios"
import ParticlesComponent from "@/components/ParticlesComponent"

// Color palette from medical document
const colors = {
  primary: "#1e3a8a", // Blue-900
  secondary: "#0891b2", // Cyan
  alert: "#dc2626", // Red
  primaryLight: "#dbeafe",
  secondaryLight: "#cffafe",
  alertLight: "#fee2e2",
  bgAccent: "#e0f7fa", // Light cyan for background
}

const emergencyFormSchema = z.object({
  firstName: z.string().min(2, { message: "First name must be at least 2 characters" }),
  lastName: z.string().min(2, { message: "Last name must be at least 2 characters" }),
  dateOfBirth: z.string().min(1, { message: "Date of birth is required" }),
  gender: z.enum(["male", "female", "other"], { required_error: "Please select a gender" }),
  phoneNumber: z.string().min(8, { message: "Invalid phone number" }),
  email: z.string().email({ message: "Invalid email address" }).optional().or(z.literal("")),
  address: z.string().min(5, { message: "Address must be at least 5 characters" }),
  emergencyContact: z.string().min(8, { message: "Invalid emergency contact" }),
  insuranceInfo: z.string().optional(),
  allergies: z.string().optional(),
  currentMedications: z.string().optional(),
  medicalHistory: z.string().optional(),
  currentSymptoms: z.string().min(10, { message: "Please describe your symptoms in more detail (min 10 chars)" }),
  painLevel: z.enum(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], {
    required_error: "Please select your pain level",
  }),
  emergencyLevel: z.enum(["low", "medium", "high", "critical"], {
    required_error: "Please select the emergency level",
  }),
  acceptTerms: z.boolean().refine((val) => val === true, { message: "You must accept the terms and conditions" }),
})

const EmergencyRegister = () => {
  const containerRef = useRef(null)
  const navigate = useNavigate()

  const form = useForm({
    resolver: zodResolver(emergencyFormSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      gender: undefined,
      phoneNumber: "",
      email: "",
      address: "",
      emergencyContact: "",
      insuranceInfo: "",
      allergies: "",
      currentMedications: "",
      medicalHistory: "",
      currentSymptoms: "",
      painLevel: undefined,
      emergencyLevel: undefined,
      acceptTerms: false,
    },
  })

  const [aiSuggestions, setAiSuggestions] = useState({ keywords: [], suggestedQuestions: [] })
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisError, setAnalysisError] = useState(null)

  useEffect(() => {
    const handleScroll = () => {
      if (containerRef.current) {
        const scrollPosition = window.scrollY
        const offset = scrollPosition * 0.2
        containerRef.current.style.backgroundPositionY = `calc(50% + ${-offset}px)`
      }
    }
    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  const handleAnalyzeSymptoms = async () => {
    const symptomText = form.getValues("currentSymptoms")
    if (!symptomText || symptomText.trim().length < 10) {
      setAnalysisError("Please describe your symptoms in more detail (at least 10 characters) before analyzing.")
      setAiSuggestions({ keywords: [], suggestedQuestions: [] })
      return
    }

    setIsAnalyzing(true)
    setAnalysisError(null)
    setAiSuggestions({ keywords: [], suggestedQuestions: [] })

    try {
      console.log("[Frontend] Sending for analysis:", symptomText)
      const response = await axios.post("http://localhost:8089/api/ai/analyze-symptoms", { symptomText })
      console.log("[Frontend] Suggestions received:", response.data)
      setAiSuggestions(response.data)
      if (response.data.error) {
        setAnalysisError(response.data.error)
      }
    } catch (error) {
      console.error("[Frontend] Analysis error:", error)
      const message = error.response?.data?.message || "Symptom analysis failed. Check server connection or try again."
      setAnalysisError(message)
      toast.error("Analysis Error", { description: message })
    } finally {
      setIsAnalyzing(false)
    }
  }

  const addSuggestedQuestionToSymptoms = (question) => {
    const currentSymptoms = form.getValues("currentSymptoms")
    const newSymptoms = `${currentSymptoms}\n\nSuggested Question: ${question}\n- `
    form.setValue("currentSymptoms", newSymptoms, { shouldValidate: true })
    const textarea = document.querySelector('textarea[name="currentSymptoms"]')
    if (textarea) {
      textarea.focus()
      textarea.selectionStart = textarea.selectionEnd = textarea.value.length
    }
  }

  async function onSubmit(data) {
    const submitData = {
      ...data,
      email: data.email === "" ? undefined : data.email,
    }
    console.log("Submitting data:", submitData)

    try {
      const response = await axios.post("http://localhost:8089/api/emergency-patients", submitData, {
        withCredentials: true,
      })
      console.log("Full response:", response)

      const responseData = response.data
      const patientData = responseData?.patient

      if (!patientData) {
        console.error("Patient object missing in response:", responseData)
        throw new Error("Unexpected server response format (patient missing).")
      }

      const patientId = patientData._id
      const patientCode = responseData?.patientCode
      const assignedDoctor = patientData?.assignedDoctor

      if (!patientId) {
        console.error("Patient ID (_id) missing in patient object:", patientData)
        throw new Error("Invalid response format after submission (ID missing).")
      }

      console.log("Submission successful. Patient ID:", patientId)

      toast.success("Your emergency request has been registered.", {
        description: "Our team will contact you shortly.",
      })
      form.reset()

      navigate("/emergency-confirmation", {
        state: {
          formData: submitData,
          patientId: patientId,
          patientCode: patientCode,
          assignedDoctor: assignedDoctor || null,
        },
      })
    } catch (error) {
      console.error("Submission error:", error)
      let errorDescription = "An unexpected error occurred. Please try again."

      if (axios.isAxiosError(error)) {
        if (error.response) {
          console.error("Axios Error Details (Response):", {
            data: error.response.data,
            status: error.response.status,
            headers: error.response.headers,
          })
          errorDescription = error.response.data?.message || `Server error: ${error.response.status}`
          if (error.response.data?.details) {
            errorDescription += ` Details: ${JSON.stringify(error.response.data.details)}`
          }
        } else if (error.request) {
          console.error("Axios Error Details (Request):", error.request)
          errorDescription = "No response from server. Check your connection."
        } else {
          console.error("Axios Error Details (Setup):", error.message)
          errorDescription = error.message
        }
      } else if (error instanceof Error && error.message.includes("Invalid response format")) {
        errorDescription = error.message
      } else if (error instanceof Error) {
        errorDescription = error.message
      }

      toast.error("Submission Failed", { description: errorDescription })
    }
  }

  return (
    <div className="relativeflex-2 max-w-5xl mx-auto py-20 px-4 relative z-10 flex flex-col bg-gradient-to-br  font-sans">
      <div className="fixed inset-0 z-0">
        <ParticlesComponent
          id="emergency-particles"
          style={{
            position: "absolute",
            width: "100%",
            height: "100%",
            backgroundColor: "#E8F4F8",
          }}
        />
      </div>

      <div className="max-w-6xl w-full bg-white bg-opacity-95 backdrop-blur-sm   shadow-xl border border-gray-100 relative ">
        <Card className="w-full border-none shadow-none ">
          <CardHeader className="relative pb-8 rounded-t-lg" style={{ backgroundColor: colors.primary }}>
           
            <CardTitle className="text-4xl font-bold tracking-tight text-white">
              Emergency Patient Registration
            </CardTitle>
            <CardDescription className="text-white text-opacity-90 text-lg mt-2">
              Our team is here to assist you. Please provide your details.
            </CardDescription>
          </CardHeader>

          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-12">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-x-16 gap-y-8">
                  <div className="space-y-6 border-r lg:border-r-gray-200 lg:pr-8">
                    <div className="flex items-center gap-3 border-b pb-3" style={{ borderColor: colors.primaryLight }}>
                      <UserPlus className="h-6 w-6" style={{ color: colors.primary }} />
                      <h3 className="text-xl font-semibold" style={{ color: colors.primary }}>
                        Personal Information
                      </h3>
                    </div>
                    <FormField
                      control={form.control}
                      name="firstName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>First Name *</FormLabel>
                          <FormControl>
                            <Input placeholder="" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="lastName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Last Name *</FormLabel>
                          <FormControl>
                            <Input placeholder="" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="dateOfBirth"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Date of Birth *</FormLabel>
                          <FormControl>
                            <Input type="date" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="gender"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Gender *</FormLabel>
                          <FormControl>
                            <RadioGroup
                              onValueChange={field.onChange}
                              value={field.value}
                              className="flex items-center gap-4 pt-1"
                            >
                              <FormItem className="flex items-center space-x-2">
                                <FormControl>
                                  <RadioGroupItem value="male" />
                                </FormControl>
                                <FormLabel className="font-normal">Male</FormLabel>
                              </FormItem>
                              <FormItem className="flex items-center space-x-2">
                                <FormControl>
                                  <RadioGroupItem value="female" />
                                </FormControl>
                                <FormLabel className="font-normal">Female</FormLabel>
                              </FormItem>
                              <FormItem className="flex items-center space-x-2">
                                <FormControl>
                                  <RadioGroupItem value="other" />
                                </FormControl>
                                <FormLabel className="font-normal">Other</FormLabel>
                              </FormItem>
                            </RadioGroup>
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="phoneNumber"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Phone Number *</FormLabel>
                          <FormControl>
                            <Input placeholder="Ex: +1234567890" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email (Optional)</FormLabel>
                          <FormControl>
                            <Input type="email" placeholder="email@example.com" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="address"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Address *</FormLabel>
                          <FormControl>
                            <Textarea placeholder="Your full address" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="emergencyContact"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Emergency Contact *</FormLabel>
                          <FormControl>
                            <Input placeholder="Name and phone number" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormDescription className="text-xs">Person to contact in case of emergency.</FormDescription>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="space-y-6">
                    <div
                      className="flex items-center gap-3 border-b pb-3"
                      style={{ borderColor: colors.secondaryLight }}
                    >
                      <Stethoscope className="h-6 w-6" style={{ color: colors.secondary }} />
                      <h3 className="text-xl font-semibold" style={{ color: colors.secondary }}>
                        Medical Information
                      </h3>
                    </div>
                    <FormField
                      control={form.control}
                      name="insuranceInfo"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Insurance (Optional)</FormLabel>
                          <FormControl>
                            <Input placeholder="Insurance policy number" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="allergies"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Allergies (Optional)</FormLabel>
                          <FormControl>
                            <Textarea placeholder="List known allergies" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="currentMedications"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Current Medications (Optional)</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Medications you are currently taking"
                              {...field}
                              className="rounded-lg"
                            />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="medicalHistory"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Medical History (Optional)</FormLabel>
                          <FormControl>
                            <Textarea placeholder="Pre-existing medical conditions" {...field} className="rounded-lg" />
                          </FormControl>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="currentSymptoms"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-800 font-medium flex items-center gap-2">
                            Current Symptoms *
                          </FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Describe your symptoms in detail..."
                              className="min-h-[120px] rounded-lg"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage className="text-red-600 text-xs" />
                          <div className="mt-3 space-y-3">
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={handleAnalyzeSymptoms}
                              disabled={isAnalyzing || form.getValues("currentSymptoms").length < 10}
                              className="gap-1.5 text-xs h-8"
                              style={{
                                borderColor: colors.primaryLight,
                                color: colors.primary,
                                backgroundColor: "white",
                              }}
                            >
                              {isAnalyzing ? (
                                <Loader2 className="h-3.5 w-3.5 animate-spin" />
                              ) : (
                                <Sparkles className="h-3.5 w-3.5" />
                              )}
                              Analyze Symptoms (AI)
                            </Button>

                            {analysisError && (
                              <Alert variant="destructive" className="text-xs p-2">
                                <AlertTriangle className="h-4 w-4" />
                                <AlertTitle>Error</AlertTitle>
                                <AlertDescription>{analysisError}</AlertDescription>
                              </Alert>
                            )}

                            {(aiSuggestions.keywords.length > 0 || aiSuggestions.suggestedQuestions.length > 0) &&
                              !isAnalyzing &&
                              !analysisError && (
                                <Card
                                  className="p-3 mt-2 rounded-lg shadow-sm"
                                  style={{ backgroundColor: colors.primaryLight, borderColor: colors.primaryLight }}
                                >
                                  <CardHeader className="p-0 mb-2">
                                    <CardTitle
                                      className="text-xs font-semibold flex items-center gap-1.5"
                                      style={{ color: colors.primary }}
                                    >
                                      <Sparkles className="h-3.5 w-3.5" style={{ color: colors.primary }} /> AI
                                      Suggestions
                                    </CardTitle>
                                    <CardDescription
                                      className="text-xs mt-1 flex items-start gap-1"
                                      style={{ color: colors.primary }}
                                    >
                                      <Info size={12} className="flex-shrink-0 mt-0.5" />
                                      <span>Non-medical. Assists with description.</span>
                                    </CardDescription>
                                  </CardHeader>
                                  <CardContent className="p-0 space-y-2 text-xs">
                                    {aiSuggestions.keywords.length > 0 && (
                                      <div>
                                        <h4 className="font-medium text-blue-700 mb-1 text-[11px]">Keywords:</h4>
                                        <div className="flex flex-wrap gap-1">
                                          {aiSuggestions.keywords.map((keyword, index) => (
                                            <Badge
                                              key={index}
                                              variant="secondary"
                                              className="bg-white border text-[10px] px-1.5 py-0.5"
                                              style={{ borderColor: colors.primaryLight, color: colors.primary }}
                                            >
                                              {keyword}
                                            </Badge>
                                          ))}
                                        </div>
                                      </div>
                                    )}
                                    {aiSuggestions.suggestedQuestions.length > 0 && (
                                      <div>
                                        <h4 className="font-medium mb-1 text-[11px]" style={{ color: colors.primary }}>
                                          Suggested Questions:
                                        </h4>
                                        <ul className="space-y-1 list-disc pl-4" style={{ color: colors.primary }}>
                                          {aiSuggestions.suggestedQuestions.map((question, index) => (
                                            <li key={index} className="flex items-start gap-1.5">
                                              <span className="flex-grow text-[11px] leading-snug">{question}</span>
                                              <Button
                                                type="button"
                                                size="sm"
                                                variant="ghost"
                                                className="h-auto px-1 py-0 text-[10px] hover:bg-opacity-20"
                                                style={{
                                                  color: colors.primary,
                                                  backgroundColor: "transparent",
                                                  hoverBackgroundColor: colors.primaryLight,
                                                }}
                                                onClick={() => addSuggestedQuestionToSymptoms(question)}
                                                title="Add to description"
                                              >
                                                Add
                                              </Button>
                                            </li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}
                                  </CardContent>
                                </Card>
                              )}
                          </div>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="painLevel"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Pain Level (1-10) *</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger className="rounded-lg">
                                <SelectValue placeholder="Select level" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {[...Array(10)].map((_, i) => (
                                <SelectItem key={i + 1} value={(i + 1).toString()}>
                                  {i + 1}
                                  {i + 1 === 1 ? " - Very mild" : ""}
                                  {i + 1 === 5 ? " - Moderate" : ""}
                                  {i + 1 === 10 ? " - Unbearable" : ""}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="emergencyLevel"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Emergency Level *</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger className="rounded-lg">
                                <SelectValue placeholder="Select level" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="low">Low - I can wait</SelectItem>
                              <SelectItem value="medium">Medium - Need to see a doctor today</SelectItem>
                              <SelectItem value="high">High - Need prompt care</SelectItem>
                              <SelectItem value="critical">Critical - Life-threatening</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormDescription className="text-xs">Assess the severity of your situation.</FormDescription>
                          <FormMessage className="text-xs" />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>

                <div className="pt-8 border-t mt-10">
                  <FormField
                    control={form.control}
                    name="acceptTerms"
                    render={({ field }) => (
                      <FormItem className="flex items-start space-x-3 rounded-lg border border-gray-200 p-4 bg-gray-50 shadow-sm mb-8">
                        <FormControl>
                          <Checkbox
                            checked={field.value}
                            onCheckedChange={field.onChange}
                            className="mt-1 h-5 w-5 border-gray-400"
                            style={{
                              "--checkbox-checked-bg": colors.primary,
                              "--checkbox-checked-border": colors.primary,
                            }}
                          />
                        </FormControl>
                        <div className="space-y-1 leading-none">
                          <FormLabel className="font-medium text-gray-800">
                            I accept the terms and conditions *
                          </FormLabel>
                          <FormDescription className="text-sm text-gray-600">
                            By checking this box, you authorize the facility to process your medical data for your care.
                          </FormDescription>
                          <FormMessage className="text-red-600 text-xs" />
                        </div>
                      </FormItem>
                    )}
                  />

                  <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
                    <Alert
                      className="p-3 rounded-lg flex items-center gap-2 flex-1"
                      style={{ borderColor: colors.alert, backgroundColor: colors.alertLight, color: colors.alert }}
                    >
                      <AlertTriangle className="h-5 w-5 flex-shrink-0" style={{ color: colors.alert }} />
                      <AlertDescription className="text-xs">
                        For immediate life-threatening emergencies, call the local emergency number (e.g., 911).
                      </AlertDescription>
                    </Alert>
                    <Button
                      type="submit"
                      className="w-full sm:w-auto text-white font-semibold py-3 px-6 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center gap-2"
                      style={{
                        background: `linear-gradient(to right, ${colors.primary}, ${colors.secondary})`,
                        hover: `linear-gradient(to right, ${colors.primary}, ${colors.secondary})`,
                      }}
                    >
                      {form.formState.isSubmitting ? (
                        <Loader2 className="h-5 w-5 animate-spin" />
                      ) : (
                        <Heart className="h-5 w-5" />
                      )}
                      {form.formState.isSubmitting ? "Submitting..." : "Submit Emergency Request"}
                    </Button>
                  </div>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default EmergencyRegister
</file>

<file path="src/pages/EmergencyStatus.jsx">
// frontend/src/pages/EmergencyStatus.jsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Link, useLocation } from 'react-router-dom';
import axios from 'axios';
// --- Chatbot Imports ---
import ChatBot from 'react-simple-chatbot';
import { ThemeProvider } from 'styled-components';
// --- Fin Chatbot Imports ---
// --- UI Imports ---
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Clock, Stethoscope, Calendar, AlertTriangle, Loader2, MessageSquare, Clipboard, User } from "lucide-react";
// --- Fin UI Imports ---

// --- Thème Chatbot ---
const chatbotTheme = {
    background: '#f5f8fb',
    fontFamily: 'Arial, Helvetica, sans-serif',
    headerBgColor: '#1d4ed8',
    headerFontColor: '#ffffff',
    headerFontSize: '15px',
    botBubbleColor: '#1d4ed8',
    botFontColor: '#ffffff',
    userBubbleColor: '#ffffff',
    userFontColor: '#4a4a4a',
};
// --- Fin Thème ---

const EmergencyStatus = () => {
    const location = useLocation();
    const patientIdFromState = location.state?.patientId;
    const initialDoctorInfo = location.state?.doctorInfo;

    console.log("[EmergencyStatus] Page Loaded. Patient ID from state:", patientIdFromState);

    // --- États du composant ---
    const [patientDetails, setPatientDetails] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [estimatedWaitTime, setEstimatedWaitTime] = useState('Calcul en cours...');
    const [loadingWaitTime, setLoadingWaitTime] = useState(false);
    const [errorWaitTime, setErrorWaitTime] = useState(null);
    const [doctorInfo, setDoctorInfo] = useState(initialDoctorInfo || null);
    const [medicalAccess, setMedicalAccess] = useState({
        code: null,
        shouldDisplay: false,
        loading: false,
        error: null,
    });
    const [showChatbot, setShowChatbot] = useState(false);
    const [chatbotIsProcessing, setChatbotIsProcessing] = useState(false);
    // --- Fin États ---

    // --- Fonctions Fetch (INCHANGÉES) ---
    const fetchPatientAndWaitTime = async (isInitialLoad = false) => {
        if (!patientIdFromState) {
            setError("ID Patient manquant pour le suivi.");
            if (isInitialLoad) setLoading(false);
            setLoadingWaitTime(false);
            return;
        }
        if (!isInitialLoad) { setError(null); setErrorWaitTime(null); }
        setLoadingWaitTime(true);
        try {
            const [detailsResponse, waitTimeResponse] = await Promise.all([
                axios.get(`http://localhost:8089/api/emergency-patients/${patientIdFromState}/details`, { withCredentials: true }),
                axios.get(`http://localhost:8089/api/emergency-patients/${patientIdFromState}/estimated-wait-time`, { withCredentials: true }),
            ]);
            const detailsData = detailsResponse.data;
            if (detailsData && typeof detailsData === 'object') {
                setPatientDetails(detailsData);
                const assignedDoctorData = detailsData.assignedDoctor;
                if (assignedDoctorData) {
                    if (!doctorInfo || doctorInfo._id !== assignedDoctorData._id || doctorInfo.username !== assignedDoctorData.username) {
                        setDoctorInfo(assignedDoctorData);
                    }
                } else if (doctorInfo) {
                    setDoctorInfo(null);
                }
            } else {
                if (isInitialLoad) setError("Format de données patient invalide reçu.");
            }
            const waitTimeData = waitTimeResponse.data;
            if (waitTimeData && typeof waitTimeData.estimatedWaitTime === 'string') {
                setEstimatedWaitTime(waitTimeData.estimatedWaitTime);
            } else {
                setEstimatedWaitTime("Indisponible");
            }
        } catch (err) {
            if (isInitialLoad) setError("Impossible de récupérer les détails.");
            setErrorWaitTime("Impossible de mettre à jour l'estimation.");
        } finally {
            if (isInitialLoad) setLoading(false);
            setLoadingWaitTime(false);
        }
    };

    const fetchMedicalAccessCode = async () => {
        if (!patientIdFromState || !patientDetails || !patientDetails.status) return;
        const relevantStatuses = ['Médecin En Route', 'Traité'];
        if (!relevantStatuses.includes(patientDetails.status)) {
            setMedicalAccess({ code: null, shouldDisplay: false, loading: false, error: null });
            return;
        }
        setMedicalAccess(prev => ({ ...prev, loading: true, error: null }));
        try {
            const response = await axios.get(`http://localhost:8089/api/emergency-patients/${patientIdFromState}/medical-access-code`, { withCredentials: true });
            setMedicalAccess({ code: response.data.accessCode, shouldDisplay: response.data.shouldDisplay ?? false, loading: false, error: null });
        } catch (err) {
            setMedicalAccess(prev => ({ ...prev, loading: false, error: "Impossible de récupérer le code d'accès." }));
        }
    };

    useEffect(() => {
        if (patientIdFromState) {
            fetchPatientAndWaitTime(true);
            const intervalId = setInterval(() => fetchPatientAndWaitTime(false), 30000);
            return () => clearInterval(intervalId);
        } else {
            setError("Aucun ID patient fourni.");
            setLoading(false);
        }
    }, [patientIdFromState]);

    useEffect(() => {
        if (patientDetails && patientDetails.status && patientIdFromState) {
            fetchMedicalAccessCode();
        }
    }, [patientDetails?.status, patientIdFromState]);

    // --- Fonctions de Rendu (INCHANGÉES) ---
    const renderDoctorInfo = () => { /* ... Votre code ... */
        if (loading && !doctorInfo) return <p className="text-sm text-gray-500 italic">Chargement info médecin...</p>;
        if (!doctorInfo) return <p className="text-sm text-orange-600 italic">Assignation du médecin en cours...</p>;
        return (
            <div className="border rounded-lg p-4 bg-green-50 text-sm shadow-sm">
                <h4 className="font-semibold mb-2 flex items-center text-green-800">
                    <Stethoscope className="mr-2 h-4 w-4" /> Médecin Assigné
                </h4>
                <p><strong>Nom:</strong> {doctorInfo.username || 'N/A'}</p>
                <p><strong>Spécialisation:</strong> {doctorInfo.specialization || 'N/A'}</p>
                {doctorInfo.email && <p><strong>Contact:</strong> {doctorInfo.email}</p>}
            </div>
        );
    };
    const renderMedicalAccessCode = () => { /* ... Votre code ... */
        if (medicalAccess.loading) return <p className="text-sm text-gray-500 italic mt-4">Chargement du code...</p>;
        if (medicalAccess.error) return <p className="text-sm text-red-500 mt-4">{medicalAccess.error}</p>;
        if (!medicalAccess.shouldDisplay || !medicalAccess.code) return null;
        return (
            <div className="border rounded-lg p-4 bg-gray-50 mt-4 shadow-sm">
                <h4 className="font-semibold mb-2 flex items-center text-blue-800">
                    <Clipboard className="mr-2 h-4 w-4 text-blue-600" /> Code d'Accès Médical
                </h4>
                <div className="bg-white p-3 rounded-md border border-blue-200 text-center">
                    <p className="text-xl font-bold text-blue-700 tracking-wider">{medicalAccess.code}</p>
                    <p className="text-xs text-gray-500 mt-1">Conservez ce code.</p>
                </div>
            </div>
        );
    };
    // --- Fin Fonctions de Rendu ---

    // --- Fonction Asynchrone pour l'Appel API du Chatbot ---
    const processUserQuery = useCallback(async (props) => {
        // *** CORRECTION ICI: props contient value et triggerNextStep ***
        const { value: userQuery, triggerNextStep: triggerFn } = props;

        console.log("[processUserQuery] User Query:", userQuery, "PatientID:", patientIdFromState);

        if (!userQuery || !patientIdFromState) {
            const errorMsg = !patientIdFromState ? "ID Patient non disponible." : "Question vide.";
            console.error("[processUserQuery] Info manquante:", errorMsg);
            setChatbotIsProcessing(false);
            // S'assurer que triggerFn existe avant de l'appeler
            if (triggerFn) {
                triggerFn({ value: errorMsg, trigger: '5_error_display' });
            }
            return ' '; // Important pour que l'étape actuelle ne retente rien
        }

        setChatbotIsProcessing(true);
        let apiResponseText = "Désolé, une erreur est survenue.";

        try {
            console.log(`[processUserQuery] Appel API avec query: "${userQuery}" pour patient: ${patientIdFromState}`);
            const response = await axios.post('http://localhost:8089/api/chatbot/query', {
                patientId: patientIdFromState,
                queryText: userQuery
            }, { withCredentials: true });
            apiResponseText = response.data.response || "Je n'ai pas de réponse spécifique.";
            console.log("[processUserQuery] Réponse API:", apiResponseText);
        } catch (error) {
            console.error("[processUserQuery] Erreur API:", error);
            apiResponseText = "Erreur technique avec l'assistant.";
        } finally {
            setChatbotIsProcessing(false);
            // S'assurer que triggerFn existe avant de l'appeler
            if (triggerFn) {
                triggerFn({ value: apiResponseText, trigger: '3_bot_response_display' });
            }
        }
        // La fonction trigger d'une étape de message doit retourner l'ID de l'étape suivante,
        // ou rien (undefined) si triggerNextStep est appelé à l'intérieur.
        // Puisque triggerNextStep est appelé dans finally, on ne retourne rien ici pour laisser
        // react-simple-chatbot attendre ce trigger asynchrone.
        // Retourner ' ' est une astuce pour que le message de l'étape '2_async_trigger_step'
        // soit remplacé par la réponse finale.
        return ' ';
    }, [patientIdFromState]); // Dépendance à patientIdFromState


    // Il n'y a plus besoin du composant QueryTriggerStep, car la logique est dans processUserQuery

    // --- Rendu JSX Principal ---
    return (
        <ThemeProvider theme={chatbotTheme}>
            <div className="min-h-screen bg-gray-100 pt-24 pb-20 px-4 md:px-6 relative">
                <Card className="max-w-2xl mx-auto shadow-lg rounded-lg overflow-hidden border border-gray-200">
                    <CardHeader className="bg-blue-50 p-6 border-b">
                        <CardTitle className="text-2xl font-bold text-blue-800 flex items-center">
                            <Clock className="mr-2 h-6 w-6 text-blue-600" />
                            Statut de Votre Demande d'Urgence
                        </CardTitle>
                        <CardDescription className="text-blue-700">
                            Suivi en temps réel (rafraîchissement auto).
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-5 p-6">
                        {loading ? (
                            <div className="text-center p-6">
                                <Loader2 className="h-8 w-8 animate-spin text-blue-600 mx-auto mb-3" />
                                <p className="text-gray-600">Chargement...</p>
                            </div>
                        ) : error ? (
                            <Alert variant="destructive" className="bg-red-50 border-red-200 text-red-800">
                                <AlertTriangle className="h-4 w-4" />
                                <AlertDescription>{error}</AlertDescription>
                            </Alert>
                        ) : patientDetails ? (
                            <>
                                {/* ... (Affichage des détails du patient, médecin, etc.) ... */}
                                <div className="border rounded-lg p-4 bg-gray-50 shadow-sm">
                                    <h4 className="font-semibold mb-1 text-gray-700">Statut Actuel :</h4>
                                    <p className="text-xl font-bold text-blue-700">{patientDetails.status || 'N/A'}</p>
                                    <p className="text-xs text-gray-500 mt-1">
                                        Dernière MAJ : {patientDetails.updatedAt ? new Date(patientDetails.updatedAt).toLocaleString('fr-FR') : 'N/A'}
                                    </p>
                                </div>
                                {renderDoctorInfo()}
                                <div className="border rounded-lg p-4 bg-blue-50 shadow-sm">
                                    <h4 className="font-semibold mb-1 text-blue-800 flex items-center">
                                        <Clock className="mr-2 h-4 w-4 text-blue-700" /> Temps d'Attente / Prochaine Étape
                                    </h4>
                                    <div className="flex items-center">
                                        <p className={`text-blue-900 font-semibold ${loadingWaitTime ? 'italic text-gray-500' : ''}`}>
                                            {estimatedWaitTime}
                                        </p>
                                        {loadingWaitTime && <Loader2 className="h-4 w-4 animate-spin text-blue-600 ml-2" />}
                                    </div>
                                    {errorWaitTime && <p className="text-red-500 text-xs mt-1">{errorWaitTime}</p>}
                                </div>
                                {renderMedicalAccessCode()}
                                <div className="text-xs text-gray-600 bg-gray-100 p-3 rounded-md border">
                                    <p className="font-medium mb-1">Infos importantes :</p>
                                    <ul className="list-disc pl-4 space-y-0.5">
                                        {patientDetails.status === "Demande Enregistrée" && <li>Examen de votre demande en cours.</li>}
                                        {patientDetails.status === "En Cours d'Examen" && <li>Évaluation de votre situation par un professionnel.</li>}
                                        {patientDetails.status === "Médecin Assigné" && <li>Dr. {doctorInfo?.username || 'Le médecin'} a été notifié.</li>}
                                        {patientDetails.status === "Médecin En Route" && <li>Le médecin est en chemin.</li>}
                                        {patientDetails.status === "Traité" && <li>Prise en charge terminée.</li>}
                                        {patientDetails.status === "Annulé" && <li>Demande annulée.</li>}
                                        <li>Restez joignable.</li>
                                    </ul>
                                </div>
                                <div className="flex flex-col sm:flex-row justify-between gap-3 mt-4">
                                    <Button asChild variant="outline">
                                        <Link to="/home">Accueil</Link>
                                    </Button>
                                    {!['Traité', 'Annulé'].includes(patientDetails.status) && (

                                        <Button asChild variant="default" className="bg-blue-900 hover:bg-blue-700 text-white">
                                            <Link to="/document">
                                               See your medical record
                                            </Link>
                                        </Button>
                                    )}
                                </div>
                            </>
                        ) : (
                            <div className="text-center p-6 text-gray-600">
                                ID Patient manquant ou données non trouvées.
                            </div>
                        )}
                    </CardContent>
                </Card>

                {/* --- Section Chatbot --- */}
                {!loading && patientIdFromState && (
                    <>
                        {!showChatbot && (
                            <Button
                                className="fixed bottom-6 right-6 rounded-full w-14 h-14 shadow-lg bg-blue-600 hover:bg-blue-700 text-white z-[100] flex items-center justify-center p-0"
                                onClick={() => setShowChatbot(true)}
                                aria-label="Ouvrir l'assistant virtuel"
                                title="Assistant Virtuel"
                            >
                                <MessageSquare size={24} />
                            </Button>
                        )}

                        {showChatbot && (
                            <div className="fixed bottom-6 right-6 z-[100] shadow-xl rounded-lg overflow-hidden border border-gray-300 bg-white">
                                <ChatBot
                                    key={patientIdFromState + "_chatbot_" + (showChatbot ? "open" : "closed")}
                                    headerTitle="Assistant Virtuel"
                                    steps={[
                                        {
                                            id: '0_welcome',
                                            message: 'Bonjour ! Comment puis-je vous aider ?',
                                            trigger: '1_user_input',
                                        },
                                        {
                                            id: '1_user_input',
                                            user: true,
                                            trigger: '2_async_trigger_step',
                                        },
                                        {
                                            id: '2_async_trigger_step',
                                            // Le message est une fonction pour réagir à l'état de chargement
                                            message: () => chatbotIsProcessing
                                                ? 'Recherche en cours...'
                                                : 'Un instant, je traite votre demande...',
                                            // La fonction trigger exécute l'appel API
                                            trigger: processUserQuery,
                                        },
                                        {
                                            id: '3_bot_response_display',
                                            message: '{previousValue}', // Affiche la réponse de l'API (ou erreur)
                                            trigger: '4_ask_again',
                                        },
                                        {
                                            id: '4_ask_again',
                                            message: 'Avez-vous une autre question ?',
                                            trigger: '1_user_input', // Reboucle
                                        },
                                        {
                                            id: '5_error_display', // Étape spécifique si processUserQuery déclenche une erreur explicite
                                            message: '{previousValue}',
                                            trigger: '4_ask_again',
                                        },
                                    ]}
                                    floating={false}
                                    opened={true}
                                    toggleFloating={() => setShowChatbot(false)}
                                    width="350px"
                                    botDelay={100}
                                    userDelay={0}
                                />
                            </div>
                        )}
                    </>
                )}
                {/* --- Fin Section Chatbot --- */}
            </div>
        </ThemeProvider>
    );
};

export default EmergencyStatus;
</file>

<file path="src/pages/Forum.jsx">
import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
    Sheet,
    SheetContent,
    SheetHeader,
    SheetTitle,
    SheetTrigger,
} from "@/components/ui/sheet";
import {
    MessageCircle,
    ThumbsUp,
    MessageSquare,
    Search,
    Filter,
} from "lucide-react";

const initialTopics = [
    {
        id: "1",
        title: "New Treatment Methods Discussion",
        author: "Dr. Sarah Johnson",
        content: "I'd like to discuss the latest treatment methods for cardiac patients. Recent studies have shown promising results with minimally invasive procedures. What are your thoughts on implementing these in our hospital?",
        likes: 15,
        replies: 23,
        date: "2024-02-20",
        category: "Cardiology",
    },
    {
        id: "2",
        title: "Emergency Protocol Updates",
        author: "Dr. Michael Chen",
        content: "We need to review our emergency protocols for the night shift. I've noticed some inconsistencies in our response times. Let's discuss potential improvements and standardization across all departments.",
        likes: 8,
        replies: 12,
        date: "2024-02-19",
        category: "Emergency",
    },
    {
        id: "3",
        title: "Medical Equipment Training Session",
        author: "Dr. Emily Rodriguez",
        content: "We're organizing a training session for the new MRI machine next week. All interested staff members please indicate your preferred time slots. This is mandatory for radiology department staff.",
        likes: 20,
        replies: 18,
        date: "2024-02-18",
        category: "Training",
    },
];

const Forum = () => {
    const [topics, setTopics] = useState(initialTopics);
    const [searchQuery, setSearchQuery] = useState("");
    const [newTopic, setNewTopic] = useState({
        title: "",
        content: "",
        category: "",
    });

    const handleSearch = (query) => {
        setSearchQuery(query);
        // If search query is empty, show all topics
        if (!query.trim()) {
            setTopics(initialTopics);
            return;
        }
        // Filter topics based on search query
        const filtered = initialTopics.filter(
            (topic) =>
                topic.title.toLowerCase().includes(query.toLowerCase()) ||
                topic.content.toLowerCase().includes(query.toLowerCase()) ||
                topic.category.toLowerCase().includes(query.toLowerCase())
        );
        setTopics(filtered);
    };

    const handleLike = (topicId) => {
        setTopics(
            topics.map((topic) =>
                topic.id === topicId
                    ? { ...topic, likes: topic.likes + 1 }
                    : topic
            )
        );
    };

    const handleAddTopic = () => {
        const newTopicData = {
            id: (topics.length + 1).toString(),
            title: newTopic.title,
            author: "Dr. John Doe", // In a real app, this would come from auth
            content: newTopic.content,
            likes: 0,
            replies: 0,
            date: new Date().toISOString().split("T")[0],
            category: newTopic.category,
        };

        setTopics([newTopicData, ...topics]);
        setNewTopic({ title: "", content: "", category: "" });
    };

    return (
        <div className="space-y-6 p-6">
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Medical Forum</h1>
                <Sheet>
                    <SheetTrigger asChild>
                        <Button>
                            <MessageCircle className="w-4 h-4 mr-2" />
                            New Topic
                        </Button>
                    </SheetTrigger>
                    <SheetContent>
                        <SheetHeader>
                            <SheetTitle>Create New Topic</SheetTitle>
                        </SheetHeader>
                        <div className="space-y-4 mt-6">
                            <Input
                                placeholder="Topic Title"
                                value={newTopic.title}
                                onChange={(e) =>
                                    setNewTopic({ ...newTopic, title: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Category"
                                value={newTopic.category}
                                onChange={(e) =>
                                    setNewTopic({ ...newTopic, category: e.target.value })
                                }
                            />
                            <textarea
                                placeholder="Write your topic content here..."
                                className="w-full min-h-[200px] p-4 border rounded-md"
                                value={newTopic.content}
                                onChange={(e) =>
                                    setNewTopic({ ...newTopic, content: e.target.value })
                                }
                            />
                            <Button onClick={handleAddTopic} className="w-full">
                                Post Topic
                            </Button>
                        </div>
                    </SheetContent>
                </Sheet>
            </div>

            <div className="flex gap-4">
                <div className="flex-1">
                    <div className="flex gap-4 mb-6">
                        <div className="flex-1">
                            <div className="relative">
                                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                                <Input
                                    placeholder="Search topics..."
                                    className="pl-10"
                                    value={searchQuery}
                                    onChange={(e) => handleSearch(e.target.value)}
                                />
                            </div>
                        </div>
                        <Button variant="outline">
                            <Filter className="w-4 h-4 mr-2" />
                            Filter
                        </Button>
                    </div>

                    <div className="space-y-4">
                        {topics.map((topic) => (
                            <Card key={topic.id} className="hover:shadow-lg transition-shadow">
                                <CardHeader>
                                    <div className="flex justify-between items-center">
                                        <CardTitle>{topic.title}</CardTitle>
                                        <span className="text-sm text-muted-foreground">
                                            {topic.date}
                                        </span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span className="text-sm text-muted-foreground">
                                            Posted by {topic.author}
                                        </span>
                                        <span className="text-xs bg-secondary px-2 py-1 rounded-full">
                                            {topic.category}
                                        </span>
                                    </div>
                                </CardHeader>
                                <CardContent>
                                    <p className="mb-4">{topic.content}</p>
                                    <div className="flex items-center gap-4 text-sm text-muted-foreground">
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => handleLike(topic.id)}
                                        >
                                            <ThumbsUp className="w-4 h-4 mr-2" />
                                            {topic.likes} Likes
                                        </Button>
                                        <Button variant="ghost" size="sm">
                                            <MessageSquare className="w-4 h-4 mr-2" />
                                            {topic.replies} Replies
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Forum;
</file>

<file path="src/pages/index.jsx">
const Index = () => {
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="text-center">
                <h1 className="text-4xl font-bold mb-4">Welcome to your profile </h1>
                <p className="text-xl text-gray-600">Start here!</p>
            </div>
        </div>
    );
};

export default Index;
</file>

<file path="src/pages/Login.jsx">
"use client"
import ReCAPTCHA from "react-google-recaptcha";
import { useState, useEffect, useRef } from "react"
import axios from "axios"
import { Link, useNavigate } from "react-router-dom"
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google"
import "bootstrap/dist/css/bootstrap.min.css"

const images = [
  {
    url: "/images/logo0.png",
    title: "Welcome to Our Platform",
    description: "Your journey to amazing experiences starts here.",
  },
  {
    url: "/images/imageurg.jpg",
    title: "Discover New Possibilities",
    description: "Unlock your potential with our innovative solutions.",
  },
  {
    url: "/images/25291-removebg-preview.png",
    title: "Connect With Others",
    description: "Take your real time of waiting.",
  },
]

const Login = () => {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [message, setMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [recaptchaLoaded, setRecaptchaLoaded] = useState(false);

  const navigate = useNavigate()
const recaptchaRef = useRef(null);
  useEffect(() => {
     const siteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY;
    console.log("reCAPTCHA site key:", siteKey);
    if (!siteKey) {
      console.error("reCAPTCHA site key is not defined in .env file");
      setMessage("Erreur de configuration reCAPTCHA. Veuillez contacter l'administrateur.");
      setRecaptchaLoaded(false);
    } else {
      setRecaptchaLoaded(true);
    }

    const interval = setInterval(() => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length)
    }, 3000)
    return () => clearInterval(interval)
  }, [])

  const handleSubmit = async (e) => {
    e.preventDefault()
    setIsLoading(true)
    try {
      const response = await axios.post(
        "http://localhost:8089/api/auth/login",
        { email, password },
        { withCredentials: true },
      )
      const userData = response.data.user
      userData.profilePicture = userData.gender === "male" ? "/images/male.jpg" : "/images/female.jpg"
      sessionStorage.setItem("user", JSON.stringify(userData))
      setMessage(`Connexion réussie ! Bienvenue, ${userData.username}`)
      userData.role === "Patient" ? navigate("/home") : navigate("/dashboard")
    } catch (error) {
      setMessage(error.response?.data?.message || "Erreur lors de la connexion")
    } finally {
      setIsLoading(false)
    }
  }

  const handleGoogleLoginSuccess = async (response) => {
    try {
      const res = await axios.post("http://localhost:8089/api/auth/google-login", {
        token: response.credential,
      })
      localStorage.setItem("user", JSON.stringify(res.data.user))
      localStorage.setItem("token", res.data.token)
      setMessage("Connexion réussie avec Google !")
      navigate("/home")
    } catch (error) {
      setMessage("Erreur lors de l'authentification Google")
    }
  }
const handleRecaptchaChange = (token) => {
    console.log("reCAPTCHA token received:", token);
    if (token) {
      setNotBot(true);
      setMessage("");
    } else {
      setNotBot(false);
      setMessage("Vérification reCAPTCHA expirée. Veuillez réessayer.");
      if (recaptchaRef.current) {
        recaptchaRef.current.reset();
      }
    }
  };
  const handleRecaptchaError = () => {
    console.error("reCAPTCHA error occurred");
    setNotBot(false);
    setMessage("Erreur de chargement de reCAPTCHA. Vérifiez votre connexion ou contactez l'administrateur.");
    if (recaptchaRef.current) {
      recaptchaRef.current.reset();
    }
  };

  const handleRecaptchaExpired = () => {
    console.log("reCAPTCHA expired");
    setNotBot(false);
    setMessage("Vérification reCAPTCHA expirée. Veuillez réessayer.");
    if (recaptchaRef.current) {
      recaptchaRef.current.reset();
    }
  };
  const handleGoogleLoginFailure = () => setMessage("Échec de l'authentification Google")

  return (
    <div className="d-flex vh-100">
      {/* Left Side - Logo and Carousel */}
      <div className="d-none d-md-flex col-md-7 position-relative overflow-hidden bg-light">
        {/* Logo Placement */}
       

        {/* Carousel Images */}
        {images.map((image, index) => (
          <div
            key={index}
            className={`position-absolute w-100 h-100 transition-opacity ${index === currentImageIndex ? "opacity-100" : "opacity-0"}`}
            style={{ transition: "opacity 1s ease-in-out" }}
          >
            <img
              src={image.url || "/placeholder.svg"}
              alt={image.title}
              className="w-100 h-100 object-fit-cover"
              style={{ objectPosition: "center" }}
            />
            <div className="position-absolute bottom-0 p-4 text-white bg-dark bg-opacity-50 w-100">
              <h3 className="mb-1 fs-4">{image.title}</h3>
              <p className="mb-0 fs-6">{image.description}</p>
            </div>
          </div>
        ))}

        {/* Indicators */}
        <div className="position-absolute bottom-4 start-50 translate-middle-x d-flex gap-2 mb-4">
          {images.map((_, index) => (
            <button
              key={index}
              className={`rounded-circle ${index === currentImageIndex ? "bg-primary" : "bg-white opacity-75"}`}
              style={{ width: "12px", height: "12px", border: "none", cursor: "pointer" }}
              onClick={() => setCurrentImageIndex(index)}
              aria-label={`Slide ${index + 1}`}
            ></button>
          ))}
        </div>
      </div>

      {/* Right Side - Form */}
      <div className="col-12 col-md-5 d-flex flex-column justify-content-center px-4 px-lg-5 bg-white">
      
          <div className="text-center mb-4">
          <img
            src="/images/logo0.png"
            alt="Emergency Department Logo"
            className="img-fluid"
            style={{ maxHeight: "80px" }}
          />
            <h2 className="fw-bold text-dark mb-1">Sign In</h2>
            <p className="text-muted small">Access your Emergency Department account</p>
            
          </div>

          {message && (
            <div className={`alert ${message.includes("réussie") ? "alert-success" : "alert-danger"} py-2 mb-3`}>
              {message}
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label small fw-medium">Email Address</label>
              <input
                type="email"
                className="form-control form-control-lg bg-light"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
                required
              />
            </div>
            <div className="mb-3">
              <div className="d-flex justify-content-between align-items-center">
                <label className="form-label small fw-medium">Password</label>
                <Link to="/forgotpassword" className="text-decoration-none small" style={{ color: "#6DDCCF" }}>
                  Forgot Password?
                </Link>
              </div>
              <input
                type="password"
                className="form-control form-control-lg bg-light"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Enter your password"
                required
              />
            </div>
            <div className="mb-4">
              <div className="form-check">
                <input type="checkbox" className="form-check-input" id="rememberMe" />
                <label className="form-check-label small" htmlFor="rememberMe">
                  Remember Me
                </label>
              </div>
            </div>
            <div className="mb-3 flex justify-center">
            {recaptchaLoaded ? (
              <ReCAPTCHA
                ref={recaptchaRef}
                sitekey={import.meta.env.VITE_RECAPTCHA_SITE_KEY}
                onChange={handleRecaptchaChange}
                onErrored={handleRecaptchaError}
                onExpired={handleRecaptchaExpired}
                className="transform scale-90"
              />
            ) : (
              <div className="alert alert-danger">
                Impossible de charger reCAPTCHA. Vérifiez votre connexion ou contactez l'administrateur.
              </div>
            )}
          </div>
            <button
              type="submit"
              className="btn btn-lg w-100 fw-medium"
              style={{
                backgroundColor: "#6DDCCF",
                borderColor: "#6DDCCF",
                color: "white",
              }}
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  Connexion en cours...
                </>
              ) : (
                "Se connecter"
              )}
            </button>
          </form>

          <div className="d-flex align-items-center my-4">
            <hr className="flex-grow-1" />
            <span className="mx-3 text-muted small">OR</span>
            <hr className="flex-grow-1" />
          </div>

          <GoogleOAuthProvider clientId="681587327914-bh8qlfn9kr76hci8d4n0v1mces8ac0r0.apps.googleusercontent.com">
            <div className="d-flex justify-content-center">
              <GoogleLogin
                onSuccess={handleGoogleLoginSuccess}
                onError={handleGoogleLoginFailure}
                theme="outline"
                size="large"
                text="signin_with"
                shape="rectangular"
              />
            </div>
          </GoogleOAuthProvider>

          <p className="text-center mt-4 mb-0">
            Don't have an account?{" "}
            <Link to="/register" style={{ color: "#6DDCCF" }}>
              Sign Up
            </Link>
          </p>
        
      </div>
    </div>
  )
}

export default Login
</file>

<file path="src/pages/MedicalDocument.jsx">
"use client"

import { motion, AnimatePresence } from "framer-motion"
import { useState } from "react"
import { useNavigate } from "react-router-dom"
import axios from "axios"
import { Card, CardHeader, CardTitle, CardContent, CardDescription, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import ParticlesComponent from "@/components/ParticlesComponent"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import {
  Clipboard,
  FileText,
  User,
  Stethoscope,
  AlertCircle,
  CheckCircle,
  Shield,
  Heart,
  Pill,
  AlertTriangle,
  Activity,
  Phone,
  Clock,
  Calendar,
  Droplet,
  Thermometer,
  Gauge,
  ClipboardList,
  Dna,
  Syringe,
  LigatureIcon as Bandage,
  Microscope,
} from "lucide-react"

// Color palette
const colors = {
  primary: "#1e3a8a", // Blue-900
  secondary: "#0891b2", // Cyan
  alert: "#dc2626", // Red
  primaryLight: "#dbeafe",
  secondaryLight: "#cffafe",
  alertLight: "#1e3a8a",
  bgAccent: "#1e3a8a", // Light cyan for background
  white : "#ffffff"
}

// Animated Medical Icons Component
const AnimatedMedicalIcons = () => {
  const medicalIcons = [Stethoscope, Heart, Pill, Syringe, Bandage, Microscope, Dna, Thermometer]
  const iconCount = 15 // Reduced for better performance and clarity

  const darkColors = {
    primary: "#1e3a8a",
    secondary: "#0c4a6e",
    accent: "#7f1d1d",
  }

  const getRandomPosition = () => ({
    x: Math.random() * window.innerWidth,
    y: Math.random() * window.innerHeight,
  })

  const getRandomAnimation = () => ({
    rotate: [90, 180], // Full rotation
    scale: [0.8, 1.2], // Size variation
    opacity: [0.15, 0.3], // Lower opacity for better transparency
    transition: {
      duration: 4 + Math.random() * 4,
      repeat: Number.POSITIVE_INFINITY,
      repeatType: "reverse",
      ease: "easeInOut",
    },
  })

  return (
    <div className="fixed inset-0 z-5 pointer-events-none">
      {Array.from({ length: iconCount }).map((_, index) => {
        const Icon = medicalIcons[Math.floor(Math.random() * medicalIcons.length)]
        return (
          <motion.div
            key={index}
            className="absolute"
            initial={{
              ...getRandomPosition(),
              scale: 0.8,
              opacity: 0.15,
            }}
            animate={getRandomAnimation()}
            whileHover={{
              scale: 1.5,
              opacity: 0.5,
              transition: { duration: 0.3 },
            }}
          >
            <Icon
              className="h-12 w-12"
              style={{
                color: Object.values(darkColors)[Math.floor(Math.random() * Object.values(darkColors).length)],
                filter: "drop-shadow(0 2px 4px rgba(0,0,0,0.1))",
              }}
            />
          </motion.div>
        )
      })}
    </div>
  )
}

// Tab transition variants
const tabVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: "easeOut",
    },
  },
  exit: {
    opacity: 0,
    y: -20,
    transition: {
      duration: 0.3,
    },
  },
}

// Card hover animation
const cardHoverVariants = {
  hover: {
    y: -5,
    boxShadow: "0 10px 25px rgba(0, 0, 0, 0.1)",
    transition: {
      duration: 0.3,
    },
  },
}

const MedicalDocument = () => {
  const [accessCode, setAccessCode] = useState("")
  const [medicalRecord, setMedicalRecord] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [isValid, setIsValid] = useState(false)
  const [activeTab, setActiveTab] = useState("general")
  const navigate = useNavigate()

  const handleDownloadPDF = async () => {
    try {
      setError(null)
      setLoading(true)
      const response = await axios.get(
        `http://localhost:8089/api/medical-records/by-access-code/${medicalRecord.accessCode}/download-pdf`,
        { responseType: "blob", timeout: 30000 },
      )
      const contentType = response.headers["content-type"]
      if (contentType && contentType.includes("application/json")) {
        const errorText = await response.data.text()
        const errorJson = JSON.parse(errorText)
        throw new Error(errorJson.message || "Error generating PDF")
      }
      const url = window.URL.createObjectURL(new Blob([response.data]))
      const link = document.createElement("a")
      link.href = url
      link.setAttribute("download", `medical_record_${medicalRecord.accessCode}.pdf`)
      document.body.appendChild(link)
      link.click()
      link.parentNode.removeChild(link)
    } catch (error) {
      let errorMessage = "PDF generation failed. Please contact support."
      if (error.response) {
        if (error.response.data instanceof Blob) {
          const text = await error.response.data.text()
          const json = JSON.parse(text)
          errorMessage = json.message || `Server error (${error.response.status})`
        } else {
          errorMessage = error.response.data.message || `Server error (${error.response.status})`
        }
      } else if (error.request) {
        errorMessage = "No response from server"
      } else if (error.message) {
        errorMessage = error.message
      }
      setError(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!accessCode.trim()) {
      setError("Please enter a valid access code")
      return
    }
    setLoading(true)
    setError(null)
    try {
      const response = await axios.get(`http://localhost:8089/api/medical-records/by-access-code/${accessCode}`)
      if (response.data) {
        setMedicalRecord(response.data)
        setIsValid(true)
      } else {
        setError("No medical record found with this access code")
      }
    } catch (err) {
      setError(err.response?.data?.message || "Error accessing record")
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString) =>
    dateString
      ? new Date(dateString).toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        })
      : "Not specified"

  const getFileIcon = (fileType) => {
    switch (fileType) {
      case "Prescription":
        return <Pill className="h-5 w-5" style={{ color: colors.primary }} />
      case "Diagnostic":
        return <Stethoscope className="h-5 w-5" style={{ color: colors.secondary }} />
      case "Treatment":
        return <Activity className="h-5 w-5" style={{ color: "#f97316" }} />
      case "VitalSigns":
        return <Heart className="h-5 w-5" style={{ color: colors.alert }} />
      case "Triage":
        return <AlertTriangle className="h-5 w-5" style={{ color: "#f59e0b" }} />
      case "Discharge":
        return <Clipboard className="h-5 w-5" style={{ color: colors.primary }} />
      case "PatientInformation":
        return <User className="h-5 w-5" style={{ color: "#8b5cf6" }} />
      default:
        return <FileText className="h-5 w-5" style={{ color: "#6B7280" }} />
    }
  }

  const getPriorityColor = (level) => {
    switch (level) {
      case "Resuscitation":
        return "#dc2626"
      case "Emergency":
        return "#ef4444"
      case "Urgent":
        return "#f97316"
      case "Semi-urgent":
        return "#f59e0b"
      case "Non-urgent":
        return "#22c55e"
      default:
        return "#6B7280"
    }
  }

  const getPriorityLightColor = (level) => {
    switch (level) {
      case "Resuscitation":
      case "Emergency":
        return "#fee2e2"
      case "Urgent":
        return "#fff7ed"
      case "Semi-urgent":
        return "#fef9c3"
      case "Non-urgent":
        return "#dcfce7"
      default:
        return "#F3F4F6"
    }
  }

  const translatePriorityLevel = (level) => level || "Unknown"

  const getPainLevelColor = (level) => {
    if (level <= 3) return "#22c55e"
    if (level <= 6) return "#f59e0b"
    return "#ef4444"
  }

  const getEmergencyLevelColor = (level) => {
    switch (level?.toLowerCase()) {
      case "low":
        return "#22c55e"
      case "medium":
        return "#f97316"
      case "high":
        return "#ef4444"
      default:
        return "#6B7280"
    }
  }

  const renderFileDetails = (file) => {
    switch (file.type) {
      case "Prescription":
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <Pill className="h-5 w-5" style={{ color: colors.primary }} />
              <h3 className="font-semibold text-lg">Medical Prescription</h3>
            </div>
            {file.details?.medications?.length > 0 ? (
              <div className="space-y-3">
                <h4 className="font-medium text-sm text-gray-700">Prescribed Medications</h4>
                <div className="grid gap-3">
                  {file.details.medications.map((med, idx) => (
                    <motion.div key={idx} whileHover="hover" variants={cardHoverVariants}>
                      <Card className="border-l-4 transition-shadow" style={{ borderLeftColor: colors.primary }}>
                        <CardContent className="p-4">
                          <div className="flex justify-between items-center">
                            <div className="font-medium">{med.name}</div>
                            <Badge
                              style={{
                                backgroundColor: colors.primaryLight,
                                color: colors.primary,
                              }}
                            >
                              {med.dosage}
                            </Badge>
                          </div>
                          <div className="text-sm text-gray-600 mt-1">
                            {med.frequency}, {med.duration}
                          </div>
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </div>
            ) : (
              <p className="text-sm text-gray-500 italic">No medications prescribed</p>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-gray-700">Notes</h4>
                <p className="text-gray-600 mt-1 p-3 bg-gray-50 rounded-md">{file.notes}</p>
              </div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Date recorded: {formatDate(file.dateRecorded)}
            </div>
          </motion.div>
        )
      case "Diagnostic":
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <Stethoscope className="h-5 w-5" style={{ color: colors.secondary }} />
              <h3 className="font-semibold text-lg">Diagnosis</h3>
            </div>
            {file.details?.diagnosis && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-gray-700">Primary Diagnosis</h4>
                <motion.div whileHover="hover" variants={cardHoverVariants}>
                  <Card className="border-l-4 transition-shadow" style={{ borderLeftColor: colors.secondary }}>
                    <CardContent className="p-4">{file.details.diagnosis}</CardContent>
                  </Card>
                </motion.div>
              </div>
            )}
            {file.details?.diagnosticTests?.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-gray-700">Diagnostic Tests</h4>
                <div className="grid gap-2">
                  {file.details.diagnosticTests.map((test, idx) => (
                    <motion.div
                      key={idx}
                      whileHover={{ y: -2, boxShadow: "0 4px 12px rgba(0, 0, 0, 0.05)" }}
                      transition={{ duration: 0.2 }}
                    >
                      <div className="flex justify-between items-center p-3 border rounded-md transition-shadow">
                        <div>
                          <span className="font-medium">{test.testName}</span>
                          <div className="text-sm text-gray-500">{formatDate(test.date)}</div>
                        </div>
                        <Badge
                          style={{
                            backgroundColor: test.result.toLowerCase().includes("normal")
                              ? colors.secondaryLight
                              : colors.alertLight,
                            color: test.result.toLowerCase().includes("normal") ? colors.secondary : colors.white,
                          }}
                        >
                          {test.result}
                        </Badge>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-gray-700">Notes</h4>
                <p className="text-gray-600 mt-1 p-3 bg-gray-50 rounded-md">{file.notes}</p>
              </div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Date recorded: {formatDate(file.dateRecorded)}
            </div>
          </motion.div>
        )
      case "Treatment":
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <Activity className="h-5 w-5" style={{ color: "#f97316" }} />
              <h3 className="font-semibold text-lg">Treatment</h3>
            </div>
            {file.details?.procedures?.length > 0 ? (
              <div className="space-y-3">
                <h4 className="font-medium text-sm text-gray-700">Procedures</h4>
                <div className="grid gap-3">
                  {file.details.procedures.map((procedure, idx) => (
                    <motion.div key={idx} whileHover="hover" variants={cardHoverVariants}>
                      <Card className="border-l-4 transition-shadow" style={{ borderLeftColor: "#f97316" }}>
                        <CardContent className="p-4">
                          <div className="font-medium">{procedure.name}</div>
                          <div className="text-sm text-gray-500">{formatDate(procedure.date)}</div>
                          {procedure.notes && (
                            <div className="mt-2 text-sm text-gray-600 p-2 bg-gray-50 rounded-md">
                              {procedure.notes}
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </div>
            ) : (
              <p className="text-sm text-gray-500 italic">No procedures recorded</p>
            )}
            {file.details?.diagnosticTests?.length > 0 && (
              <div className="space-y-2 mt-4">
                <h4 className="font-medium text-sm text-gray-700">Associated Tests</h4>
                <div className="grid gap-2">
                  {file.details.diagnosticTests.map((test, idx) => (
                    <motion.div
                      key={idx}
                      whileHover={{ y: -2, boxShadow: "0 4px 12px rgba(0, 0, 0, 0.05)" }}
                      transition={{ duration: 0.2 }}
                    >
                      <div className="flex justify-between items-center p-3 border rounded-md">
                        <div>
                          <span className="font-medium">{test.testName}</span>
                          <div className="text-sm text-gray-500">{formatDate(test.date)}</div>
                        </div>
                        <Badge>{test.result}</Badge>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-gray-700">Notes</h4>
                <p className="text-gray-600 mt-1 p-3 bg-gray-50 rounded-md">{file.notes}</p>
              </div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Date recorded: {formatDate(file.dateRecorded)}
            </div>
          </motion.div>
        )
      case "VitalSigns":
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <Heart className="h-5 w-5" style={{ color: colors.alert }} />
              <h3 className="font-semibold text-lg">Vital Signs</h3>
            </div>
            {file.details?.vitalSigns && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {file.details.vitalSigns.temperature && (
                  <motion.div whileHover="hover" variants={cardHoverVariants}>
                    <Card className="transition-shadow">
                      <CardContent className="p-4 flex items-center gap-3">
                        <div className="p-2 rounded-full" style={{ backgroundColor: colors.alertLight }}>
                          <Thermometer className="h-5 w-5" style={{ color: colors.alert }} />
                        </div>
                        <div>
                          <div className="text-sm text-gray-500">Temperature</div>
                          <div className="font-medium">{file.details.vitalSigns.temperature} °C</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
                {file.details.vitalSigns.bloodPressure && (
                  <motion.div whileHover="hover" variants={cardHoverVariants}>
                    <Card className="transition-shadow">
                      <CardContent className="p-4 flex items-center gap-3">
                        <div className="p-2 rounded-full" style={{ backgroundColor: colors.primaryLight }}>
                          <Activity className="h-5 w-5" style={{ color: colors.primary }} />
                        </div>
                        <div>
                          <div className="text-sm text-gray-500">Blood Pressure</div>
                          <div className="font-medium">
                            {file.details.vitalSigns.bloodPressure.systolic}/
                            {file.details.vitalSigns.bloodPressure.diastolic} mmHg
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
                {file.details.vitalSigns.heartRate && (
                  <motion.div whileHover="hover" variants={cardHoverVariants}>
                    <Card className="transition-shadow">
                      <CardContent className="p-4 flex items-center gap-3">
                        <div className="p-2 rounded-full" style={{ backgroundColor: colors.alertLight }}>
                          <Heart className="h-5 w-5" style={{ color: colors.alert }} />
                        </div>
                        <div>
                          <div className="text-sm text-gray-500">Heart Rate</div>
                          <div className="font-medium">{file.details.vitalSigns.heartRate} bpm</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
                {file.details.vitalSigns.respiratoryRate && (
                  <motion.div whileHover="hover" variants={cardHoverVariants}>
                    <Card className="transition-shadow">
                      <CardContent className="p-4 flex items-center gap-3">
                        <div className="p-2 rounded-full" style={{ backgroundColor: colors.secondaryLight }}>
                          <Droplet className="h-5 w-5" style={{ color: colors.secondary }} />
                        </div>
                        <div>
                          <div className="text-sm text-gray-500">Respiratory Rate</div>
                          <div className="font-medium">{file.details.vitalSigns.respiratoryRate} resp/min</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
                {file.details.vitalSigns.oxygenSaturation && (
                  <motion.div whileHover="hover" variants={cardHoverVariants}>
                    <Card className="transition-shadow">
                      <CardContent className="p-4 flex items-center gap-3">
                        <div className="p-2 rounded-full" style={{ backgroundColor: colors.primaryLight }}>
                          <Gauge className="h-5 w-5" style={{ color: colors.primary }} />
                        </div>
                        <div>
                          <div className="text-sm text-gray-500">Oxygen Saturation</div>
                          <div className="font-medium">{file.details.vitalSigns.oxygenSaturation}%</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
              </div>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-gray-700">Notes</h4>
                <p className="text-gray-600 mt-1 p-3 bg-gray-50 rounded-md">{file.notes}</p>
              </div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Date recorded: {formatDate(file.dateRecorded)}
            </div>
          </motion.div>
        )
      case "Triage":
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" style={{ color: "#f59e0b" }} />
              <h3 className="font-semibold text-lg">Triage</h3>
            </div>
            {file.details?.priorityLevel && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-gray-700">Priority Level</h4>
                <motion.div whileHover="hover" variants={cardHoverVariants}>
                  <Card
                    className="border-l-4 transition-shadow"
                    style={{
                      borderLeftColor: getPriorityColor(file.details.priorityLevel),
                    }}
                  >
                    <CardContent className="p-4 flex items-center justify-between">
                      <div className="font-medium">{translatePriorityLevel(file.details.priorityLevel)}</div>
                      <Badge
                        style={{
                          backgroundColor: getPriorityLightColor(file.details.priorityLevel),
                          color: getPriorityColor(file.details.priorityLevel),
                        }}
                      >
                        {file.details.priorityLevel}
                      </Badge>
                    </CardContent>
                  </Card>
                </motion.div>
              </div>
            )}
            {file.details?.chiefComplaint && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-gray-700">Chief Complaint</h4>
                <motion.div whileHover="hover" variants={cardHoverVariants}>
                  <Card className="transition-shadow">
                    <CardContent className="p-4">{file.details.chiefComplaint}</CardContent>
                  </Card>
                </motion.div>
              </div>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-gray-700">Notes</h4>
                <p className="text-gray-600 mt-1 p-3 bg-gray-50 rounded-md">{file.notes}</p>
              </div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Date recorded: {formatDate(file.dateRecorded)}
            </div>
          </motion.div>
        )
      case "Discharge":
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <Clipboard className="h-5 w-5" style={{ color: colors.primary }} />
              <h3 className="font-semibold text-lg">Discharge</h3>
            </div>
            {file.details?.dischargeInstructions && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-gray-700">Discharge Instructions</h4>
                <motion.div whileHover="hover" variants={cardHoverVariants}>
                  <Card className="transition-shadow">
                    <CardContent className="p-4">{file.details.dischargeInstructions}</CardContent>
                  </Card>
                </motion.div>
              </div>
            )}
            {file.details?.followUpDate && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-gray-700">Follow-up Appointment</h4>
                <motion.div whileHover="hover" variants={cardHoverVariants}>
                  <Card className="transition-shadow">
                    <CardContent className="p-4 flex items-center gap-2">
                      <Calendar className="h-5 w-5" style={{ color: colors.primary }} />
                      <p>{formatDate(file.details.followUpDate)}</p>
                    </CardContent>
                  </Card>
                </motion.div>
              </div>
            )}
            {file.details?.medications?.length > 0 && (
              <div className="space-y-2 mt-4">
                <h4 className="font-medium text-sm text-gray-700">Medications to Continue</h4>
                <div className="grid gap-2">
                  {file.details.medications.map((med, idx) => (
                    <motion.div
                      key={idx}
                      whileHover={{ y: -2, boxShadow: "0 4px 12px rgba(0, 0, 0, 0.05)" }}
                      transition={{ duration: 0.2 }}
                    >
                      <div className="flex justify-between items-center p-3 border rounded-md">
                        <div>
                          <span className="font-medium">{med.name}</span>
                          <div className="text-sm text-gray-500">
                            {med.dosage}, {med.frequency}, {med.duration}
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-gray-700">Notes</h4>
                <p className="text-gray-600 mt-1 p-3 bg-gray-50 rounded-md">{file.notes}</p>
              </div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Date recorded: {formatDate(file.dateRecorded)}
            </div>
          </motion.div>
        )
      case "PatientInformation":
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <User className="h-5 w-5" style={{ color: "#8b5cf6" }} />
              <h3 className="font-semibold text-lg">Patient Information</h3>
            </div>
            {file.details?.patientInfo && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <motion.div whileHover="hover" variants={cardHoverVariants}>
                  <Card className="transition-shadow">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Personal Information</CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0 space-y-2">
                      {file.details.patientInfo.firstName && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">First Name</span>
                          <span className="font-medium">{file.details.patientInfo.firstName}</span>
                        </div>
                      )}
                      {file.details.patientInfo.lastName && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Last Name</span>
                          <span className="font-medium">{file.details.patientInfo.lastName}</span>
                        </div>
                      )}
                      {file.details.patientInfo.dateOfBirth && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Date of Birth</span>
                          <span className="font-medium">{file.details.patientInfo.dateOfBirth}</span>
                        </div>
                      )}
                      {file.details.patientInfo.gender && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Gender</span>
                          <span className="font-medium">{file.details.patientInfo.gender}</span>
                        </div>
                      )}
                      {file.details.patientInfo.address && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Address</span>
                          <span className="font-medium">{file.details.patientInfo.address}</span>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
                <motion.div whileHover="hover" variants={cardHoverVariants}>
                  <Card className="transition-shadow">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Contact</CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0 space-y-2">
                      {file.details.patientInfo.phoneNumber && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Phone</span>
                          <span className="font-medium">{file.details.patientInfo.phoneNumber}</span>
                        </div>
                      )}
                      {file.details.patientInfo.email && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Email</span>
                          <span className="font-medium">{file.details.patientInfo.email}</span>
                        </div>
                      )}
                      {file.details.patientInfo.emergencyContact && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Emergency Contact</span>
                          <span className="font-medium">{file.details.patientInfo.emergencyContact}</span>
                        </div>
                      )}
                      {file.details.patientInfo.insuranceInfo && (
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-500">Insurance</span>
                          <span className="font-medium">{file.details.patientInfo.insuranceInfo}</span>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
                <motion.div whileHover="hover" variants={cardHoverVariants} className="md:col-span-2">
                  <Card className="transition-shadow">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Medical Information</CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0 space-y-3">
                      {file.details.patientInfo.allergies && (
                        <div>
                          <span className="text-sm text-gray-500 mb-1 block">Allergies</span>
                          <p className="font-medium p-2 bg-gray-50 rounded-md">{file.details.patientInfo.allergies}</p>
                        </div>
                      )}
                      {file.details.patientInfo.currentMedications && (
                        <div>
                          <span className="text-sm text-gray-500 mb-1 block">Current Medications</span>
                          <p className="font-medium p-2 bg-gray-50 rounded-md">
                            {file.details.patientInfo.currentMedications}
                          </p>
                        </div>
                      )}
                      {file.details.patientInfo.medicalHistory && (
                        <div>
                          <span className="text-sm text-gray-500 mb-1 block">Medical History</span>
                          <p className="font-medium p-2 bg-gray-50 rounded-md">
                            {file.details.patientInfo.medicalHistory}
                          </p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
                <motion.div whileHover="hover" variants={cardHoverVariants} className="md:col-span-2">
                  <Card className="transition-shadow">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm font-medium">Current Symptoms</CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0 space-y-3">
                      {file.details.patientInfo.currentSymptoms && (
                        <div>
                          <span className="text-sm text-gray-500 mb-1 block">Description</span>
                          <p className="font-medium p-2 bg-gray-50 rounded-md">
                            {file.details.patientInfo.currentSymptoms}
                          </p>
                        </div>
                      )}
                      <div className="grid grid-cols-2 gap-4">
                        {file.details.patientInfo.painLevel && (
                          <div>
                            <span className="text-sm text-gray-500 mb-1 block">Pain Level</span>
                            <div className="flex items-center">
                              <div className="h-2 flex-1 rounded-full overflow-hidden bg-gray-200">
                                <motion.div
                                  className="h-full rounded-full"
                                  initial={{ width: 0 }}
                                  animate={{
                                    width: `${(Number.parseInt(file.details.patientInfo.painLevel) / 10) * 100}%`,
                                  }}
                                  transition={{ duration: 1, ease: "easeOut" }}
                                  style={{
                                    backgroundColor: getPainLevelColor(
                                      Number.parseInt(file.details.patientInfo.painLevel),
                                    ),
                                  }}
                                />
                              </div>
                              <span
                                className="ml-2 font-bold"
                                style={{
                                  color: getPainLevelColor(Number.parseInt(file.details.patientInfo.painLevel)),
                                }}
                              >
                                {file.details.patientInfo.painLevel}/10
                              </span>
                            </div>
                          </div>
                        )}
                        {file.details.patientInfo.emergencyLevel && (
                          <div>
                            <span className="text-sm text-gray-500 mb-1 block">Emergency Level</span>
                            <Badge
                              style={{
                                backgroundColor: getEmergencyLevelColor(file.details.patientInfo.emergencyLevel),
                                color: "white",
                              }}
                            >
                              {file.details.patientInfo.emergencyLevel.toUpperCase()}
                            </Badge>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              </div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Date recorded:
              {formatDate(file.dateRecorded)}
            </div>
          </motion.div>
        )
      default:
        return (
          <motion.div
            className="space-y-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-2">
              <FileText className="h-5 w-5 text-gray-500" />
              <h3 className="font-semibold text-lg">Medical Document</h3>
            </div>
            {file.notes && (
              <motion.div whileHover="hover" variants={cardHoverVariants}>
                <Card className="transition-shadow">
                  <CardContent className="p-4">{file.notes}</CardContent>
                </Card>
              </motion.div>
            )}
            <div className="text-sm text-gray-500 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Created on {formatDate(file.createdAt)}
            </div>
          </motion.div>
        )
    }
  }

  const renderMedicalRecord = () => {
    if (!medicalRecord) return null

    return (
      <div className="space-y-6 relative z-10">
        {/* Header */}
        <motion.div
          className="flex flex-col md:flex-row md:items-center justify-between gap-4 bg-blue-900 p-6 rounded-lg text-white shadow-lg"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="flex items-center">
            <motion.div
              className="h-12 w-12 rounded-full bg-white/20 flex items-center justify-center"
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.3, type: "spring", stiffness: 200 }}
            >
              <FileText className="h-6 w-6" />
            </motion.div>
            <div className="ml-4">
              <h3 className="text-xl font-bold">Electronic Medical Record</h3>
              <p className="text-sm text-white/80">
                Patient: {medicalRecord.patientId?.firstName} {medicalRecord.patientId?.lastName}
              </p>
            </div>
          </div>
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.5, duration: 0.5 }}>
            <Badge className="bg-white/20 text-white border-white/40">
              <Shield className="h-3.5 w-3.5 mr-1" />
              Code: {medicalRecord.accessCode}
            </Badge>
          </motion.div>
        </motion.div>

        {/* Tabs */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2, duration: 0.5 }}
        >
          <Tabs defaultValue="general" className="w-full" onValueChange={(value) => setActiveTab(value)}>
            <TabsList className="grid grid-cols-4 mb-4 bg-gray-100 rounded-lg p-1">
              <motion.div whileHover={{ scale: 1.05 }} transition={{ duration: 0.2 }}>
                <TabsTrigger
                  value="general"
                  className="data-[state=active]:bg-blue-900 data-[state=active]:text-white rounded-md transition-all duration-300"
                >
                  <User className="h-4 w-4 mr-2" />
                  Patient
                </TabsTrigger>
              </motion.div>
              <motion.div whileHover={{ scale: 1.05 }} transition={{ duration: 0.2 }}>
                <TabsTrigger
                  value="medical"
                  className="data-[state=active]:bg-blue-900 data-[state=active]:text-white rounded-md transition-all duration-300"
                >
                  <Heart className="h-4 w-4 mr-2" />
                  Medical
                </TabsTrigger>
              </motion.div>
              <motion.div whileHover={{ scale: 1.05 }} transition={{ duration: 0.2 }}>
                <TabsTrigger
                  value="documents"
                  className="data-[state=active]:bg-blue-900 data-[state=active]:text-white rounded-md transition-all duration-300"
                >
                  <FileText className="h-4 w-4 mr-2" />
                  Documents
                </TabsTrigger>
              </motion.div>
              <motion.div whileHover={{ scale: 1.05 }} transition={{ duration: 0.2 }}>
                <TabsTrigger
                  value="emergency"
                  className="data-[state=active]:bg-blue-900 data-[state=active]:text-white rounded-md transition-all duration-300"
                >
                  <Phone className="h-4 w-4 mr-2" />
                  Emergency
                </TabsTrigger>
              </motion.div>
            </TabsList>

            {/* AnimatePresence for smooth tab transitions */}
            <AnimatePresence mode="wait">
              {/* Patient Information */}
              <TabsContent value="general" className="space-y-4">
                <motion.div key="general-tab" variants={tabVariants} initial="hidden" animate="visible" exit="exit">
                  <Card
                    className="border-t-4 hover:shadow-lg transition-shadow"
                    style={{ borderTopColor: colors.primary }}
                  >
                    <CardHeader className="bg-gray-50">
                      <CardTitle className="flex items-center text-lg" style={{ color: colors.primary }}>
                        <User className="h-5 w-5 mr-2" />
                        Patient Information
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4 p-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-3">
                          <div className="flex flex-col">
                            <span className="text-xs font-medium text-gray-500">Full Name</span>
                            <span className="font-semibold text-lg">
                              {medicalRecord.patientId?.firstName}{" "}
                              {medicalRecord.patientId?.lastName || "Not specified"}
                            </span>
                          </div>
                          <div className="flex flex-col">
                            <span className="text-xs font-medium text-gray-500">Date of Birth</span>
                            <span className="font-semibold">
                              {medicalRecord.patientId?.dateOfBirth
                                ? formatDate(medicalRecord.patientId.dateOfBirth)
                                : "Not specified"}
                            </span>
                          </div>
                          <div className="flex flex-col">
                            <span className="text-xs font-medium text-gray-500">Gender</span>
                            <span className="font-semibold">{medicalRecord.patientId?.gender || "Not specified"}</span>
                          </div>
                        </div>
                        <div className="space-y-3">
                          <div className="flex flex-col">
                            <span className="text-xs font-medium text-gray-500">Phone</span>
                            <span className="font-semibold">
                              {medicalRecord.patientId?.phoneNumber || "Not specified"}
                            </span>
                          </div>
                          <div className="flex flex-col">
                            <span className="text-xs font-medium text-gray-500">Email</span>
                            <span className="font-semibold">{medicalRecord.patientId?.email || "Not specified"}</span>
                          </div>
                          <div className="flex flex-col">
                            <span className="text-xs font-medium text-gray-500">Address</span>
                            <span className="font-semibold">{medicalRecord.patientId?.address || "Not specified"}</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              </TabsContent>

              {/* Medical Information */}
              <TabsContent value="medical" className="space-y-4">
                <motion.div key="medical-tab" variants={tabVariants} initial="hidden" animate="visible" exit="exit">
                  <Card
                    className="border-t-4 hover:shadow-lg transition-shadow"
                    style={{ borderTopColor: colors.secondary }}
                  >
                    <CardHeader className="bg-gray-50">
                      <CardTitle className="flex items-center text-lg" style={{ color: colors.secondary }}>
                        <Heart className="h-5 w-5 mr-2" />
                        Medical Information
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6 p-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-4">
                          <motion.div
                            whileHover={{ y: -5, boxShadow: "0 10px 25px rgba(0, 0, 0, 0.1)" }}
                            transition={{ duration: 0.3 }}
                            className="p-4 rounded-lg flex items-center shadow-sm"
                            style={{ backgroundColor: colors.primaryLight }}
                          >
                            <div
                              className="h-12 w-12 rounded-full flex items-center justify-center mr-3"
                              style={{ backgroundColor: colors.primary }}
                            >
                              <Droplet className="h-6 w-6 text-white" />
                            </div>
                            <div>
                              <h4 className="text-sm font-medium text-gray-500">Blood Type</h4>
                              <p className="text-2xl font-bold" style={{ color: colors.primary }}>
                                {medicalRecord.bloodType || "Not specified"}
                              </p>
                            </div>
                          </motion.div>
                          {medicalRecord.knownAllergies?.length > 0 && (
                            <motion.div
                              whileHover={{ y: -5, boxShadow: "0 10px 25px rgba(0, 0, 0, 0.1)" }}
                              transition={{ duration: 0.3 }}
                              className="p-4 rounded-lg shadow-sm"
                            >
                              <h4
                                className="text-sm font-medium flex items-center mb-3"
                                style={{ color: colors.alert }}
                              >
                                <AlertTriangle className="h-4 w-4 mr-1" />
                                Known Allergies
                              </h4>
                              <div className="space-y-2">
                                {medicalRecord.knownAllergies.map((allergy, index) => (
                                  <motion.div
                                    key={index}
                                    initial={{ x: -10, opacity: 0 }}
                                    animate={{ x: 0, opacity: 1 }}
                                    transition={{ delay: index * 0.1 }}
                                    className="border-l-4 px-3 py-2 rounded-r text-sm flex items-center"
                                    style={{
                                      backgroundColor: colors.alertLight,
                                      borderLeftColor: colors.alert,
                                    }}
                                  >
                                    <AlertTriangle className="h-4 w-4 mr-2" style={{ color: colors.alert }} />
                                    {allergy}
                                  </motion.div>
                                ))}
                              </div>
                            </motion.div>
                          )}
                        </div>
                        <div className="space-y-4">
                          {medicalRecord.chronicConditions?.length > 0 && (
                            <motion.div
                              whileHover={{ y: -5, boxShadow: "0 10px 25px rgba(0, 0, 0, 0.1)" }}
                              transition={{ duration: 0.3 }}
                              className="p-4 rounded-lg shadow-sm"
                            >
                              <h4
                                className="text-sm font-medium flex items-center mb-3"
                                style={{ color: colors.secondary }}
                              >
                                <Activity className="h-4 w-4 mr-1" />
                                Chronic Conditions
                              </h4>
                              <div className="space-y-2">
                                {medicalRecord.chronicConditions.map((condition, index) => (
                                  <motion.div
                                    key={index}
                                    initial={{ x: -10, opacity: 0 }}
                                    animate={{ x: 0, opacity: 1 }}
                                    transition={{ delay: index * 0.1 }}
                                    className="border-l-4 px-3 py-2 rounded-r text-sm flex items-center"
                                    style={{
                                      backgroundColor: colors.secondaryLight,
                                      borderLeftColor: colors.secondary,
                                    }}
                                  >
                                    <Activity className="h-4 w-4 mr-2" style={{ color: colors.secondary }} />
                                    {condition}
                                  </motion.div>
                                ))}
                              </div>
                            </motion.div>
                          )}
                          {medicalRecord.currentMedications?.length > 0 && (
                            <motion.div
                              whileHover={{ y: -5, boxShadow: "0 10px 25px rgba(0, 0, 0, 0.1)" }}
                              transition={{ duration: 0.3 }}
                              className="p-4 rounded-lg shadow-sm"
                            >
                              <h4
                                className="text-sm font-medium flex items-center mb-3"
                                style={{ color: colors.primary }}
                              >
                                <Pill className="h-4 w-4 mr-1" />
                                Current Medications
                              </h4>
                              <div className="space-y-2">
                                {medicalRecord.currentMedications.map((medication, index) => (
                                  <motion.div
                                    key={index}
                                    initial={{ x: -10, opacity: 0 }}
                                    animate={{ x: 0, opacity: 1 }}
                                    transition={{ delay: index * 0.1 }}
                                    className="border-l-4 px-3 py-2 rounded-r text-sm"
                                    style={{
                                      backgroundColor: colors.primaryLight,
                                      borderLeftColor: colors.primary,
                                    }}
                                  >
                                    <div className="font-medium">{medication.name}</div>
                                    <div className="text-xs text-gray-500">
                                      {medication.dosage}, {medication.frequency}
                                    </div>
                                  </motion.div>
                                ))}
                              </div>
                            </motion.div>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              </TabsContent>

              {/* Documents */}
              <TabsContent value="documents" className="space-y-4">
                <motion.div key="documents-tab" variants={tabVariants} initial="hidden" animate="visible" exit="exit">
                  <Card
                    className="border-t-4 hover:shadow-lg transition-shadow"
                    style={{ borderTopColor: colors.primary }}
                  >
                    <CardHeader className="bg-gray-50">
                      <div className="flex justify-between items-center">
                        <CardTitle className="flex items-center text-lg" style={{ color: colors.primary }}>
                          <ClipboardList className="h-5 w-5 mr-2" />
                          Medical Documents
                        </CardTitle>
                        <Badge className="bg-gray-200 text-gray-700">
                          {medicalRecord.patientFiles?.length || 0} document(s)
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      {medicalRecord.patientFiles?.length > 0 ? (
                        <div className="space-y-6">
                          {medicalRecord.patientFiles.map((file, index) => (
                            <motion.div
                              key={file._id}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: index * 0.1, duration: 0.5 }}
                              whileHover={{ y: -5, boxShadow: "0 10px 25px rgba(0, 0, 0, 0.1)" }}
                            >
                              <Card className="transition-shadow">
                                <CardHeader className="border-b" style={{ backgroundColor: colors.primaryLight }}>
                                  <div className="flex justify-between items-start">
                                    <div className="flex items-center">
                                      {getFileIcon(file.type)}
                                      <div className="ml-3">
                                        <CardTitle
                                          className="text-lg"
                                          style={{
                                            color:
                                              file.type === "Prescription"
                                                ? colors.primary
                                                : file.type === "Diagnostic"
                                                  ? colors.secondary
                                                  : file.type === "VitalSigns"
                                                    ? colors.alert
                                                    : "#333",
                                          }}
                                        >
                                          {file.type}
                                        </CardTitle>
                                        <CardDescription className="flex items-center">
                                          <Calendar className="h-4 w-4 mr-1" />
                                          {formatDate(file.dateRecorded)}
                                        </CardDescription>
                                      </div>
                                    </div>
                                    <Badge variant="outline">{file.creator?.username || "System"}</Badge>
                                  </div>
                                </CardHeader>
                                <CardContent className="pt-4">{renderFileDetails(file)}</CardContent>
                              </Card>
                            </motion.div>
                          ))}
                        </div>
                      ) : (
                        <motion.div
                          className="text-center py-12 bg-gray-50 rounded-lg border border-dashed"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          transition={{ duration: 0.5 }}
                        >
                          <motion.div
                            className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-white mb-4 shadow-sm"
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
                          >
                            <Clipboard className="h-8 w-8" style={{ color: colors.primary }} />
                          </motion.div>
                          <h3 className="text-lg font-medium" style={{ color: colors.primary }}>
                            No documents
                          </h3>
                          <p className="text-gray-500 mt-1 max-w-md mx-auto">
                            This medical record does not contain any documents yet.
                          </p>
                        </motion.div>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
              </TabsContent>

              {/* Emergency */}
              <TabsContent value="emergency" className="space-y-4">
                <motion.div key="emergency-tab" variants={tabVariants} initial="hidden" animate="visible" exit="exit">
                  <Card
                    className="border-t-4 hover:shadow-lg transition-shadow"
                    style={{ borderTopColor: colors.alert }}
                  >
                    <CardHeader className="bg-gray-50">
                      <CardTitle className="flex items-center text-lg" style={{ color: colors.alert }}>
                        <Phone className="h-5 w-5 mr-2" />
                        Emergency Contact
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="p-6">
                      {medicalRecord.emergencyContact ? (
                        <motion.div
                          className="rounded-lg p-6 shadow-sm"
                          style={{
                            backgroundColor: colors.alertLight,
                            borderLeft: `4px solid ${colors.alert}`,
                          }}
                          whileHover={{ y: -5, boxShadow: "0 10px 25px rgba(0, 0, 0, 0.1)" }}
                          transition={{ duration: 0.3 }}
                        >
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-3">
                              <div className="flex flex-col">
                                <span className="text-xs font-medium text-gray-500">Name</span>
                                <span className="font-semibold text-lg">
                                  {medicalRecord.emergencyContact.name || "Not specified"}
                                </span>
                              </div>
                              <div className="flex flex-col">
                                <span className="text-xs font-medium text-gray-500">Relationship</span>
                                <span className="font-semibold">
                                  {medicalRecord.emergencyContact.relationship || "Not specified"}
                                </span>
                              </div>
                            </div>
                            <div className="space-y-3">
                              <div className="flex flex-col">
                                <span className="text-xs font-medium text-gray-500">Phone</span>
                                <span className="font-semibold flex items-center">
                                  <Phone className="h-4 w-4 mr-2" style={{ color: colors.alert }} />
                                  {medicalRecord.emergencyContact.phone || "Not specified"}
                                </span>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      ) : (
                        <motion.div
                          className="text-center py-10 bg-gray-50 rounded-lg"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          transition={{ duration: 0.5 }}
                        >
                          <motion.div
                            className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-white mb-4 shadow-sm"
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
                          >
                            <User className="h-8 w-8" style={{ color: colors.alert }} />
                          </motion.div>
                          <h3 className="text-lg font-medium" style={{ color: colors.alert }}>
                            No emergency contact
                          </h3>
                          <p className="text-gray-500 mt-1">
                            No emergency contact has been registered for this patient
                          </p>
                        </motion.div>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
              </TabsContent>
            </AnimatePresence>
          </Tabs>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4, duration: 0.5 }}
        >
          <CardFooter className="flex justify-between pt-4 border-t">
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                variant="outline"
                onClick={() => setIsValid(false)}
                className="font-medium border-blue-900 text-blue-900 hover:bg-blue-50"
              >
                Check another record
              </Button>
            </motion.div>
            <div className="flex gap-2">
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button
                  onClick={handleDownloadPDF}
                  className="font-medium text-white bg-blue-900 hover:bg-blue-800"
                  disabled={loading}
                >
                  <FileText className="mr-2 h-4 w-4 text-white" />
                  Download PDF
                </Button>
              </motion.div>
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button
                  onClick={() => navigate("/home")}
                  className="font-medium bg-red-600 hover:bg-red-700 text-white"
                >
                  Back to Home
                </Button>
              </motion.div>
            </div>
          </CardFooter>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="relative z-20 min-h-screen flex flex-col bg-gradient-to-br from-blue-50 to-cyan-200 font-sans">
      {/* Background Layers */}
      <div className="fixed inset-0 z-0">
        <ParticlesComponent
          id="medical-particles"
          style={{
            position: "absolute",
            width: "100%",
            height: "100%",
            backgroundColor: "#E8F4F8",
          }}
        />
      </div>
      <AnimatedMedicalIcons />

      {/* Main Content */}
      <main className="flex-2 max-w-5xl mx-auto py-20 px-4 relative z-10 mt-10">
        {!isValid ? (
          <motion.div
            className="grid md:grid-cols-5 gap-0 rounded-xl overflow-hidden shadow-2xl bg-white"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div className="md:col-span-2 hidden md:flex flex-col justify-center items-center p-8 bg-blue-900 text-white">
              <div className="text-center">
                <motion.div
                  className="inline-flex items-center justify-center h-20 w-20 rounded-full bg-white/20 mb-6"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.3, type: "spring", stiffness: 200 }}
                >
                  <FileText className="h-10 w-10" />
                </motion.div>
                <h2 className="text-2xl font-bold mb-4">Electronic Medical Record</h2>
                <p className="mb-8 text-white/80">Secure access to your medical information</p>
                <div className="space-y-4 text-left">
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    className="flex items-center bg-white/10 p-3 rounded-lg transition-all duration-300 hover:bg-white/20"
                  >
                    <div className="animate-bounce">
                      <Shield className="h-5 w-5 mr-3" />
                    </div>
                    <span className="text-sm">Secure and confidential access</span>
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    className="flex items-center bg-white/10 p-3 rounded-lg transition-all duration-300 hover:bg-white/20"
                  >
                    <div className="animate-pulse">
                      <CheckCircle className="h-5 w-5 mr-3" />
                    </div>
                    <span className="text-sm">Up-to-date medical information</span>
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    className="flex items-center bg-white/10 p-3 rounded-lg transition-all duration-300 hover:bg-white/20"
                  >
                    <div className="animate-float">
                      <User className="h-5 w-5 mr-3" />
                    </div>
                    <span className="text-sm">Emergency contacts available</span>
                  </motion.div>
                </div>
              </div>
            </div>
            <Card className="mt-8 md:col-span-3 border-0 transition-all duration-300 hover:shadow-lg">
              <CardHeader className="py-8 pt-12 pb-8">
                <CardTitle className="text-2xl font-bold text-center md:text-left" style={{ color: colors.primary }}>
                  Medical Record Access
                </CardTitle>
                <CardDescription className="text-center md:text-left">
                  Enter your unique access code to view your electronic medical record
                </CardDescription>
              </CardHeader>
              <CardContent className="p-8">
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="space-y-2">
                    <label htmlFor="accessCode" className="text-sm ml-2 font-medium text-gray-700">
                      Access Code
                    </label>
                    <div className="relative">
                      <motion.div
                        whileHover={{ scale: 1.02 }}
                        whileFocus={{ scale: 1.02 }}
                        transition={{ duration: 0.2 }}
                      >
                        <Input
                          id="accessCode"
                          type="text"
                          value={accessCode}
                          onChange={(e) => setAccessCode(e.target.value)}
                          placeholder="Enter your code (e.g. MR-ABC123)"
                          className="pl-12 ml-5"
                          style={{ borderColor: colors.primary }}
                        />
                      </motion.div>
                      <Clipboard
                        className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5"
                        style={{ color: colors.primary }}
                      />
                    </div>
                    <p className="text-xs text-gray-500">
                      The access code was provided by your doctor or hospital staff
                    </p>
                  </div>
                  {error && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <Alert style={{ backgroundColor: colors.alertLight }}>
                        <AlertCircle className="h-4 w-4" style={{ color: colors.alert }} />
                        <AlertTitle style={{ color: colors.alert }}>Error</AlertTitle>
                        <AlertDescription style={{ color: colors.alert }}>{error}</AlertDescription>
                      </Alert>
                    </motion.div>
                  )}
                  <motion.div whileHover={{ scale: 1.03 }} whileTap={{ scale: 0.97 }} transition={{ duration: 0.2 }}>
                    <Button
                      type="submit"
                      className="w-full font-medium text-white bg-blue-900 hover:bg-blue-800"
                      disabled={loading}
                    >
                      {loading ? (
                        <div className="flex items-center justify-center">
                          <span className="animate-pulse mr-2">⏳</span> Loading...
                        </div>
                      ) : (
                        <div className="flex items-center justify-center">
                          Access Record <CheckCircle className="ml-2 h-5 w-5 text-white" />
                        </div>
                      )}
                    </Button>
                  </motion.div>
                </form>
              </CardContent>
            </Card>
          </motion.div>
        ) : (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
          >
            <Card className="shadow-xl">{renderMedicalRecord()}</Card>
          </motion.div>
        )}
      </main>
      <div className="h-[60px]"></div>
    </div>
  )
}

export default MedicalDocument
</file>

<file path="src/pages/MedicalRecordDetails.jsx">
"use client"

import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useEffect, useState } from "react"
import axios from "axios"
import { Upload } from "lucide-react"
import { useParams } from "react-router-dom"
import Cookies from "js-cookie"
import {
  Activity,
  AlertCircle,
  Calendar,
  Clipboard,
  FileText,
  FilePlus,
  Heart,
  Pill,
  Stethoscope,
  Thermometer,
  Trash2,
  User,
  Edit,
  AlertTriangle,
  BarChart,
  Droplet,
  BugIcon as Allergens,
  Archive,
} from "lucide-react"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Skeleton } from "@/components/ui/skeleton"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"

// Import the AddPatientFileModal component
import AddPatientFileModal from "./AddPatientFileModal"
import ShareMedicalRecordButton from "./ShareMedicalRecordButton"

// Add these imports at the top of the file
import AnnotationDialog from "./annotation/AnnotationDialog"
import AnnotationList from "./annotation/AnnotationList"
import AnnotationMarker from "./annotation/AnnotationMarker"
import ArchiveDialog from "./archive/ArchiveDialog"
import ArchivedFilesList from "./archive/ArchivedFilesList"

const MedicalRecordDetails = () => {
  const { id } = useParams()
  const [medicalRecord, setMedicalRecord] = useState(null)
  const [patientFiles, setPatientFiles] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const [showAddModal, setShowAddModal] = useState(false)
  const [editFile, setEditFile] = useState(null)
  const [selectedFile, setSelectedFile] = useState(null)
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const [fileToDelete, setFileToDelete] = useState(null)
  const [activeTab, setActiveTab] = useState("all")

  // Add these state variables inside the component
  const [showAnnotationDialog, setShowAnnotationDialog] = useState(false)
  const [showArchiveDialog, setShowArchiveDialog] = useState(false)
  const [selectedAnnotation, setSelectedAnnotation] = useState(null)
  const [annotations, setAnnotations] = useState([])
  const [annotationPosition, setAnnotationPosition] = useState(null)
  const [fileToAnnotate, setFileToAnnotate] = useState(null)
  const [fileToArchive, setFileToArchive] = useState(null)
  const [showArchivedFiles, setShowArchivedFiles] = useState(false)
  const [ocrResult, setOcrResult] = useState(null)
  const [ocrLoading, setOcrLoading] = useState(false)
  const [ocrError, setOcrError] = useState(null)

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = Cookies.get("token")
        const [recordRes, filesRes] = await Promise.all([
          axios.get(`http://localhost:8089/api/medical-records/${id}`, {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get(`http://localhost:8089/api/medical-records/${id}/files`, {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ])

        // Add error handling for responses
        if (recordRes.status !== 200 || filesRes.status !== 200) {
          throw new Error("Failed to fetch data")
        }

        setMedicalRecord(recordRes.data)
        setPatientFiles(filesRes.data)
      } catch (err) {
        console.error("Fetch error:", err)
        setError(err.response?.data?.message || "Error loading data")

        // If 404, redirect or show not found message
        if (err.response?.status === 404) {
          setError("Medical record not found")
        }
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [id])

  const handleAddFile = async (newFile) => {
    try {
      const token = Cookies.get("token")
      const res = await axios.post(`http://localhost:8089/api/medical-records/${id}/files`, newFile, {
        headers: { Authorization: `Bearer ${token}` },
      })
      setPatientFiles([...patientFiles, res.data])
      setShowAddModal(false)
    } catch (err) {
      setError("Error adding file")
      console.error("Error:", err)
    }
  }

  const handleUpdateFile = async (updatedFile) => {
    try {
      const token = Cookies.get("token")
      const res = await axios.put(`http://localhost:8089/api/patient-files/${updatedFile._id}`, updatedFile, {
        headers: { Authorization: `Bearer ${token}` },
      })
      setPatientFiles(patientFiles.map((f) => (f._id === res.data._id ? res.data : f)))
      setShowAddModal(false)
      setEditFile(null)
    } catch (err) {
      setError("Error updating file")
      console.error("Error:", err)
    }
  }

  const confirmDeleteFile = (fileId) => {
    setFileToDelete(fileId)
    setShowDeleteDialog(true)
  }

  const handleDeleteFile = async () => {
    try {
      const token = Cookies.get("token")
      await axios.delete(`http://localhost:8089/api/patient-files/${fileToDelete}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      setPatientFiles(patientFiles.filter((f) => f._id !== fileToDelete))
      setShowDeleteDialog(false)
      setFileToDelete(null)
      if (selectedFile && selectedFile._id === fileToDelete) {
        setSelectedFile(null)
      }
    } catch (err) {
      setError("Error deleting file")
      console.error("Error:", err)
    }
  }

  const getFileIcon = (fileType) => {
    switch (fileType) {
      case "Prescription":
        return <Pill className="h-5 w-5 text-emerald-500" />
      case "Diagnostic":
        return <Stethoscope className="h-5 w-5 text-violet-500" />
      case "Treatment":
        return <Activity className="h-5 w-5 text-amber-500" />
      case "VitalSigns":
        return <Heart className="h-5 w-5 text-rose-500" />
      case "Triage":
        return <AlertTriangle className="h-5 w-5 text-orange-500" />
      case "Discharge":
        return <Clipboard className="h-5 w-5 text-sky-500" />
      case "PatientInformation":
        return <User className="h-5 w-5 text-slate-500" />
      default:
        return <FileText className="h-5 w-5 text-slate-500" />
    }
  }

  const getFileTypeColor = (fileType) => {
    switch (fileType) {
      case "Prescription":
        return "bg-emerald-100 text-emerald-800 border-emerald-200"
      case "Diagnostic":
        return "bg-violet-100 text-violet-800 border-violet-200"
      case "Treatment":
        return "bg-amber-100 text-amber-800 border-amber-200"
      case "VitalSigns":
        return "bg-rose-100 text-rose-800 border-rose-200"
      case "Triage":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "Discharge":
        return "bg-sky-100 text-sky-800 border-sky-200"
      case "PatientInformation":
        return "bg-slate-100 text-slate-800 border-slate-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  // Add this function inside the component
  const handleAddAnnotation = (file, event) => {
    // Calculate position as percentage of the container
    const rect = event.currentTarget.getBoundingClientRect()
    const x = ((event.clientX - rect.left) / rect.width) * 100
    const y = ((event.clientY - rect.top) / rect.height) * 100

    setAnnotationPosition({ x, y })
    setFileToAnnotate(file._id)
    setShowAnnotationDialog(true)
  }

  const handleAnnotationAdded = (newAnnotation) => {
    setAnnotations([...annotations, newAnnotation])
  }

  const handleAnnotationDeleted = (annotationId) => {
    setAnnotations(annotations.filter((a) => a._id !== annotationId))
  }

  const handleAnnotationUpdated = (updatedAnnotation) => {
    setAnnotations(annotations.map((a) => (a._id === updatedAnnotation._id ? updatedAnnotation : a)))
  }

  const handleArchiveFile = (file) => {
    setFileToArchive(file._id)
    setShowArchiveDialog(true)
  }

  const handleFileArchived = (archivedFile) => {
    setPatientFiles(patientFiles.filter((f) => f._id !== archivedFile._id))
    if (selectedFile && selectedFile._id === archivedFile._id) {
      setSelectedFile(null)
    }
  }

  const handleOCRUpload = async (e) => {
    const file = e.target.files[0]
    if (!file) return

    const formData = new FormData()
    formData.append("medicalImage", file) // Correct field name
    formData.append("medicalRecordId", id)

    try {
      setOcrLoading(true)
      setOcrError(null)

      const token = Cookies.get("token")
      const response = await axios.post(
        "http://localhost:8089/api/ocr/process-image", // Correct endpoint
        formData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        },
      )

      // Verify extracted data
      if (!response.data.data?.extractedData?.patientName || !response.data.data?.extractedData?.diagnosis) {
        throw new Error("Essential information could not be extracted from the image")
      }

      setOcrResult(response.data.data)
    } catch (err) {
      setOcrError(err.response?.data?.error || err.message || "Error during OCR processing")
      console.error("OCR Error:", err)
    } finally {
      setOcrLoading(false)
      e.target.value = ""
    }
  }

  const renderFileDetails = (file) => {
    switch (file.type) {
      case "Prescription":
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Pill className="h-5 w-5 text-emerald-500" />
                <h3 className="font-medium text-lg">Medical Prescription</h3>
              </div>
              <div className="space-y-3">
                <h4 className="font-medium text-sm text-slate-700">Prescribed Medications</h4>
                {file.details.medications?.length > 0 ? (
                  <div className="grid gap-3">
                    {file.details.medications.map((med, idx) => (
                      <Card key={idx} className="bg-emerald-50 border-emerald-100">
                        <CardContent className="p-3">
                          <div className="flex justify-between">
                            <div className="font-medium">{med.name}</div>
                            <Badge variant="outline" className="bg-white">
                              {med.dosage}
                            </Badge>
                          </div>
                          <div className="text-sm text-slate-600 mt-1">
                            {med.frequency}, {med.duration}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-slate-500 italic">No medications prescribed</p>
                )}
              </div>
              {file.notes && (
                <div className="mt-4 text-sm">
                  <h4 className="font-medium text-slate-700">Notes</h4>
                  <p className="text-slate-600 mt-1">{file.notes}</p>
                </div>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )

      case "Diagnostic":
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Stethoscope className="h-5 w-5 text-violet-500" />
                <h3 className="font-medium text-lg">Diagnosis</h3>
              </div>
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-slate-700">Primary Diagnosis</h4>
                <Card className="bg-violet-50 border-violet-100">
                  <CardContent className="p-3">
                    <p>{file.details.diagnosis}</p>
                  </CardContent>
                </Card>
              </div>
              {file.details.diagnosticTests?.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium text-sm text-slate-700">Diagnostic Tests</h4>
                  <div className="grid gap-2">
                    {file.details.diagnosticTests.map((test, idx) => (
                      <div key={idx} className="flex justify-between items-center p-2 border rounded-md bg-white">
                        <div>
                          <span className="font-medium">{test.testName}</span>
                          <div className="text-sm text-slate-500">{new Date(test.date).toLocaleDateString()}</div>
                        </div>
                        <Badge variant={test.result.toLowerCase().includes("normal") ? "outline" : "secondary"}>
                          {test.result}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              {file.notes && (
                <div className="mt-4 text-sm">
                  <h4 className="font-medium text-slate-700">Notes</h4>
                  <p className="text-slate-600 mt-1">{file.notes}</p>
                </div>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )

      case "Treatment":
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Activity className="h-5 w-5 text-amber-500" />
                <h3 className="font-medium text-lg">Treatment Plan</h3>
              </div>
              {file.details.procedures?.length > 0 ? (
                <div className="space-y-2">
                  <h4 className="font-medium text-sm text-slate-700">Medical Procedures</h4>
                  <div className="grid gap-3">
                    {file.details.procedures.map((proc, idx) => (
                      <Card key={idx} className="bg-amber-50 border-amber-100">
                        <CardContent className="p-3">
                          <div className="flex justify-between items-start">
                            <div>
                              <div className="font-medium">{proc.name}</div>
                              <div className="text-sm text-slate-500">{new Date(proc.date).toLocaleDateString()}</div>
                            </div>
                          </div>
                          {proc.notes && <p className="text-sm mt-2 text-slate-600">{proc.notes}</p>}
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              ) : (
                <p className="text-sm text-slate-500 italic">No procedures recorded</p>
              )}
              {file.notes && (
                <div className="mt-4 text-sm">
                  <h4 className="font-medium text-slate-700">Notes</h4>
                  <p className="text-slate-600 mt-1">{file.notes}</p>
                </div>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )

      case "VitalSigns":
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Heart className="h-5 w-5 text-rose-500" />
                <h3 className="font-medium text-lg">Vital Signs</h3>
              </div>
              <div className="grid grid-cols-2 gap-3">
                <Card className="bg-rose-50 border-rose-100">
                  <CardContent className="p-3 flex flex-col items-center justify-center">
                    <Thermometer className="h-5 w-5 text-rose-500 mb-1" />
                    <div className="text-sm text-slate-500">Temperature</div>
                    <div className="text-xl font-semibold">{file.details.vitalSigns?.temperature}°C</div>
                  </CardContent>
                </Card>
                <Card className="bg-rose-50 border-rose-100">
                  <CardContent className="p-3 flex flex-col items-center justify-center">
                    <Activity className="h-5 w-5 text-rose-500 mb-1" />
                    <div className="text-sm text-slate-500">Blood Pressure</div>
                    <div className="text-xl font-semibold">
                      {file.details.vitalSigns?.bloodPressure?.systolic}/
                      {file.details.vitalSigns?.bloodPressure?.diastolic}
                    </div>
                  </CardContent>
                </Card>
                <Card className="bg-rose-50 border-rose-100">
                  <CardContent className="p-3 flex flex-col items-center justify-center">
                    <Heart className="h-5 w-5 text-rose-500 mb-1" />
                    <div className="text-sm text-slate-500">Heart Rate</div>
                    <div className="text-xl font-semibold">{file.details.vitalSigns?.heartRate} bpm</div>
                  </CardContent>
                </Card>
                <Card className="bg-rose-50 border-rose-100">
                  <CardContent className="p-3 flex flex-col items-center justify-center">
                    <BarChart className="h-5 w-5 text-rose-500 mb-1" />
                    <div className="text-sm text-slate-500">O₂ Saturation</div>
                    <div className="text-xl font-semibold">{file.details.vitalSigns?.oxygenSaturation}%</div>
                  </CardContent>
                </Card>
              </div>
              {file.notes && (
                <div className="mt-4 text-sm">
                  <h4 className="font-medium text-slate-700">Notes</h4>
                  <p className="text-slate-600 mt-1">{file.notes}</p>
                </div>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )

      case "Triage":
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-orange-500" />
                <h3 className="font-medium text-lg">Triage</h3>
              </div>
              <div className="grid gap-3">
                <Card className="bg-orange-50 border-orange-100">
                  <CardContent className="p-3">
                    <div className="flex justify-between items-center">
                      <div className="font-medium text-sm text-slate-700">Priority Level</div>
                      <Badge
                        className={
                          file.details.priorityLevel?.toLowerCase().includes("high") ||
                          file.details.priorityLevel?.toLowerCase().includes("urgent")
                            ? "bg-red-100 text-red-800 hover:bg-red-100"
                            : file.details.priorityLevel?.toLowerCase().includes("medium")
                              ? "bg-amber-100 text-amber-800 hover:bg-amber-100"
                              : "bg-green-100 text-green-800 hover:bg-green-100"
                        }
                      >
                        {file.details.priorityLevel}
                      </Badge>
                    </div>
                  </CardContent>
                </Card>
                <Card className="bg-orange-50 border-orange-100">
                  <CardContent className="p-3">
                    <div className="font-medium text-sm text-slate-700">Chief Complaint</div>
                    <p className="mt-1">{file.details.chiefComplaint}</p>
                  </CardContent>
                </Card>
              </div>
              {file.notes && (
                <div className="mt-4 text-sm">
                  <h4 className="font-medium text-slate-700">Notes</h4>
                  <p className="text-slate-600 mt-1">{file.notes}</p>
                </div>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )

      case "Discharge":
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Clipboard className="h-5 w-5 text-sky-500" />
                <h3 className="font-medium text-lg">Patient Discharge</h3>
              </div>
              <Card className="bg-sky-50 border-sky-100">
                <CardContent className="p-3">
                  <div className="font-medium text-sm text-slate-700">Discharge Instructions</div>
                  <p className="mt-1">{file.details.dischargeInstructions}</p>
                </CardContent>
              </Card>
              {file.details.followUpDate && (
                <Card className="bg-sky-50 border-sky-100">
                  <CardContent className="p-3">
                    <div className="flex items-center justify-between">
                      <div className="font-medium text-sm text-slate-700">Follow-up Appointment</div>
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-1 text-sky-500" />
                        <span>{new Date(file.details.followUpDate).toLocaleDateString()}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
              {file.notes && (
                <div className="mt-4 text-sm">
                  <h4 className="font-medium text-slate-700">Notes</h4>
                  <p className="text-slate-600 mt-1">{file.notes}</p>
                </div>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )

      case "PatientInformation":
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <User className="h-5 w-5 text-slate-500" />
                <h3 className="font-medium text-lg">Patient Information</h3>
              </div>
              <div className="grid gap-3">
                <Card className="bg-slate-50 border-slate-100">
                  <CardContent className="p-3">
                    <div className="font-medium text-sm text-slate-700">Identity</div>
                    <p className="mt-1">
                      {file.details.patientInfo?.firstName} {file.details.patientInfo?.lastName}
                    </p>
                  </CardContent>
                </Card>
                <div className="grid grid-cols-2 gap-3">
                  <Card className="bg-slate-50 border-slate-100">
                    <CardContent className="p-3">
                      <div className="font-medium text-sm text-slate-700">Current Symptoms</div>
                      <p className="mt-1">{file.details.patientInfo?.currentSymptoms || "Not specified"}</p>
                    </CardContent>
                  </Card>
                  <Card className="bg-slate-50 border-slate-100">
                    <CardContent className="p-3">
                      <div className="font-medium text-sm text-slate-700">Pain Level</div>
                      <div className="flex items-center mt-1">
                        <div
                          className="h-2 rounded-full bg-gradient-to-r from-green-500 via-yellow-500 to-red-500"
                          style={{ width: "100%" }}
                        ></div>
                        <div
                          className="ml-2 font-medium"
                          style={{
                            color:
                              file.details.patientInfo?.painLevel >= 7
                                ? "rgb(220, 38, 38)"
                                : file.details.patientInfo?.painLevel >= 4
                                  ? "rgb(245, 158, 11)"
                                  : "rgb(22, 163, 74)",
                          }}
                        >
                          {file.details.patientInfo?.painLevel}/10
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
              {file.notes && (
                <div className="mt-4 text-sm">
                  <h4 className="font-medium text-slate-700">Notes</h4>
                  <p className="text-slate-600 mt-1">{file.notes}</p>
                </div>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )

      default:
        return (
          <div className="relative cursor-crosshair" onClick={(e) => handleAddAnnotation(file, e)}>
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <FileText className="h-5 w-5 text-slate-500" />
                <h3 className="font-medium text-lg">Document</h3>
              </div>
              {file.notes && (
                <Card>
                  <CardContent className="p-3">
                    <p>{file.notes}</p>
                  </CardContent>
                </Card>
              )}
            </div>
            {annotations
              .filter((a) => a.patientFileId === file._id)
              .map((annotation) => (
                <AnnotationMarker
                  key={annotation._id}
                  annotation={annotation}
                  onClick={() => setSelectedAnnotation(annotation)}
                />
              ))}
          </div>
        )
    }
  }

  const filteredFiles = () => {
    if (activeTab === "all") return patientFiles
    return patientFiles.filter((file) => file.type === activeTab)
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-slate-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white rounded-lg shadow-sm overflow-hidden">
            <div className="p-6 border-b">
              <Skeleton className="h-8 w-[250px]" />
            </div>
            <div className="p-6">
              <div className="mb-6">
                <Skeleton className="h-6 w-[200px] mb-4" />
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Skeleton className="h-5 w-full" />
                  <Skeleton className="h-5 w-full" />
                  <Skeleton className="h-5 w-full" />
                </div>
              </div>
              <div className="mb-6 flex justify-between items-center">
                <Skeleton className="h-6 w-[200px]" />
                <Skeleton className="h-10 w-[150px]" />
              </div>
              <div className="space-y-4">
                {[1, 2, 3].map((i) => (
                  <div key={i} className="border rounded-lg p-4">
                    <div className="flex justify-between">
                      <Skeleton className="h-6 w-[150px]" />
                      <div className="flex space-x-2">
                        <Skeleton className="h-8 w-[80px]" />
                        <Skeleton className="h-8 w-[80px]" />
                      </div>
                    </div>
                    <Skeleton className="h-4 w-full mt-2" />
                    <Skeleton className="h-4 w-3/4 mt-2" />
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-slate-50 p-6">
        <div className="max-w-7xl mx-auto">
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
          <Button onClick={() => window.location.reload()} variant="outline">
            Try Again
          </Button>
        </div>
      </div>
    )
  }

  if (!medicalRecord) {
    return (
      <div className="min-h-screen bg-slate-50 p-6">
        <div className="max-w-7xl mx-auto">
          <Alert className="mb-6 border-yellow-200 bg-yellow-50 text-yellow-800">
            <AlertTriangle className="h-4 w-4 text-yellow-800" />
            <AlertDescription>Medical record not found</AlertDescription>
          </Alert>
          <Button onClick={() => window.history.back()} variant="outline">
            Back
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-slate-50">
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6">
        <Card className="shadow-sm overflow-hidden">
          <CardHeader className="bg-white border-b p-6">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
              <div>
                <CardTitle className="text-2xl font-bold flex items-center text-slate-800">
                  <h1 className="text-3xl font-extrabold tracking-tight mb-2" style={{ color: "#42A5FF" }}>
                    Medical Record
                  </h1>
                </CardTitle>
                <CardDescription className="text-slate-500 mt-1">
                  {medicalRecord.patientId?.firstName} {medicalRecord.patientId?.lastName}
                </CardDescription>
              </div>
              <div className="flex gap-2">
                <Button onClick={() => window.history.back()} variant="outline" size="sm" className="sm:self-start">
                  Back to List
                </Button>
                <ShareMedicalRecordButton medicalRecordId={id} />
              </div>
            </div>
          </CardHeader>

          <CardContent className="p-6">
            <Card className="mb-6 bg-slate-50 border">
              <CardHeader className="pb-2">
                <CardTitle className="text-lg font-semibold flex items-center">
                  <User className="mr-2 h-5 w-5 text-slate-500" />
                  Patient Information
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-y-2 gap-x-4 text-sm">
                  <div className="flex items-center">
                    <User className="h-4 w-4 mr-2 text-slate-400" />
                    <span className="font-medium text-slate-700">Name:</span>
                    <span className="ml-2">
                      {medicalRecord.patientId?.firstName} {medicalRecord.patientId?.lastName}
                    </span>
                  </div>
                  <div className="flex items-center">
                    <Droplet className="h-4 w-4 mr-2 text-red-400" />
                    <span className="font-medium text-slate-700">Blood Type:</span>
                    <span className="ml-2">{medicalRecord.bloodType || "Not specified"}</span>
                  </div>
                  <div className="flex items-start">
                    <Allergens className="h-4 w-4 mr-2 mt-0.5 text-amber-400" />
                    <span className="font-medium text-slate-700">Allergies:</span>
                    <span className="ml-2">
                      {medicalRecord.knownAllergies?.length
                        ? medicalRecord.knownAllergies.join(", ")
                        : "No known allergies"}
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
              <h3 className="text-xl font-semibold text-slate-800 flex items-center">
                <Clipboard className="mr-2 h-5 w-5 text-slate-600" />
                Medical Documents
              </h3>
              <div className="flex gap-2">
                <Button
                  onClick={() => setShowAddModal(true)}
                  className="bg-[#D1DEEB] text-gray-900 hover:bg-[#b8c9db] shadow-lg rounded-lg py-3 px-6 transition-colors duration-300 flex items-center h-11"
                >
                  <FilePlus className="mr-2 h-4 w-4" />
                  Add file document
                </Button>
                <div>
                  <input type="file" id="ocr-upload" accept="image/*" onChange={handleOCRUpload} className="hidden" />
                  <label
                    htmlFor="ocr-upload"
                    className="bg-[#D1DEEB] text-gray-900 hover:bg-[#b8c9db] shadow-lg rounded-lg py-3 px-6 transition-colors duration-300 cursor-pointer flex items-center h-11"
                  >
                    <Upload className="mr-2 h-4 w-4" />
                    OCR upload
                  </label>
                </div>
              </div>
            </div>

            {patientFiles.length === 0 ? (
              <div className="text-center py-12 bg-white rounded-lg border">
                <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-slate-100 mb-4">
                  <FileText className="h-8 w-8 text-slate-400" />
                </div>
                <h3 className="text-lg font-medium text-slate-900">No documents</h3>
                <p className="text-slate-500 mt-1 max-w-md mx-auto">
                  This medical record does not contain any documents yet. Click "Add Document" to start creating the
                  record.
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-1 bg-white rounded-lg border h-fit">
                  <div className="p-4 border-b">
                    <h4 className="font-medium text-slate-800">Document List</h4>
                  </div>
                  <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                    <div className="px-4 pt-2">
                      <TabsList className="w-full gap-1">
                        <TabsTrigger value="all" className="text-xs px-2 py-1">
                          All
                        </TabsTrigger>
                        <TabsTrigger value="Prescription" className="text-xs px-2 py-1">
                          Prescriptions
                        </TabsTrigger>
                        <TabsTrigger value="Diagnostic" className="text-xs px-2 py-1">
                          Diagnostics
                        </TabsTrigger>

                        <TabsTrigger value="archived" className="text-xs px-2 py-1">
                          Archived
                        </TabsTrigger>
                      </TabsList>
                    </div>
                    <ScrollArea className="h-[400px] p-4">
                      <div className="space-y-2">
                        {filteredFiles().map((file) => (
                          <div
                            key={file._id}
                            onClick={() => setSelectedFile(file)}
                            className={`p-3 rounded-md cursor-pointer flex items-center justify-between transition-colors ${
                              selectedFile?._id === file._id
                                ? "bg-slate-100 border-slate-300"
                                : "bg-white border hover:bg-slate-50"
                            }`}
                          >
                            <div className="flex items-center">
                              {getFileIcon(file.type)}
                              <div className="ml-3">
                                <div className="font-medium text-sm">{file.type}</div>
                                <div className="text-xs text-slate-500">
                                  {new Date(file.createdAt).toLocaleDateString()}
                                </div>
                              </div>
                            </div>
                            <div className="flex space-x-1">
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-7 w-7"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  setEditFile(file)
                                  setShowAddModal(true)
                                }}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-7 w-7 text-red-500 hover:text-red-600 hover:bg-red-50"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  confirmDeleteFile(file._id)
                                }}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  </Tabs>
                </div>

                <div className="lg:col-span-2">
                  {selectedFile ? (
                    <Card>
                      <CardHeader className="pb-2 flex flex-row items-center justify-between">
                        <div>
                          <CardTitle className="text-lg flex items-center">
                            {getFileIcon(selectedFile.type)}
                            <span className="ml-2">{selectedFile.type}</span>
                          </CardTitle>
                          <CardDescription>
                            Created on {new Date(selectedFile.createdAt).toLocaleDateString()}
                          </CardDescription>
                        </div>
                        <div className="flex space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              setEditFile(selectedFile)
                              setShowAddModal(true)
                            }}
                          >
                            <Edit className="mr-2 h-4 w-4" />
                            Edit
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="text-red-500 hover:text-red-600 hover:bg-red-50 border-red-200"
                            onClick={() => confirmDeleteFile(selectedFile._id)}
                          >
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation()
                              handleArchiveFile(selectedFile)
                            }}
                          >
                            <Archive className="mr-2 h-4 w-4" />
                            Archive
                          </Button>
                        </div>
                      </CardHeader>
                      <Separator />
                      <CardContent className="pt-6">{renderFileDetails(selectedFile)}</CardContent>
                    </Card>
                  ) : (
                    <div className="h-full flex items-center justify-center bg-white rounded-lg border p-8">
                      <div className="text-center">
                        <FileText className="h-12 w-12 text-slate-300 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-slate-800">No document selected</h3>
                        <p className="text-slate-500 mt-1 max-w-md">
                          Select a document from the list to view its details.
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
      <Tabs defaultValue="annotations" className="w-full">
        <TabsList>
          <TabsTrigger value="annotations">Annotations</TabsTrigger>
          <TabsTrigger value="archived">Archived Files</TabsTrigger>
        </TabsList>

        <TabsContent value="annotations">
          <AnnotationList
            patientFileId={selectedFile?._id}
            onAnnotationDeleted={handleAnnotationDeleted}
            onAnnotationUpdated={handleAnnotationUpdated}
          />
        </TabsContent>

        <TabsContent value="archived">
          <ArchivedFilesList medicalRecordId={id} />
        </TabsContent>
      </Tabs>
      {showAddModal && (
        <AddPatientFileModal
          medicalRecordId={id}
          initialData={editFile}
          onClose={() => {
            setShowAddModal(false)
            setEditFile(null)
          }}
          onSubmit={editFile ? handleUpdateFile : handleAddFile}
        />
      )}
      {ocrLoading && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center">
          <div className="bg-white p-4 rounded-lg">
            <p className="flex items-center gap-2">
              <svg
                className="animate-spin h-5 w-5 text-blue-500"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Analyzing image...
            </p>
          </div>
        </div>
      )}
      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this document? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setShowDeleteDialog(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteFile}>
              Delete
            </Button>
          </div>
        </DialogContent>
      </Dialog>
      {showAnnotationDialog && (
        <AnnotationDialog
          isOpen={showAnnotationDialog}
          onClose={() => setShowAnnotationDialog(false)}
          patientFileId={fileToAnnotate}
          initialPosition={annotationPosition}
          onAnnotationAdded={handleAnnotationAdded}
        />
      )}
      {showArchiveDialog && (
        <ArchiveDialog
          isOpen={showArchiveDialog}
          onClose={() => setShowArchiveDialog(false)}
          patientFileId={fileToArchive}
          onFileArchived={handleFileArchived}
        />
      )}

      <Dialog open={!!ocrResult} onOpenChange={() => setOcrResult(null)}>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>OCR Results</DialogTitle>
            <DialogDescription>Verify the extracted information before creating the medical document</DialogDescription>
          </DialogHeader>

          {ocrResult && (
            <div className="space-y-6">
              <div className="grid gap-4">
                <div>
                  <Label htmlFor="patientName">Patient Name</Label>
                  <Input
                    id="patientName"
                    value={ocrResult.extractedData.patientName}
                    readOnly
                    className="font-medium"
                  />
                </div>

                <div>
                  <Label htmlFor="diagnosis">Diagnosis</Label>
                  <Input
                    id="diagnosis"
                    value={ocrResult.extractedData.diagnosis}
                    readOnly
                    className="font-medium text-red-600"
                  />
                </div>

                {ocrResult.extractedData.tests?.length > 0 && (
                  <div>
                    <Label>Test Results</Label>
                    <div className="mt-2 space-y-2">
                      {ocrResult.extractedData.tests.map((test, index) => (
                        <div key={index} className="p-3 border rounded-md bg-gray-50">
                          <div className="font-medium">{test.testName}</div>
                          <div className="text-sm mt-1">{test.result}</div>
                          {test.date && (
                            <div className="text-xs text-gray-500 mt-1">{new Date(test.date).toLocaleDateString()}</div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setOcrResult(null)}>
                  Cancel
                </Button>
                <Button
                  onClick={() => {
                    handleAddFile({
                      type: "Diagnostic",
                      notes: "Document generated automatically by OCR",
                      details: {
                        diagnosis: ocrResult.extractedData.diagnosis,
                        diagnosticTests: ocrResult.extractedData.tests.map((test) => ({
                          testName: test.testName,
                          result: test.result,
                          date: test.date || new Date(),
                        })),
                        patientInfo: {
                          firstName: ocrResult.extractedData.patientName.split(" ")[0],
                          lastName: ocrResult.extractedData.patientName.split(" ").slice(1).join(" "),
                        },
                      },
                    })
                    setOcrResult(null)
                  }}
                  className="bg-[#D1DEEB] text-gray-900 hover:bg-[#b8c9db] shadow-lg rounded-lg py-3 px-6 transition-colors duration-300"
                >
                  Confirm and create
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}

export default MedicalRecordDetails
</file>

<file path="src/pages/NotFound.jsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
    const location = useLocation();

    useEffect(() => {
        console.error(
            "404 Error: User attempted to access non-existent route:",
            location.pathname
        );
    }, [location.pathname]);

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="text-center">
                <h1 className="text-4xl font-bold mb-4">404</h1>
                <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
                <a href="/" className="text-blue-500 hover:text-blue-700 underline">
                    Return to Home
                </a>
            </div>
        </div>
    );
};

export default NotFound;
</file>

<file path="src/pages/PatientResourcesPage.jsx">
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Database, CheckCircle, Search, BedDouble, Activity, Hospital, Users } from "lucide-react";
import { useState } from "react";
// import { Separator } from "@/components/ui/separator"; // Optionnel, si vous voulez une ligne de séparation plus stylée

const STATUS_STYLES = {
  available: {
    text: "text-green-700 dark:text-green-400", // Légèrement plus foncé pour le texte
    bg: "bg-green-100 dark:bg-green-800/60",    // Fond plus opaque
    dot: "bg-green-500 dark:bg-green-400",
  },
  "in-maintenance": {
    text: "text-yellow-700 dark:text-yellow-400", // Légèrement plus foncé
    bg: "bg-yellow-100 dark:bg-yellow-800/60",   // Fond plus opaque
    dot: "bg-yellow-500 dark:bg-yellow-400",
  },
};

const STATIC_RESOURCES = [
  { _id: "1", name: "General Bed A1", type: "bed", location: "Ward A", status: "available", quantity: 2 },
  { _id: "2", name: "ICU Unit 1", type: "icu", location: "ICU Wing", status: "in-maintenance", quantity: 1 },
  { _id: "3", name: "Ventilator V2", type: "ventilator", location: "Emergency Room", status: "available", quantity: 3 },
  { _id: "4", name: "Wheelchair W5", type: "wheelchair", location: "Floor 2", status: "available", quantity: 5 },
];

const STATIC_ALLOCATED_RESOURCES = [
  { _id: "alloc1", name: "CT Scan Room 1", type: "ct-scan", location: "Radiology Dept" },
  { _id: "alloc2", name: "MRI Unit B", type: "mri", location: "Imaging Center" },
];

const getResourceIcon = (type, className = "w-5 h-5 mr-2") => {
  switch (type.toLowerCase()) {
    case "bed": return <BedDouble className={`${className} text-blue-500 dark:text-blue-400`} />;
    case "icu": return <Activity className={`${className} text-red-500 dark:text-red-400`} />;
    case "ventilator": return <Users className={`${className} text-teal-500 dark:text-teal-400`} />;
    case "wheelchair": return <Users className={`${className} text-purple-500 dark:text-purple-400`} />;
    case "ct-scan":
    case "mri":
      return <Hospital className={`${className} text-indigo-500 dark:text-indigo-400`} />;
    default: return <Database className={`${className} text-gray-500 dark:text-gray-400`} />;
  }
};

export default function PatientResourcesPage() {
  const [searchQuery, setSearchQuery] = useState("");

  const filteredResources = STATIC_RESOURCES.filter(
    (r) =>
      r.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      r.type.toLowerCase().includes(searchQuery.toLowerCase()) ||
      r.location.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const totalAvailable = STATIC_RESOURCES.filter((r) => r.status === "available").reduce((sum, r) => sum + r.quantity, 0);
  const totalInMaintenance = STATIC_RESOURCES.filter((r) => r.status === "in-maintenance").reduce((sum, r) => sum + r.quantity, 0);

  return (
    <div className="min-h-screen bg-slate-100 dark:bg-slate-950 p-4 md:p-6 lg:p-8 transition-colors duration-300">
      {/* Carte Principale pour TOUT le contenu de cette page */}
      <Card className="w-full max-w-full mx-auto shadow-2xl bg-white dark:bg-slate-900 rounded-2xl">
        <CardHeader className="px-6 py-5 md:px-8 md:py-6 border-b border-slate-200 dark:border-slate-800">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
            <div>
              <CardTitle className="text-2xl sm:text-3xl font-bold tracking-tight text-slate-900 dark:text-slate-50">
                Hospital Resources
              </CardTitle>
              <CardDescription className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                Overview and management of available medical resources.
              </CardDescription>
            </div>
            <div className="relative w-full sm:w-auto mt-4 sm:mt-0">
              <Search className="absolute left-3.5 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400 dark:text-slate-500 pointer-events-none" />
              <input
                type="text"
                placeholder="Search name, type, location..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-11 pr-4 py-2.5 border border-slate-300 dark:border-slate-700 rounded-lg w-full sm:w-72 bg-slate-50 dark:bg-slate-800 text-slate-700 dark:text-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 transition-shadow focus:shadow-md"
              />
            </div>
          </div>
        </CardHeader>

        <CardContent className="p-6 md:p-8">
          <div className="flex flex-col lg:flex-row items-start gap-8">
            {/* Section principale de contenu (stats et grille) */}
            <div className="w-full lg:w-3/4 space-y-8">
              {/* Stats Cards */}
              <div className="grid gap-6 grid-cols-1 sm:grid-cols-2">
                <Card className="p-6 bg-slate-50 dark:bg-slate-800/70 shadow-lg rounded-xl border border-transparent dark:border-slate-700 hover:shadow-xl transition-shadow duration-300">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="p-3 bg-green-100 dark:bg-green-500/20 rounded-full">
                        <CheckCircle className="w-7 h-7 text-green-600 dark:text-green-400" />
                      </div>
                      <div>
                        <p className="text-sm text-slate-500 dark:text-slate-400">Available (Units)</p>
                        <h3 className="text-3xl font-bold text-slate-800 dark:text-slate-100">{totalAvailable}</h3>
                      </div>
                    </div>
                  </div>
                </Card>
                <Card className="p-6 bg-slate-50 dark:bg-slate-800/70 shadow-lg rounded-xl border border-transparent dark:border-slate-700 hover:shadow-xl transition-shadow duration-300">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="p-3 bg-yellow-100 dark:bg-yellow-500/20 rounded-full">
                        <Database className="w-7 h-7 text-yellow-600 dark:text-yellow-400" />
                      </div>
                      <div>
                        <p className="text-sm text-slate-500 dark:text-slate-400">In Maintenance (Units)</p>
                        <h3 className="text-3xl font-bold text-slate-800 dark:text-slate-100">{totalInMaintenance}</h3>
                      </div>
                    </div>
                  </div>
                </Card>
              </div>

              {/* Resource Grid */}
              {filteredResources.length > 0 ? (
                <div className="grid gap-6 grid-cols-1 sm:grid-cols-2 xl:grid-cols-3">
                  {filteredResources.map((resource) => (
                    <Card
                      key={resource._id}
                      className="overflow-hidden bg-white dark:bg-slate-800/70 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 group border border-transparent dark:border-slate-700"
                    >
                      <div
                        className="h-44 bg-cover bg-center relative group-hover:scale-105 transition-transform duration-300"
                        style={{
                          backgroundImage: `url(https://picsum.photos/seed/${resource.type.replace(/\s+/g, '')}${resource._id}/800/450)`,
                        }}
                      >
                        <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent"></div>
                        <div className={`absolute top-3 right-3 px-2.5 py-1 text-xs font-bold rounded-full ${STATUS_STYLES[resource.status]?.bg} ${STATUS_STYLES[resource.status]?.text}`}>
                          {resource.status.replace('-', ' ')}
                        </div>
                      </div>
                      <div className="p-5">
                        <div className="flex items-center mb-1.5">
                          {getResourceIcon(resource.type, "w-5 h-5 mr-2.5")}
                          <h3 className="text-lg font-semibold text-slate-800 dark:text-slate-100 truncate group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors" title={resource.name}>
                            {resource.name}
                          </h3>
                        </div>
                        <p className="text-xs text-slate-500 dark:text-slate-400 mb-3 capitalize">
                          Type: {resource.type} • Location: {resource.location}
                        </p>
                        <div className="flex items-center justify-between mt-4 pt-3 border-t border-slate-200 dark:border-slate-700">
                          <p className="text-sm text-slate-600 dark:text-slate-300">
                            Quantity: <span className="font-bold text-lg">{resource.quantity}</span>
                          </p>
                          <div className="flex items-center">
                            <span className={`w-2.5 h-2.5 rounded-full mr-2 ${STATUS_STYLES[resource.status]?.dot}`}></span>
                            <p className={`text-xs font-semibold capitalize ${STATUS_STYLES[resource.status]?.text}`}>
                              {resource.status.replace('-', ' ')}
                            </p>
                          </div>
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center py-16 bg-slate-50 dark:bg-slate-800/50 rounded-xl">
                  <Search className="w-20 h-20 text-slate-300 dark:text-slate-600 mx-auto mb-4" />
                  <p className="text-lg text-slate-500 dark:text-slate-400">No resources found.</p>
                  {searchQuery && <p className="text-sm text-slate-400 dark:text-slate-500 mt-1">Try adjusting your search criteria.</p>}
                </div>
              )}
            </div>

            {/* Sidebar: Allocated Resources */}
            <aside className="w-full lg:w-1/4 space-y-6 lg:sticky lg:top-24 self-start"> {/* self-start pour aligner avec le haut de la section principale */}
              <Card className="bg-white dark:bg-slate-800/70 p-6 rounded-xl shadow-lg border border-transparent dark:border-slate-700">
                <h2 className="text-xl font-semibold text-slate-800 dark:text-slate-100 mb-5 pb-3 border-b border-slate-200 dark:border-slate-700">
                  My Allocated Resources
                </h2>
                {STATIC_ALLOCATED_RESOURCES.length === 0 ? (
                  <p className="text-slate-500 dark:text-slate-400 text-sm py-4 text-center">No resources currently allocated to you.</p>
                ) : (
                  <div className="space-y-4 max-h-[calc(100vh-12rem)] overflow-y-auto pr-1 -mr-2"> {/* Ajustement du scroll */}
                    {STATIC_ALLOCATED_RESOURCES.map((resource) => (
                      <Card key={resource._id} className="p-4 bg-slate-100 dark:bg-slate-700/60 rounded-lg border border-slate-200 dark:border-slate-700 hover:shadow-md transition-shadow">
                        <div className="flex items-center mb-1">
                          {getResourceIcon(resource.type, "w-4 h-4 mr-2")} {/* Icônes plus petites ici */}
                          <h3 className="font-semibold text-sm text-slate-700 dark:text-slate-200">{resource.name}</h3>
                        </div>
                        <p className="text-xs text-slate-500 dark:text-slate-400 ml-6">
                          Type: {resource.type}
                        </p>
                        <p className="text-xs text-slate-500 dark:text-slate-400 ml-6">
                          Location: {resource.location}
                        </p>
                      </Card>
                    ))}
                  </div>
                )}
              </Card>
            </aside>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/pages/Patients.jsx">
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import {
  Search,
  UserPlus,
  Calendar,
  Phone,
  User,
  Mail,
  Heart,
  Filter,
  Pencil,
  Trash2,
  Users,
  RefreshCw,
  Activity,
  FileText,
  ClipboardList,
} from "lucide-react"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog"
import axios from "axios"
import { motion, AnimatePresence } from "framer-motion"

const Patients = () => {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedPatient, setSelectedPatient] = useState(null)
  const [isDetailsOpen, setIsDetailsOpen] = useState(false)
  const [patients, setPatients] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const patientsPerPage = 6
  const [editingPatient, setEditingPatient] = useState(null)
  const [isSheetOpen, setIsSheetOpen] = useState(false)
  const [formErrors, setFormErrors] = useState({})
  const [previewImage, setPreviewImage] = useState(null)
  const [refreshing, setRefreshing] = useState(false)
  const [newPatient, setNewPatient] = useState({
    name: "",
    email: "",
    password: "",
    phoneNumber: "",
    dateOfBirth: "",
    bloodType: "",
    condition: "",
    age: "",
    profileImage: null,
  })

  const bloodTypes = ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
  const conditions = ["Stable", "Critical", "Recovering", "Under Observation", "Chronic", "Acute"]

  const fetchPatients = async () => {
    setLoading(true)
    setError(null)
    try {
      const response = await axios.get("http://localhost:8089/api/users/patients", { withCredentials: true })
      const fetchedPatients = response.data || []
      setPatients(fetchedPatients)
      setTotalPages(Math.ceil(fetchedPatients.length / patientsPerPage))
    } catch (err) {
      setError("Impossible de récupérer les patients.")
    } finally {
      setLoading(false)
    }
  }

  const refreshData = async () => {
    setRefreshing(true)
    await fetchPatients()
    setTimeout(() => setRefreshing(false), 800)
  }

  useEffect(() => {
    fetchPatients()
  }, [])

  const validateFields = (data, isUpdate = false) => {
    const errors = {}
    const { name, email, password, phoneNumber, dateOfBirth, bloodType } = data

    if (!name) errors.name = "Le nom est requis"
    if (!email) errors.email = "L'email est requis"
    else if (!/\S+@\S+\.\S+/.test(email)) errors.email = "Email invalide"
    if (!phoneNumber) errors.phoneNumber = "Le numéro de téléphone est requis"
    if (!dateOfBirth) errors.dateOfBirth = "La date de naissance est requise"
    if (!bloodType) errors.bloodType = "Le groupe sanguin est requis"
    if (!isUpdate && (!password || password.length < 6))
      errors.password = "Le mot de passe doit contenir au moins 6 caractères"

    setFormErrors(errors)
    return Object.keys(errors).length === 0
  }

  const handleSearch = (query) => {
    setSearchQuery(query)
    setCurrentPage(1)

    if (!query.trim()) {
      // Reset to all patients
      setTotalPages(Math.ceil(patients.length / patientsPerPage))
      return
    }

    const filtered = patients.filter((patient) => patient.name.toLowerCase().includes(query.toLowerCase()))
    setTotalPages(Math.ceil(filtered.length / patientsPerPage))
  }

  const handleAdd = async (e) => {
    e.preventDefault()
    if (!validateFields(newPatient)) return

    setLoading(true)
    const formData = new FormData()
    formData.append("name", newPatient.name)
    formData.append("email", newPatient.email)
    formData.append("password", newPatient.password)
    formData.append("phoneNumber", newPatient.phoneNumber)
    formData.append("dateOfBirth", newPatient.dateOfBirth)
    formData.append("bloodType", newPatient.bloodType)
    formData.append("condition", newPatient.condition)
    formData.append("age", newPatient.age)

    if (newPatient.profileImage) {
      formData.append("profileImage", newPatient.profileImage)
    }

    try {
      const response = await axios.post("http://localhost:8089/api/users/patients", formData, {
        withCredentials: true,
      })

      // Reset form
      setNewPatient({
        name: "",
        email: "",
        password: "",
        phoneNumber: "",
        dateOfBirth: "",
        bloodType: "",
        condition: "",
        age: "",
        profileImage: null,
      })
      setPreviewImage(null)
      setFormErrors({})
      setIsSheetOpen(false)

      // Refresh patients list
      const updatedPatients = [...patients, response.data]
      setPatients(updatedPatients)
      setTotalPages(Math.ceil(updatedPatients.length / patientsPerPage))
    } catch (error) {
      console.error("Error adding patient:", error)
      alert(error.response?.data?.message || "Erreur lors de l'ajout du patient")
    } finally {
      setLoading(false)
    }
  }

  const handleUpdate = async (e) => {
    e.preventDefault()
    if (!editingPatient || !validateFields(editingPatient, true)) return

    setLoading(true)
    const formData = new FormData()
    formData.append("name", editingPatient.name)
    formData.append("email", editingPatient.email)
    formData.append("phoneNumber", editingPatient.phoneNumber)
    formData.append("dateOfBirth", editingPatient.dateOfBirth)
    formData.append("bloodType", editingPatient.bloodType)
    formData.append("condition", editingPatient.condition)
    formData.append("age", editingPatient.age)

    if (editingPatient.profileImage instanceof File) {
      formData.append("profileImage", editingPatient.profileImage)
    }

    try {
      const response = await axios.put(`http://localhost:8089/api/users/patients/${editingPatient._id}`, formData, {
        withCredentials: true,
      })

      setEditingPatient(null)
      setPreviewImage(null)
      setFormErrors({})
      setIsSheetOpen(false)

      // Update patient in the list
      const updatedPatients = patients.map((p) => (p._id === editingPatient._id ? response.data : p))
      setPatients(updatedPatients)
    } catch (error) {
      console.error("Error updating patient:", error)
      alert(error.response?.data?.message || "Erreur lors de la mise à jour du patient")
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id) => {
    if (!window.confirm("Êtes-vous sûr de vouloir supprimer ce patient ?")) return

    setLoading(true)
    try {
      await axios.delete(`http://localhost:8089/api/users/patients/${id}`, {
        withCredentials: true,
      })

      // Remove patient from list
      const updatedPatients = patients.filter((p) => p._id !== id)
      setPatients(updatedPatients)
      setTotalPages(Math.ceil(updatedPatients.length / patientsPerPage))
    } catch (error) {
      console.error("Error deleting patient:", error)
      alert(error.response?.data?.message || "Erreur lors de la suppression du patient")
    } finally {
      setLoading(false)
    }
  }

  const handleImageChange = (e) => {
    const file = e.target.files[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => setPreviewImage(reader.result)
      reader.readAsDataURL(file)

      if (editingPatient) {
        setEditingPatient({ ...editingPatient, profileImage: file })
      } else {
        setNewPatient({ ...newPatient, profileImage: file })
      }
    }
  }

  const handleEditClick = (patient) => {
    setEditingPatient({ ...patient })
    setPreviewImage(patient.profileImage ? `http://localhost:8089${patient.profileImage}` : null)
    setFormErrors({})
    setIsSheetOpen(true)
  }

  const handleSheetClose = () => {
    setIsSheetOpen(false)
    setEditingPatient(null)
    setNewPatient({
      name: "",
      email: "",
      password: "",
      phoneNumber: "",
      dateOfBirth: "",
      bloodType: "",
      condition: "",
      age: "",
      profileImage: null,
    })
    setPreviewImage(null)
    setFormErrors({})
  }

  // Get paginated patients
  const filteredPatients = patients.filter((patient) => patient.name.toLowerCase().includes(searchQuery.toLowerCase()))
  const paginatedPatients = filteredPatients.slice((currentPage - 1) * patientsPerPage, currentPage * patientsPerPage)

  const PatientForm = ({ isEditing }) => (
    <form onSubmit={isEditing ? handleUpdate : handleAdd} className="space-y-4 mt-6">
      <div className="relative">
        <Input
          placeholder="Nom Complet"
          value={isEditing ? editingPatient.name : newPatient.name}
          onChange={(e) =>
            isEditing
              ? setEditingPatient({ ...editingPatient, name: e.target.value })
              : setNewPatient({ ...newPatient, name: e.target.value })
          }
          required
          aria-invalid={!!formErrors.name}
          aria-describedby={formErrors.name ? "name-error" : undefined}
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
        />
        {formErrors.name && (
          <p id="name-error" className="text-red-500 text-sm mt-1" role="alert">
            {formErrors.name}
          </p>
        )}
      </div>
      <div className="relative">
        <Input
          placeholder="Email"
          type="email"
          value={isEditing ? editingPatient.email : newPatient.email}
          onChange={(e) =>
            isEditing
              ? setEditingPatient({ ...editingPatient, email: e.target.value })
              : setNewPatient({ ...newPatient, email: e.target.value })
          }
          required
          aria-invalid={!!formErrors.email}
          aria-describedby={formErrors.email ? "email-error" : undefined}
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
        />
        {formErrors.email && (
          <p id="email-error" className="text-red-500 text-sm mt-1" role="alert">
            {formErrors.email}
          </p>
        )}
      </div>
      {!isEditing && (
        <div className="relative">
          <Input
            placeholder="Mot de passe"
            type="password"
            value={newPatient.password}
            onChange={(e) => setNewPatient({ ...newPatient, password: e.target.value })}
            required
            aria-invalid={!!formErrors.password}
            aria-describedby={formErrors.password ? "password-error" : undefined}
            className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
          />
          {formErrors.password && (
            <p id="password-error" className="text-red-500 text-sm mt-1" role="alert">
              {formErrors.password}
            </p>
          )}
        </div>
      )}
      <div className="relative">
        <Input
          placeholder="Numéro de téléphone"
          value={isEditing ? editingPatient.phoneNumber : newPatient.phoneNumber}
          onChange={(e) =>
            isEditing
              ? setEditingPatient({ ...editingPatient, phoneNumber: e.target.value })
              : setNewPatient({ ...newPatient, phoneNumber: e.target.value })
          }
          required
          aria-invalid={!!formErrors.phoneNumber}
          aria-describedby={formErrors.phoneNumber ? "phoneNumber-error" : undefined}
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
        />
        {formErrors.phoneNumber && (
          <p id="phoneNumber-error" className="text-red-500 text-sm mt-1" role="alert">
            {formErrors.phoneNumber}
          </p>
        )}
      </div>
      <div className="relative">
        <Input
          placeholder="Date de naissance"
          type="date"
          value={isEditing ? editingPatient.dateOfBirth : newPatient.dateOfBirth}
          onChange={(e) =>
            isEditing
              ? setEditingPatient({ ...editingPatient, dateOfBirth: e.target.value })
              : setNewPatient({ ...newPatient, dateOfBirth: e.target.value })
          }
          required
          aria-invalid={!!formErrors.dateOfBirth}
          aria-describedby={formErrors.dateOfBirth ? "dateOfBirth-error" : undefined}
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
        />
        {formErrors.dateOfBirth && (
          <p id="dateOfBirth-error" className="text-red-500 text-sm mt-1" role="alert">
            {formErrors.dateOfBirth}
          </p>
        )}
      </div>
      <div className="relative">
        <Input
          placeholder="Âge"
          type="number"
          value={isEditing ? editingPatient.age : newPatient.age}
          onChange={(e) =>
            isEditing
              ? setEditingPatient({ ...editingPatient, age: e.target.value })
              : setNewPatient({ ...newPatient, age: e.target.value })
          }
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
        />
      </div>
      <div className="relative">
        <select
          value={isEditing ? editingPatient.bloodType : newPatient.bloodType}
          onChange={(e) =>
            isEditing
              ? setEditingPatient({ ...editingPatient, bloodType: e.target.value })
              : setNewPatient({ ...newPatient, bloodType: e.target.value })
          }
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
          required
          aria-invalid={!!formErrors.bloodType}
          aria-describedby={formErrors.bloodType ? "bloodType-error" : undefined}
        >
          <option value="">Sélectionner le groupe sanguin</option>
          {bloodTypes.map((type) => (
            <option key={type} value={type}>
              {type}
            </option>
          ))}
        </select>
        {formErrors.bloodType && (
          <p id="bloodType-error" className="text-red-500 text-sm mt-1" role="alert">
            {formErrors.bloodType}
          </p>
        )}
      </div>
      <div className="relative">
        <select
          value={isEditing ? editingPatient.condition : newPatient.condition}
          onChange={(e) =>
            isEditing
              ? setEditingPatient({ ...editingPatient, condition: e.target.value })
              : setNewPatient({ ...newPatient, condition: e.target.value })
          }
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
        >
          <option value="">Sélectionner la condition médicale</option>
          {conditions.map((condition) => (
            <option key={condition} value={condition}>
              {condition}
            </option>
          ))}
        </select>
      </div>
      <div className="relative">
        <Input
          type="file"
          accept="image/*"
          onChange={handleImageChange}
          className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500 transition-all duration-300 shadow-sm"
        />
        {previewImage && (
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
            className="mt-4 flex justify-center"
          >
            <img
              src={previewImage || "/placeholder.svg"}
              alt="Preview"
              className="w-32 h-32 object-cover rounded-full border-2 border-gray-200 hover:border-indigo-400 hover:shadow-lg transition-all duration-300 hover:scale-105"
            />
          </motion.div>
        )}
      </div>
      <Button
        type="submit"
        className="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 disabled:opacity-50 transition-all duration-300 shadow-md rounded-lg py-3"
        disabled={loading}
      >
        {loading ? <span className="mr-2 animate-spin">⏳</span> : null}
        {isEditing ? "Mettre à jour le patient" : "Ajouter le patient"}
      </Button>
      <Button
        type="button"
        variant="outline"
        className="w-full mt-3 border-gray-300 text-gray-700 hover:bg-gray-100 transition-all duration-300 rounded-lg py-3"
        onClick={handleSheetClose}
      >
        Annuler
      </Button>
    </form>
  )

  const Pagination = () => {
    const pages = Array.from({ length: totalPages }, (_, i) => i + 1)

    return (
      <div className="flex justify-center gap-2 mt-8" role="navigation" aria-label="Pagination">
        <Button
          disabled={currentPage === 1}
          onClick={() => setCurrentPage(currentPage - 1)}
          className="bg-blue-100 text-blue-700 hover:bg-blue-200 transition-all duration-300 rounded-lg px-4 py-2 disabled:opacity-50"
        >
          Précédent
        </Button>
        {pages.map((page) => (
          <Button
            key={page}
            onClick={() => setCurrentPage(page)}
            className={`${
              currentPage === page ? "bg-blue-600 text-white" : "bg-blue-100 text-blue-700 hover:bg-blue-200"
            } transition-all duration-300 rounded-lg px-4 py-2`}
          >
            {page}
          </Button>
        ))}
        <Button
          disabled={currentPage === totalPages}
          onClick={() => setCurrentPage(currentPage + 1)}
          className="bg-blue-100 text-blue-700 hover:bg-blue-200 transition-all duration-300 rounded-lg px-4 py-2 disabled:opacity-50"
        >
          Suivant
        </Button>
      </div>
    )
  }

  const getConditionColor = (condition) => {
    switch (condition?.toLowerCase()) {
      case "critical":
        return "text-red-600 bg-red-50 border-red-200"
      case "stable":
        return "text-green-600 bg-green-50 border-green-200"
      case "recovering":
        return "text-emerald-600 bg-emerald-50 border-emerald-200"
      case "under observation":
        return "text-amber-600 bg-amber-50 border-amber-200"
      case "chronic":
        return "text-purple-600 bg-purple-50 border-purple-200"
      case "acute":
        return "text-orange-600 bg-orange-50 border-orange-200"
      default:
        return "text-gray-600 bg-gray-50 border-gray-200"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-white p-8">
      {/* Enhanced Header with Stats */}
      <div className="mb-12">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-8"
        >
<h1 className="text-5xl font-extrabold tracking-tight mb-2" style={{ color: '#42A5FF' }}>            Gestion des Patients
          </h1>
          <p className="text-gray-600 text-lg max-w-2xl mx-auto">
            Système de gestion complet pour suivre et gérer les informations des patients
          </p>
        </motion.div>
        <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.5, delay: 0.2 }}
    className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8 justify-center mx-auto max-w-6xl"
  >
    <Card className="bg-white/80 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all duration-300 border border-indigo-100 max-w-md w-full">
      <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">Total Patients</p>
                  <h3 className="text-3xl font-bold text-gray-900 mt-1">{patients.length}</h3>
                </div>
                <div className="bg-blue-100 p-3 rounded-full">
                  <Users className="h-6 w-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

         

          <Card className="bg-white/80 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all duration-300 border border-blue-100">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">Dernière Mise à Jour</p>
                  <h3 className="text-lg font-bold text-gray-900 mt-1">{new Date().toLocaleDateString()}</h3>
                </div>
                <div className="bg-green-100 p-3 rounded-full">
                  <RefreshCw
                    className={`h-6 w-6 text-green-600 ${refreshing ? "animate-spin" : "cursor-pointer"}`}
                    onClick={refreshData}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-10">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Rechercher des patients par nom..."
            className="w-full pl-10 p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition-all duration-300 shadow-sm"
            value={searchQuery}
            onChange={(e) => handleSearch(e.target.value)}
            disabled={loading}
            aria-label="Rechercher des patients"
          />
        </div>
       
      </div>

      {loading && patients.length === 0 ? (
        <div className="flex justify-center items-center h-64">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          >
            <RefreshCw className="w-12 h-12 text-blue-600" />
          </motion.div>
          <span className="ml-4 text-blue-600 text-xl">Chargement des patients...</span>
        </div>
      ) : error ? (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center bg-red-50 p-8 rounded-xl border border-red-200"
        >
          <p className="text-red-500 text-lg mb-4">{error}</p>
          <Button
            onClick={() => window.location.reload()}
            className="bg-blue-600 text-white hover:bg-blue-700 transition-all duration-300 rounded-lg px-6 py-2"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Réessayer
          </Button>
        </motion.div>
      ) : paginatedPatients.length === 0 ? (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center bg-gray-50 p-12 rounded-xl border border-gray-200"
        >
          <p className="text-gray-500 text-xl mb-4" role="alert">
            Aucun patient trouvé correspondant à votre recherche.
          </p>
          {searchQuery && (
            <Button
              onClick={() => {
                setSearchQuery("")
                fetchPatients()
              }}
              className="bg-blue-600 text-white hover:bg-blue-700 transition-all duration-300 rounded-lg px-6 py-2"
            >
              Effacer la recherche
            </Button>
          )}
        </motion.div>
      ) : (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
          >
            {paginatedPatients.map((patient, index) => (
              <motion.div
                key={patient._id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
              >
                <Card className="relative bg-white/90 backdrop-blur-sm shadow-xl hover:shadow-2xl hover:-translate-y-2 transition-all duration-500 rounded-2xl overflow-hidden border border-gray-200 hover:border-blue-400">
                  <CardContent className="p-6 text-center">
                    <div className="relative group">
                      <div className="absolute inset-0 bg-blue-500/10 rounded-full blur-xl opacity-0 group-hover:opacity-70 transition-opacity duration-500"></div>
                      <img
                        src={
                          patient.profileImage
                            ? `http://localhost:8089${patient.profileImage.startsWith("/") ? patient.profileImage : "/" + patient.profileImage}`
                            : "https://via.placeholder.com/150?text=Patient"
                        }
                        alt={patient.name}
                        className="w-40 h-40 mx-auto object-cover rounded-full border-4 border-gray-100 group-hover:border-blue-300 transition-all duration-500 group-hover:scale-110"
                      />
                      {patient.bloodType && (
                        <motion.span
                          initial={{ x: -20, opacity: 0 }}
                          animate={{ x: 0, opacity: 1 }}
                          transition={{ delay: 0.2 }}
                          className="absolute top-2 left-2 bg-red-50 text-red-700 text-sm font-medium px-3 py-1 rounded-full shadow-md border border-red-200 group-hover:bg-red-100 transition-all duration-300"
                        >
                          <Heart className="w-3 h-3 inline mr-1" /> {patient.bloodType}
                        </motion.span>
                      )}
                      {patient.condition && (
                        <motion.span
                          initial={{ x: 20, opacity: 0 }}
                          animate={{ x: 0, opacity: 1 }}
                          transition={{ delay: 0.3 }}
                          className={`absolute top-2 right-2 text-sm font-medium px-3 py-1 rounded-full shadow-md border transition-all duration-300 ${getConditionColor(
                            patient.condition,
                          )}`}
                        >
                          <Activity className="w-3 h-3 inline mr-1" /> {patient.condition}
                        </motion.span>
                      )}
                    </div>
                    <h2 className="text-2xl font-bold text-gray-800 mt-6 truncate">
                      {patient.name || "Nom non disponible"}
                    </h2>
                    <div className="mt-6 space-y-4 text-gray-600 text-sm">
                      {patient.age && (
                        <p className="flex items-center justify-center gap-2">
                          <Calendar className="w-4 h-4 text-blue-500" /> Âge: {patient.age} ans
                        </p>
                      )}
                      <div className="flex items-center justify-center gap-2 group relative">
                        <Mail className="h-4 w-4 text-blue-400" />
                        <span className="group-hover:text-blue-600 transition-colors duration-300">
                          {patient.email || "Email non disponible"}
                        </span>
                        <div className="absolute bottom-8 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2">
                          Envoyer un email
                        </div>
                      </div>
                      <div className="flex items-center justify-center gap-2 group relative">
                        <Phone className="h-4 w-4 text-green-400" />
                        <span className="group-hover:text-green-600 transition-colors duration-300">
                          {patient.phoneNumber || "Numéro non disponible"}
                        </span>
                        <div className="absolute bottom-8 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2">
                          Appeler
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-center mt-8 gap-4">
                      <Button
                        variant="outline"
                        size="sm"
                        className="relative group bg-blue-50 text-blue-600 border-blue-200 hover:bg-blue-100 hover:border-blue-300 hover:shadow-lg transition-all duration-300"
                        onClick={() => handleEditClick(patient)}
                        disabled={loading}
                      >
                        <Pencil className="h-4 w-4 mr-1" /> 
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        className="relative group bg-red-50 text-red-600 border-red-200 hover:bg-red-100 hover:border-red-300 hover:shadow-lg transition-all duration-300"
                        onClick={() => handleDelete(patient._id)}
                        disabled={loading}
                      >
                        <Trash2 className="h-4 w-4 mr-1" /> 
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        className="relative group bg-cyan-50 text-cyan-600 border-cyan-200 hover:bg-cyan-100 hover:border-cyan-300 hover:shadow-lg transition-all duration-300"
                        onClick={() => {
                          setSelectedPatient(patient)
                          setIsDetailsOpen(true)
                        }}
                        disabled={loading}
                      >
                        <ClipboardList className="h-4 w-4 mr-1" /> 
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </motion.div>
          {totalPages > 1 && <Pagination />}
        </>
      )}

      {/* Patient Details Dialog */}
      <AnimatePresence>
        {isDetailsOpen && selectedPatient && (
          <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
            <DialogContent className="sm:max-w-md bg-white rounded-2xl shadow-2xl">
              <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                <DialogHeader>
                  <DialogTitle className="text-2xl font-bold text-gray-800">Détails du Patient</DialogTitle>
                  <DialogDescription className="text-gray-600">
                    Informations sur {selectedPatient.name}
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4 p-4">
                  <div className="flex justify-center">
                    <img
                      src={
                        selectedPatient.profileImage
                          ? `http://localhost:8089${selectedPatient.profileImage}`
                          : "https://via.placeholder.com/100?text=Patient"
                      }
                      alt={selectedPatient.name}
                      className="w-24 h-24 rounded-full object-cover border-4 border-blue-200 shadow-md"
                      onError={(e) => (e.target.src = "https://via.placeholder.com/100?text=Patient")}
                    />
                  </div>
                  <p className="text-gray-700">
                    <strong className="flex items-center gap-2">
                      <User className="inline w-4 h-4 text-blue-600" /> Nom:
                    </strong>{" "}
                    {selectedPatient.name}
                  </p>
                  <p className="text-gray-700">
                    <strong className="flex items-center gap-2">
                      <Mail className="inline w-4 h-4 text-blue-600" /> Email:
                    </strong>{" "}
                    {selectedPatient.email || "N/A"}
                  </p>
                  <p className="text-gray-700">
                    <strong className="flex items-center gap-2">
                      <Phone className="inline w-4 h-4 text-blue-600" /> Téléphone:
                    </strong>{" "}
                    {selectedPatient.phoneNumber || "N/A"}
                  </p>
                  <p className="text-gray-700">
                    <strong className="flex items-center gap-2">
                      <Calendar className="inline w-4 h-4 text-blue-600" /> Date de Naissance:
                    </strong>{" "}
                    {selectedPatient.dateOfBirth ? new Date(selectedPatient.dateOfBirth).toLocaleDateString() : "N/A"}
                  </p>
                  <p className="text-gray-700">
                    <strong className="flex items-center gap-2">
                      <Heart className="inline w-4 h-4 text-blue-600" /> Groupe Sanguin:
                    </strong>{" "}
                    {selectedPatient.bloodType || "N/A"}
                  </p>
                  {selectedPatient.condition && (
                    <p className="text-gray-700">
                      <strong className="flex items-center gap-2">
                        <Activity className="inline w-4 h-4 text-blue-600" /> Condition:
                      </strong>{" "}
                      {selectedPatient.condition}
                    </p>
                  )}
                  {selectedPatient.age && (
                    <p className="text-gray-700">
                      <strong className="flex items-center gap-2">
                        <FileText className="inline w-4 h-4 text-blue-600" /> Âge:
                      </strong>{" "}
                      {selectedPatient.age} ans
                    </p>
                  )}
                </div>
                <DialogFooter>
                  <DialogClose asChild>
                    <Button className="bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 transition-all duration-300 w-full">
                      Fermer
                    </Button>
                  </DialogClose>
                </DialogFooter>
              </motion.div>
            </DialogContent>
          </Dialog>
        )}
      </AnimatePresence>
    </div>
  )
}

export default Patients
</file>

<file path="src/pages/ProfilePage.jsx">
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie';
import { toast } from 'sonner';
import { motion } from 'framer-motion';

import ProfileHeader from '../components/ProfileHeader';
import ProfileContent from '../components/ProfileContent';
import LoadingState from '../components/LoadingState';

const ProfilePage = () => {
    const [isEditing, setIsEditing] = useState(false);
    const [activeTab, setActiveTab] = useState('personal');
    const [profileData, setProfileData] = useState({
        personal: {},
        medical: {},
        professional: {}
    });
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);

    // Simulate the API response with dummy data
    useEffect(() => {
        const mockData = {
            personal: {
                username: 'John Appleseed',
                role: 'Doctor',
                email: 'john.appleseed@example.com',
                phone: '+1 (555) 123-4567',
                address: '123 Apple Park Way, Cupertino, CA',
                dateOfBirth: '1980-05-15'
            },
            medical: {},
            professional: {
                department: 'Cardiology',
                specialization: 'Interventional Cardiology',
                experience: '15 years',
                education: 'Stanford Medical School',
                certifications: ['ABIM', 'FACC'],
                languages: ['English', 'Spanish']
            }
        };

        // Simulate API call
        setTimeout(() => {
            setProfileData(mockData);
            setLoading(false);
        }, 1500);

        /* Actual API Call (commented out)
        const token = Cookies.get("token");
        
        axios.get('http://localhost:8089/api/profile', {
          headers: {
            Authorization: `Bearer ${token}`
          }
        })
        .then(response => {
          setProfileData(response.data);
          setLoading(false);
        })
        .catch(error => {
          console.error('Error:', error);
          setError('Error loading profile');
          setLoading(false);
        });
        */
    }, []);

    const handleSave = async () => {
        try {
            setLoading(true);

            // Simulating API call for demo
            await new Promise(resolve => setTimeout(resolve, 800));

            /* Actual API Call (commented out)
            const token = Cookies.get("token");
            const response = await axios.put('http://localhost:8089/api/profile', profileData, {
              headers: {
                Authorization: `Bearer ${token}`
              }
            });
      
            if (response.status === 200) {
              const updatedData = response.data;
              setProfileData(updatedData);
            } else {
              throw new Error('Failed to update profile');
            }
            */

            setIsEditing(false);
            setLoading(false);
            toast.success('Profile updated successfully');
        } catch (error) {
            console.error('Error:', error);
            setError('Error saving changes');
            setLoading(false);
            toast.error('Failed to update profile');
        }
    };

    const handleEdit = (section, field, value) => {
        setProfileData(prev => ({
            ...prev,
            [section]: {
                ...prev[section],
                [field]: value
            }
        }));
    };

    if (loading) return <LoadingState />;

    if (error) {
        return (
            <div className="min-h-screen bg-slate-50 flex flex-col items-center justify-center p-4">
                <motion.div
                    className="bg-white rounded-lg shadow-lg p-6 max-w-md w-full"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                >
                    <div className="text-center">
                        <div className="bg-red-100 text-red-600 p-3 rounded-full inline-flex mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                        </div>
                        <h2 className="text-lg font-semibold text-gray-800 mb-2">Error Loading Profile</h2>
                        <p className="text-gray-600 mb-4">{error}</p>
                        <button
                            onClick={() => window.location.reload()}
                            className="bg-profileBlue-500 hover:bg-profileBlue-600 text-white font-medium py-2 px-4 rounded transition-colors"
                        >
                            Try Again
                        </button>
                    </div>
                </motion.div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-slate-50">
            {/* SUPPRIMER ou commenter cette ligne */}
            {/* <ProfileHeader
                username={profileData.personal.username}
                role={profileData.personal.role}
            /> */}

            <div className="container -mt-16 relative z-30 pb-16">
                <ProfileContent
                    profileData={profileData}
                    activeTab={activeTab}
                    setActiveTab={setActiveTab}
                    isEditing={isEditing}
                    setIsEditing={setIsEditing}
                    handleEdit={handleEdit}
                    handleSave={handleSave}
                />
            </div>
        </div>
    );
};

export default ProfilePage;
</file>

<file path="src/pages/Records.jsx">
"use client"
import ShareMedicalRecordButton from "./ShareMedicalRecordButton"
import SharedRecordsTab from "./SharedRecordsTab"
import { useEffect, useState } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { useNavigate } from "react-router-dom"
import { AlertCircle, FileText, User, Activity, Clock, AlertTriangle, Search } from "lucide-react"

import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Skeleton } from "@/components/ui/skeleton"

const Records = () => {
  const [patients, setPatients] = useState([])
  const [filteredPatients, setFilteredPatients] = useState([])
  const [loading, setLoading] = useState(true)
  const [doctorId, setDoctorId] = useState(null)
  const [error, setError] = useState("")
  const [searchTerm, setSearchTerm] = useState("")
  const navigate = useNavigate()

  useEffect(() => {
    const token = Cookies.get("token")
    if (!token) {
      setError("Médecin non connecté. Veuillez vous connecter.")
      setLoading(false)
      return
    }

    try {
      const payload = JSON.parse(atob(token.split(".")[1]))
      setDoctorId(payload.id)
      console.log("ID du médecin connecté :", payload.id)
    } catch (err) {
      setError("Erreur lors du décodage du token.")
      console.error("Erreur de décodage du token :", err)
      setLoading(false)
    }
  }, [])

  useEffect(() => {
    const fetchPatients = async () => {
      if (!doctorId) return

      try {
        const token = Cookies.get("token")
        const res = await axios.get(`http://localhost:8089/api/emergency-patients/by-doctor/${doctorId}`, {
          headers: { Authorization: `Bearer ${token}` },
          withCredentials: true,
        })

        console.log("Patients récupérés :", res.data)
        setPatients(res.data)
        setFilteredPatients(res.data)
      } catch (err) {
        console.error("Erreur lors de la récupération des patients :", err)
        setError("Erreur lors du chargement des dossiers des patients.")
      } finally {
        setLoading(false)
      }
    }

    fetchPatients()
  }, [doctorId])

  useEffect(() => {
    if (searchTerm.trim() === "") {
      setFilteredPatients(patients)
    } else {
      const filtered = patients.filter(
        (patient) =>
          `${patient.firstName} ${patient.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||
          patient.emergencyLevel?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          patient.currentSymptoms?.toLowerCase().includes(searchTerm.toLowerCase()),
      )
      setFilteredPatients(filtered)
    }
  }, [searchTerm, patients])

  const handleViewMedicalRecord = (medicalRecordId) => {
    if (medicalRecordId) {
      navigate(`/medical-records/${medicalRecordId}`)
    }
  }

  const getEmergencyLevelBadge = (level) => {
    switch (level?.toLowerCase()) {
      case "high":
      case "élevé":
      case "urgent":
        return (
          <Badge variant="destructive" className="ml-2">
            Urgent
          </Badge>
        )
      case "medium":
      case "moyen":
        return (
          <Badge variant="warning" className="ml-2 bg-amber-500">
            Moyen
          </Badge>
        )
      case "low":
      case "faible":
        return (
          <Badge variant="outline" className="ml-2">
            Faible
          </Badge>
        )
      default:
        return (
          <Badge variant="secondary" className="ml-2">
            Non défini
          </Badge>
        )
    }
  }

  if (loading) {
    return (
      <div className="p-6 max-w-7xl mx-auto">
        <div className="flex items-center space-x-2 mb-6">
          <Skeleton className="h-8 w-[250px]" />
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[1, 2, 3, 4, 5, 6].map((i) => (
            <Card key={i} className="overflow-hidden">
              <CardHeader className="pb-2">
                <Skeleton className="h-6 w-[180px]" />
              </CardHeader>
              <CardContent className="pb-2">
                <div className="space-y-2">
                  <Skeleton className="h-4 w-[150px]" />
                  <Skeleton className="h-4 w-[200px]" />
                  <Skeleton className="h-4 w-[170px]" />
                </div>
              </CardContent>
              <CardFooter>
                <Skeleton className="h-10 w-[180px]" />
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="p-6 max-w-7xl mx-auto">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    )
  }

  return (
    <div className="p-6 max-w-7xl mx-auto bg-slate-50 min-h-screen">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <div>
          <h1 className="text-3xl font-bold text-slate-800"style={{ color: '#42A5FF' }}>Dossiers Médicaux</h1>
          <p className="text-slate-500 mt-1">Gestion des patients assignés</p>
        </div>
        <div className="relative w-full md:w-64">
          <Search className="absolute left-0.5 top-2.5 h-4 w-4 text-slate-500" />
          <Input
            type="search"
            placeholder="Rechercher un patient..."
            className="pl-8"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      <Tabs defaultValue="all" className="mb-6">
        <TabsList>
          <TabsTrigger value="all">Tous les patients</TabsTrigger>
          <TabsTrigger value="urgent">Urgents</TabsTrigger>
          <TabsTrigger value="with-records">Avec dossier</TabsTrigger>
          <TabsTrigger value="without-records">Sans dossier</TabsTrigger>
          <TabsTrigger value="shared-with-me">Partagés avec moi</TabsTrigger>
        </TabsList>

        <TabsContent value="all">{renderPatientsList(filteredPatients)}</TabsContent>

        <TabsContent value="urgent">
          {renderPatientsList(
            filteredPatients.filter(
              (p) =>
                p.emergencyLevel?.toLowerCase() === "high" ||
                p.emergencyLevel?.toLowerCase() === "urgent" ||
                p.emergencyLevel?.toLowerCase() === "élevé",
            ),
          )}
        </TabsContent>

        <TabsContent value="with-records">
          {renderPatientsList(filteredPatients.filter((p) => p.medicalRecord))}
        </TabsContent>

        <TabsContent value="without-records">
          {renderPatientsList(filteredPatients.filter((p) => !p.medicalRecord))}
        </TabsContent>

        <TabsContent value="shared-with-me">
          <SharedRecordsTab />
        </TabsContent>
      </Tabs>
    </div>
  )

  function renderPatientsList(patientsList) {
    if (patientsList.length === 0) {
      return (
        <div className="text-center py-12">
          <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-slate-100 mb-4">
            <User className="h-8 w-8 text-slate-400" />
          </div>
          <h3 className="text-lg font-medium text-slate-900">Aucun patient trouvé</h3>
          <p className="text-slate-500 mt-1">Aucun patient ne correspond à ces critères.</p>
        </div>
      )
    }

    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {patientsList.map((patient) => (
          <Card
            key={patient._id}
            className="overflow-hidden border-l-4 hover:shadow-md transition-shadow"
            style={{
              borderLeftColor:
                patient.emergencyLevel?.toLowerCase() === "high" ||
                patient.emergencyLevel?.toLowerCase() === "urgent" ||
                patient.emergencyLevel?.toLowerCase() === "élevé"
                  ? "rgb(239, 68, 68)"
                  : patient.emergencyLevel?.toLowerCase() === "medium" ||
                      patient.emergencyLevel?.toLowerCase() === "moyen"
                    ? "rgb(245, 158, 11)"
                    : "rgb(99, 102, 241)",
            }}
          >
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center text-xl">
                <User className="h-5 w-5 mr-2 text-slate-500" />
                {patient.firstName} {patient.lastName}
                {getEmergencyLevelBadge(patient.emergencyLevel)}
              </CardTitle>
            </CardHeader>
            <CardContent className="pb-2">
              <div className="space-y-2 text-sm">
                <div className="flex items-start">
                  <Activity className="h-4 w-4 mr-2 mt-0.5 text-slate-500" />
                  <div>
                    <span className="font-medium">Symptômes:</span>
                    <p className="text-slate-600">{patient.currentSymptoms || "Non spécifiés"}</p>
                  </div>
                </div>
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-2 text-slate-500" />
                  <span className="font-medium">Status:</span>
                  <span className="ml-1 text-slate-600">{patient.status || "Non défini"}</span>
                </div>
                {!patient.medicalRecord && (
                  <div className="flex items-center text-amber-600">
                    <AlertTriangle className="h-4 w-4 mr-2" />
                    <span className="text-xs">Dossier médical non créé</span>
                  </div>
                )}
              </div>
            </CardContent>
            <CardFooter className="pt-2 flex gap-2">
              <Button
                onClick={() => handleViewMedicalRecord(patient.medicalRecord?._id || patient.medicalRecord)}
                disabled={!patient.medicalRecord}
                className="bg-[#D1DEEB] text-gray-900 hover:bg-[#b8c9db] shadow-lg rounded-lg py-3 px-6 transition-colors duration-300"                variant={patient.medicalRecord ? "default" : "outline"}
              >
                <FileText className="h-4 w-4 mr-2" />
                {patient.medicalRecord ? "Consulter le dossier" : "Dossier non disponible"}
              </Button>
            
            </CardFooter>
          </Card>
        ))}
      </div>
    )
  }
}

export default Records
</file>

<file path="src/pages/ResourcesPage.jsx">
import { Card } from "@/components/ui/card";
import { PlusCircle, Database, CheckCircle, AlertOctagon, Trash2, Edit2 } from "lucide-react";
import { Link as LinkIcon } from "lucide-react";
import { useState, useEffect } from "react";
import axios from "axios";
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  Tooltip,
  Legend,
} from "recharts";
import "../App.css";

const STATUS_COLORS = {
  available: "#00C49F",
  "in-maintenance": "#FFBB28",
};

const RESOURCE_TYPES = [
  { value: "bed", label: "Bed" },
  { value: "icu", label: "ICU" },
  { value: "ct-scan", label: "CT Scan" },
  { value: "x-ray", label: "X-Ray" },
  { value: "ventilator", label: "Ventilator" },
];

export default function ResourcesPage() {
  const [patients, setPatients] = useState([]);
  const [allocatingId, setAllocatingId] = useState(null);
  const [selectedPatient, setSelectedPatient] = useState("");
  const [resources, setResources] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [form, setForm] = useState({
    type: "",
    name: "",
    quantity: 1,
    location: "",
    status: "available",
  });
  const [editingId, setEditingId] = useState(null);
  const [deleteModal, setDeleteModal] = useState({ show: false, id: null });

  // Fetch resources and patients
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [resR, resP] = await Promise.all([
          axios.get("http://localhost:8089/api/resources", { withCredentials: true }),
          axios.get("http://localhost:8089/api/emergency-patients", { withCredentials: true }),
        ]);
        setResources(resR.data);
        setPatients(resP.data);
      } catch {
        setError("Failed to load data.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);
  const unassigned = patients.filter(
    (p) => !resources.some((r) => r.allocatedTo === p._id)
  );

  // Stats calculations
  const totalCount = resources.length;
  const statusCounts = resources.reduce((acc, r) => {
    acc[r.status] = (acc[r.status] || 0) + 1;
    return acc;
  }, {});
  const pieData = Object.entries(statusCounts).map(([status, count]) => ({ status, count }));

  // Form change handler
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: name === "quantity" ? Number(value) : value }));
  };

  // Show/hide add/edit form
  const toggleForm = () => {
    setEditingId(null);
    setForm({ type: "", name: "", quantity: 1, location: "", status: "available" });
    document.getElementById('resource-form').classList.toggle('hidden');
  };

  // Edit resource
  const handleEdit = (resource) => {
    setEditingId(resource._id);
    setForm({
      type: resource.type,
      name: resource.name,
      quantity: resource.quantity,
      location: resource.location,
      status: resource.status,
    });
    document.getElementById('resource-form').classList.remove('hidden');
  };

  // Delete confirmation
  const confirmDelete = (id) => setDeleteModal({ show: true, id });
  const cancelDelete = () => setDeleteModal({ show: false, id: null });
  const handleDelete = async () => {
    try {
      await axios.delete(`http://localhost:8089/api/resources/${deleteModal.id}`, { withCredentials: true });
      setResources((prev) => prev.filter((r) => r._id !== deleteModal.id));
    } catch {
      alert('Error deleting resource.');
    }
    cancelDelete();
  };

  // Allocate resource to patient
  const handleAllocate = (r) => {
    setAllocatingId(r._id);
    setSelectedPatient(r.allocatedTo || "");
    document.getElementById('allocate-form').classList.remove('hidden');
  };
  const cancelAllocate = () => {
    setAllocatingId(null);
    document.getElementById('allocate-form').classList.add('hidden');
  };
  const submitAllocate = async (e) => {
    e.preventDefault();
    try {
      await axios.post(
        `http://localhost:8089/api/resources/${allocatingId}/allocate`,
        { patientId: selectedPatient },
        { withCredentials: true }
      );
      const res = await axios.get("http://localhost:8089/api/resources", { withCredentials: true });
      setResources(res.data);
    } catch {
      alert("Error allocating resource");
    }
    cancelAllocate();
  };
  const recommendAllocate = async (patientId) => {
    try {
      // Call recommend endpoint
      const { data } = await axios.post(
        `http://localhost:8089/api/patients/${patientId}/recommend`,
        {},
        { withCredentials: true }
      );
      const topType = data.recommendations;
      console.log("Top recommendation:", topType);
      // Find and allocate resource
      const resource = resources.find(
        (r) => r.type === topType && r.status === "available"
      );
      if (!resource) {
        return alert(`No available resource of type ${topType}`);
      }
      await axios.post(
        `http://localhost:8089/api/resources/${resource._id}/allocate`,
        { patientId },
        { withCredentials: true }
      );
      // Refresh resources
      const res = await axios.get(
        "http://localhost:8089/api/resources",
        { withCredentials: true }
      );
      setResources(res.data);
      alert(`Allocated ${topType} to patient.`);
    } catch {
      alert("Error recommending or allocating");
    }
  };
  // Create or update resource
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingId) {
        const res = await axios.put(
          `http://localhost:8089/api/resources/${editingId}`,
          form,
          { withCredentials: true }
        );
        setResources((prev) => prev.map((r) => (r._id === editingId ? res.data : r)));
      } else {
        const res = await axios.post(
          "http://localhost:8089/api/resources",
          form,
          { withCredentials: true }
        );
        setResources((prev) => [...prev, res.data]);
      }
      document.getElementById('resource-form').classList.add('hidden');
      setEditingId(null);
      setForm({ type: "", name: "", quantity: 1, location: "", status: "available" });
    } catch {
      alert(editingId ? 'Error updating resource.' : 'Error creating resource.');
    }
  };

  if (loading) return <div>Loading resources...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="flex items-start space-x-6">
      {/* Main content */}
      <div className="w-3/4 space-y-6 relative">
        {/* Allocate Modal */}
        {allocatingId && (
          <div
            className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-10"
            id="allocate-form"
          >
            <Card className="p-6 z-20">
              <h3 className="text-lg font-semibold mb-4">Allocate to Patient</h3>
              <form onSubmit={submitAllocate} className="space-y-4">
                <select
                  value={selectedPatient}
                  onChange={(e) => setSelectedPatient(e.target.value)}
                  className="border p-2 w-full"
                  required
                >
                  <option value="" disabled>Select patient</option>
                  {patients.map((p) => (
                    <option key={p._id} value={p._id}>
                      {p.username} ({p.email})
                    </option>
                  ))}
                </select>
                <div className="flex justify-end gap-2">
                  <button
                    type="button"
                    onClick={cancelAllocate}
                    className="px-4 py-2 border rounded-lg"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-green-600 text-white rounded-lg"
                  >
                    Allocate
                  </button>
                </div>
              </form>
            </Card>
          </div>
        )}
  
        {/* Delete Modal */}
        {deleteModal.show && (
          <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-10">
            <Card className="p-6 z-20">
              <h3 className="text-lg font-semibold mb-4">Confirm Deletion</h3>
              <p className="mb-4">Are you sure you want to delete this resource?</p>
              <div className="flex justify-end gap-2">
                <button
                  onClick={cancelDelete}
                  className="px-4 py-2 border rounded-lg"
                >
                  Cancel
                </button>
                <button
                  onClick={handleDelete}
                  className="px-4 py-2 bg-red-600 text-white rounded-lg"
                >
                  Delete
                </button>
              </div>
            </Card>
          </div>
        )}
  
        {/* Header */}
        <div className="flex items-center justify-between">
        <h1 className="text-3xl font-extrabold tracking-tight mb-2" style={{ color: '#42A5FF' }}>Resources Management</h1>
        <button
  onClick={toggleForm}
  className="flex items-center gap-2 px-4 py-2  rounded-lg"
  style={{ backgroundColor: '#D1DEEB' }}
>
  <PlusCircle className="w-6 h-6" />
  {editingId ? 'Edit Resource' : 'Add Resource'}
</button>
        </div>
  
        {/* Add/Edit Form */}
        <Card className="p-6 hidden" id="resource-form">
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <select
                name="type"
                value={form.type}
                onChange={handleChange}
                className="border p-2"
                required
              >
                <option value="" disabled>Select resource type</option>
                {RESOURCE_TYPES.map(rt => (
                  <option key={rt.value} value={rt.value}>{rt.label}</option>
                ))}
              </select>
              <input
                name="name"
                placeholder="Name (e.g., ICU Bed 1)"
                value={form.name}
                onChange={handleChange}
                className="border p-2"
                required
              />
            </div>
            <div className="grid grid-cols-3 gap-4">
              <input type="number" name="quantity" min={1} placeholder="Quantity" value={form.quantity} onChange={handleChange} className="border p-2" required />
              <input name="location" placeholder="Location" value={form.location} onChange={handleChange} className="border p-2" required />
              <select name="status" value={form.status} onChange={handleChange} className="border p-2">
                <option value="available">Available</option>
                <option value="in-maintenance">In Maintenance</option>
              </select>
            </div>
            <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded-lg">
              {editingId ? 'Update Resource' : 'Create Resource'}
            </button>
          </form>
        </Card>
  
        {/* Stats */}
        <div className="grid gap-6 md:grid-cols-3">
          <Card className="p-6">
            <div className="flex items-center gap-4">
              <Database className="w-8 h-8 text-blue-600" />
              <div>
                <p className="text-sm text-muted-foreground">Total Resources</p>
                <h3 className="text-2xl font-bold text-blue-900">{totalCount}</h3>
              </div>
            </div>
          </Card>
          <Card className="p-6">
            <div className="flex items-center gap-4">
              <CheckCircle className="w-8 h-8 text-green-600" />
              <div>
                <p className="text-sm text-muted-foreground">Available</p>
                <h3 className="text-2xl font-bold text-blue-900">{statusCounts.available}</h3>
              </div>
            </div>
          </Card>
          <Card className="p-6">
            <div className="flex items-center gap-4">
              <AlertOctagon className="w-8 h-8 text-yellow-500" />
              <div>
                <p className="text-sm text-muted-foreground">In Maintenance</p>
                <h3 className="text-2xl font-bold text-blue-900">{statusCounts['in-maintenance']}</h3>
              </div>
            </div>
          </Card>
        </div>
  
        {/* Pie Chart */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-4 text-blue-900">Resource Status Distribution</h2>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={pieData}
                dataKey="count"
                nameKey="status"
                cx="50%"
                cy="50%"
                outerRadius={100}
                label
              >
                {pieData.map((entry, idx) => (
                  <Cell key={idx} fill={STATUS_COLORS[entry.status]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </Card>
  
        {/* Resource Table */}
        <Card className="p-6">
          <table className="w-full table-auto">
            <thead>
              <tr>
                <th className="px-4 py-2">Type</th>
                <th className="px-4 py-2">Name</th>
                <th className="px-4 py-2">Quantity</th>
                <th className="px-4 py-2">Location</th>
                <th className="px-4 py-2">Status</th>
                <th className="px-4 py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {resources.map((r) => (
                <tr key={r._id} className="border-t">
                  <td className="px-4 py-2">{r.type}</td>
                  <td className="px-4 py-2">{r.name}</td>
                  <td className="px-4 py-2">{r.quantity}</td>
                  <td className="px-4 py-2">{r.location}</td>
                  <td className="px-4 py-2 capitalize">{r.status}</td>
                  <td className="px-4 py-2 space-x-2">
                    <button onClick={() => handleEdit(r)} className="p-2 hover:bg-gray-100 rounded">
                      <Edit2 className="w-5 h-5 text-blue-600" />
                    </button>
                    <button onClick={() => confirmDelete(r._id)} className="p-2 hover:bg-gray-100 rounded">
                      <Trash2 className="w-5 h-5 text-red-600" />
                    </button>
                    <button onClick={() => handleAllocate(r)} className="p-2 hover:bg-gray-100 rounded">
                      <LinkIcon className="w-5 h-5 text-purple-600" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </Card>
      </div>
  
      {/* Sidebar: Unassigned Patients (right side) */}
      <div className="w-1/4 space-y-4">
        <h2 className="text-xl font-semibold">Unassigned Patients</h2>
        {unassigned.map((p) => (
          <Card key={p._id} className="p-4">
            <div className="flex flex-col space-y-3">
              <div className="overflow-hidden">
                <p className="font-medium truncate">{p.username}</p>
                <p className="text-sm text-gray-600 truncate">{p.email}</p>
              </div>
              <button
                onClick={() => recommendAllocate(p._id)}
                className="flex items-center gap-2 px-4 py-2  rounded-lg"
                style={{ backgroundColor: '#D1DEEB' }}              >
                Recommend & Allocate
              </button>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
  
}
</file>

<file path="src/pages/Settings.jsx">
const Settings = () => {
    return (
        <div className="space-y-6">
            <h1 className="text-3xl font-bold">Settings</h1>
            {/* Settings content will go here */}
        </div>
    );
};

export default Settings;
</file>

<file path="src/pages/SharedRecordsTab.jsx">
"use client"
import { useState, useEffect } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { useNavigate } from "react-router-dom"
import {
  FileText,
  User,
  AlertCircle,
  ChevronDown,
  ChevronRight,
  Activity,
  Heart,
  Pill,
  Stethoscope,
  Clipboard,
  AlertTriangle,
  Thermometer,
  BarChart,
  Eye,
} from "lucide-react"

import { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Skeleton } from "@/components/ui/skeleton"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import { Separator } from "@/components/ui/separator"

const SharedRecordsTab = () => {
  const [sharedRecords, setSharedRecords] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const [expandedRecord, setExpandedRecord] = useState(null)
  const [selectedFile, setSelectedFile] = useState(null)
  const navigate = useNavigate()

  useEffect(() => {
    const fetchSharedRecords = async () => {
      try {
        const token = Cookies.get("token")
        const response = await axios.get("http://localhost:8089/api/users/medical-records/shared-with-me", {
          headers: { Authorization: `Bearer ${token}` },
        })
        console.log("Shared records:", response.data)
        setSharedRecords(response.data)
      } catch (err) {
        console.error("Erreur lors de la récupération des dossiers partagés:", err)
        setError("Erreur lors du chargement des dossiers partagés")
      } finally {
        setLoading(false)
      }
    }

    fetchSharedRecords()
  }, [])

  

  const getFileIcon = (fileType) => {
    switch (fileType) {
      case "Prescription":
        return <Pill className="h-5 w-5 text-emerald-500" />
      case "Diagnostic":
        return <Stethoscope className="h-5 w-5 text-violet-500" />
      case "Treatment":
        return <Activity className="h-5 w-5 text-amber-500" />
      case "VitalSigns":
        return <Heart className="h-5 w-5 text-rose-500" />
      case "Triage":
        return <AlertTriangle className="h-5 w-5 text-orange-500" />
      case "Discharge":
        return <Clipboard className="h-5 w-5 text-sky-500" />
      case "PatientInformation":
        return <User className="h-5 w-5 text-slate-500" />
      default:
        return <FileText className="h-5 w-5 text-slate-500" />
    }
  }

  const getFileTypeColor = (fileType) => {
    switch (fileType) {
      case "Prescription":
        return "bg-emerald-100 text-emerald-800 border-emerald-200"
      case "Diagnostic":
        return "bg-violet-100 text-violet-800 border-violet-200"
      case "Treatment":
        return "bg-amber-100 text-amber-800 border-amber-200"
      case "VitalSigns":
        return "bg-rose-100 text-rose-800 border-rose-200"
      case "Triage":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "Discharge":
        return "bg-sky-100 text-sky-800 border-sky-200"
      case "PatientInformation":
        return "bg-slate-100 text-slate-800 border-slate-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const renderFileDetails = (file) => {
    if (!file) return null

    switch (file.type) {
      case "VitalSigns":
        return (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Heart className="h-5 w-5 text-rose-500" />
              <h3 className="font-medium text-lg">Signes vitaux</h3>
            </div>
            <div className="grid grid-cols-2 gap-3">
              <Card className="bg-rose-50 border-rose-100">
                <CardContent className="p-3 flex flex-col items-center justify-center">
                  <Thermometer className="h-5 w-5 text-rose-500 mb-1" />
                  <div className="text-sm text-slate-500">Température</div>
                  <div className="text-xl font-semibold">{file.details.vitalSigns?.temperature}°C</div>
                </CardContent>
              </Card>
              <Card className="bg-rose-50 border-rose-100">
                <CardContent className="p-3 flex flex-col items-center justify-center">
                  <Activity className="h-5 w-5 text-rose-500 mb-1" />
                  <div className="text-sm text-slate-500">Pression artérielle</div>
                  <div className="text-xl font-semibold">
                    {file.details.vitalSigns?.bloodPressure?.systolic}/
                    {file.details.vitalSigns?.bloodPressure?.diastolic}
                  </div>
                </CardContent>
              </Card>
              <Card className="bg-rose-50 border-rose-100">
                <CardContent className="p-3 flex flex-col items-center justify-center">
                  <Heart className="h-5 w-5 text-rose-500 mb-1" />
                  <div className="text-sm text-slate-500">Rythme cardiaque</div>
                  <div className="text-xl font-semibold">{file.details.vitalSigns?.heartRate} bpm</div>
                </CardContent>
              </Card>
              <Card className="bg-rose-50 border-rose-100">
                <CardContent className="p-3 flex flex-col items-center justify-center">
                  <BarChart className="h-5 w-5 text-rose-500 mb-1" />
                  <div className="text-sm text-slate-500">Saturation O₂</div>
                  <div className="text-xl font-semibold">{file.details.vitalSigns?.oxygenSaturation}%</div>
                </CardContent>
              </Card>
            </div>
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-slate-700">Notes</h4>
                <p className="text-slate-600 mt-1">{file.notes}</p>
              </div>
            )}
          </div>
        )

      case "Treatment":
        return (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Activity className="h-5 w-5 text-amber-500" />
              <h3 className="font-medium text-lg">Plan de traitement</h3>
            </div>
            {file.details.procedures?.length > 0 ? (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-slate-700">Procédures médicales</h4>
                <div className="grid gap-3">
                  {file.details.procedures.map((proc, idx) => (
                    <Card key={idx} className="bg-amber-50 border-amber-100">
                      <CardContent className="p-3">
                        <div className="flex justify-between items-start">
                          <div>
                            <div className="font-medium">{proc.name}</div>
                            <div className="text-sm text-slate-500">{new Date(proc.date).toLocaleDateString()}</div>
                          </div>
                        </div>
                        {proc.notes && <p className="text-sm mt-2 text-slate-600">{proc.notes}</p>}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            ) : (
              <p className="text-sm text-slate-500 italic">Aucune procédure enregistrée</p>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-slate-700">Notes</h4>
                <p className="text-slate-600 mt-1">{file.notes}</p>
              </div>
            )}
          </div>
        )

      case "Diagnostic":
        return (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Stethoscope className="h-5 w-5 text-violet-500" />
              <h3 className="font-medium text-lg">Diagnostic</h3>
            </div>
            <div className="space-y-2">
              <h4 className="font-medium text-sm text-slate-700">Diagnostic principal</h4>
              <Card className="bg-violet-50 border-violet-100">
                <CardContent className="p-3">
                  <p>{file.details.diagnosis}</p>
                </CardContent>
              </Card>
            </div>
            {file.details.tests?.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-slate-700">Tests diagnostiques</h4>
                <div className="grid gap-2">
                  {file.details.tests.map((test, idx) => (
                    <div key={idx} className="flex justify-between items-center p-2 border rounded-md bg-white">
                      <div>
                        <span className="font-medium">{test.testName}</span>
                        <div className="text-sm text-slate-500">{new Date(test.date).toLocaleDateString()}</div>
                      </div>
                      <Badge variant={test.result.toLowerCase().includes("normal") ? "outline" : "secondary"}>
                        {test.result}
                      </Badge>
                    </div>
                  ))}
                </div>
              </div>
            )}
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-slate-700">Notes</h4>
                <p className="text-slate-600 mt-1">{file.notes}</p>
              </div>
            )}
          </div>
        )

      case "PatientInformation":
        return (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <User className="h-5 w-5 text-slate-500" />
              <h3 className="font-medium text-lg">Informations patient</h3>
            </div>
            <div className="grid gap-3">
              <Card className="bg-slate-50 border-slate-100">
                <CardContent className="p-3">
                  <div className="font-medium text-sm text-slate-700">Date d'enregistrement</div>
                  <p className="mt-1">{new Date(file.dateRecorded).toLocaleDateString()}</p>
                </CardContent>
              </Card>
            </div>
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-slate-700">Notes</h4>
                <p className="text-slate-600 mt-1">{file.notes}</p>
              </div>
            )}
          </div>
        )

      default:
        return (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <FileText className="h-5 w-5 text-slate-500" />
              <h3 className="font-medium text-lg">Document</h3>
            </div>
            <Card>
              <CardContent className="p-3">
                <div className="font-medium text-sm text-slate-700">Type</div>
                <p className="mt-1">{file.type}</p>
              </CardContent>
            </Card>
            {file.notes && (
              <div className="mt-4 text-sm">
                <h4 className="font-medium text-slate-700">Notes</h4>
                <p className="text-slate-600 mt-1">{file.notes}</p>
              </div>
            )}
          </div>
        )
    }
  }

  if (loading) {
    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {[1, 2, 3].map((i) => (
          <Card key={i} className="overflow-hidden">
            <CardHeader className="pb-2">
              <Skeleton className="h-6 w-[180px]" />
            </CardHeader>
            <CardContent className="pb-2">
              <div className="space-y-2">
                <Skeleton className="h-4 w-[150px]" />
                <Skeleton className="h-4 w-[200px]" />
                <Skeleton className="h-4 w-[170px]" />
              </div>
            </CardContent>
            <CardFooter>
              <Skeleton className="h-10 w-full" />
            </CardFooter>
          </Card>
        ))}
      </div>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }

  if (sharedRecords.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-slate-100 mb-4">
          <FileText className="h-8 w-8 text-slate-400" />
        </div>
        <h3 className="text-lg font-medium text-slate-900">Aucun dossier partagé</h3>
        <p className="text-slate-500 mt-1">Aucun médecin n'a partagé de dossier médical avec vous pour le moment.</p>
      </div>
    )
  }

  // If a file is selected, show detailed view
  if (selectedFile) {
    return (
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <Button variant="ghost" onClick={() => setSelectedFile(null)} className="flex items-center">
            <ChevronRight className="h-4 w-4 mr-1 rotate-180" />
            Retour aux dossiers partagés
          </Button>
        </div>

        <Card>
          <CardHeader className="pb-2">
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="flex items-center text-xl">
                  {getFileIcon(selectedFile.type)}
                  <span className="ml-2">{selectedFile.type}</span>
                </CardTitle>
                <CardDescription>
                  Créé le {new Date(selectedFile.dateRecorded || selectedFile.createdAt).toLocaleDateString()}
                </CardDescription>
              </div>
              <Badge className={getFileTypeColor(selectedFile.type)}>{selectedFile.type}</Badge>
            </div>
          </CardHeader>
          <Separator />
          <CardContent className="pt-6">{renderFileDetails(selectedFile)}</CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {sharedRecords.map((record, index) => (
        <Collapsible
          key={index}
          open={expandedRecord === index}
          onOpenChange={() => setExpandedRecord(expandedRecord === index ? null : index)}
          className="border rounded-lg overflow-hidden bg-white"
        >
          <div className="p-4 border-b">
            <CollapsibleTrigger className="flex justify-between items-center w-full">
              <div className="flex items-center">
                <FileText className="h-5 w-5 mr-2 text-blue-500" />
                <div>
                  <h3 className="font-medium text-lg">
                    Dossier médical {record.medicalRecord?.patient?.firstName} {record.medicalRecord?.patient?.lastName}
                  </h3>
                  <p className="text-sm text-slate-500">
                    Partagé par {record.sharer?.username} le {new Date(record.sharedAt).toLocaleDateString()}
                  </p>
                </div>
              </div>
              <div className="flex items-center">
                <Badge variant="outline" className="mr-2">
                  {record.medicalRecord?.files?.length || 0} documents
                </Badge>
                <ChevronDown
                  className={`h-5 w-5 transition-transform ${expandedRecord === index ? "transform rotate-180" : ""}`}
                />
              </div>
            </CollapsibleTrigger>
          </div>

          <CollapsibleContent>
            <div className="p-4 bg-slate-50">
              {record.note && (
                <div className="mb-4 p-3 bg-blue-50 border border-blue-100 rounded-md">
                  <p className="text-sm text-slate-700 italic">"{record.note}"</p>
                </div>
              )}

              <h4 className="font-medium mb-3">Documents médicaux</h4>

              <div className="grid gap-3">
                {record.medicalRecord?.files?.map((file) => (
                  <Card key={file.id} className="overflow-hidden hover:shadow-md transition-shadow">
                    <CardContent className="p-4">
                      <div className="flex justify-between items-start">
                        <div className="flex items-start">
                          {getFileIcon(file.type)}
                          <div className="ml-3">
                            <div className="font-medium">{file.type}</div>
                            <div className="text-xs text-slate-500">
                              {new Date(file.dateRecorded).toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="flex items-center"
                          onClick={() => setSelectedFile(file)}
                        >
                          <Eye className="h-4 w-4 mr-1" />
                          Détails
                        </Button>
                      </div>

                      {/* Preview based on file type */}
                      <div className="mt-3">
                        {file.type === "VitalSigns" && (
                          <div className="grid grid-cols-4 gap-2 text-xs">
                            <div className="bg-rose-50 p-2 rounded-md text-center">
                              <div className="font-medium text-slate-700">Temp.</div>
                              <div className="text-rose-600">{file.details.vitalSigns?.temperature}°C</div>
                            </div>
                            <div className="bg-rose-50 p-2 rounded-md text-center">
                              <div className="font-medium text-slate-700">Tension</div>
                              <div className="text-rose-600">
                                {file.details.vitalSigns?.bloodPressure?.systolic}/
                                {file.details.vitalSigns?.bloodPressure?.diastolic}
                              </div>
                            </div>
                            <div className="bg-rose-50 p-2 rounded-md text-center">
                              <div className="font-medium text-slate-700">Pouls</div>
                              <div className="text-rose-600">{file.details.vitalSigns?.heartRate} bpm</div>
                            </div>
                            <div className="bg-rose-50 p-2 rounded-md text-center">
                              <div className="font-medium text-slate-700">O₂</div>
                              <div className="text-rose-600">{file.details.vitalSigns?.oxygenSaturation}%</div>
                            </div>
                          </div>
                        )}

                        {file.type === "Diagnostic" && (
                          <div className="bg-violet-50 p-2 rounded-md">
                            <div className="font-medium text-xs text-slate-700">Diagnostic:</div>
                            <div className="text-sm">{file.details.diagnosis}</div>
                          </div>
                        )}

                        {file.type === "Treatment" && (
                          <div className="bg-amber-50 p-2 rounded-md">
                            <div className="font-medium text-xs text-slate-700">Procédures:</div>
                            <div className="text-sm">
                              {file.details.procedures?.map((proc, i) => (
                                <div key={i} className="flex items-center">
                                  <span className="text-amber-600 mr-1">•</span> {proc.name}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}

                        {file.notes && (
                          <div className="mt-2 text-xs text-slate-500 italic truncate">Note: {file.notes}</div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

           
          </CollapsibleContent>
        </Collapsible>
      ))}
    </div>
  )
}

export default SharedRecordsTab
</file>

<file path="src/pages/ShareMedicalRecordButton.jsx">
"use client"
import { useState, useEffect } from "react"
import axios from "axios"
import Cookies from "js-cookie"
import { Share2, AlertCircle, Check } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Alert, AlertDescription } from "@/components/ui/alert"

const ShareMedicalRecordButton = ({ medicalRecordId, disabled = false }) => {
  const [isOpen, setIsOpen] = useState(false)
  const [doctors, setDoctors] = useState([])
  const [selectedDoctor, setSelectedDoctor] = useState("")
  const [note, setNote] = useState("")
  const [loading, setLoading] = useState(false)
  const [fetchingDoctors, setFetchingDoctors] = useState(false)
  const [error, setError] = useState("")
  const [success, setSuccess] = useState(false)

  useEffect(() => {
    if (isOpen) {
      fetchDoctors()
    }
  }, [isOpen])

  const fetchDoctors = async () => {
    try {
      setFetchingDoctors(true)
      setError("")
      const token = Cookies.get("token")
      const response = await axios.get("http://localhost:8089/api/users/doctor/doctors", {
        headers: { Authorization: `Bearer ${token}` },
      })
      setDoctors(response.data)
    } catch (err) {
      console.error("Erreur lors de la récupération des médecins:", err)
      setError("Impossible de récupérer la liste des médecins")
    } finally {
      setFetchingDoctors(false)
    }
  }

  const handleShare = async () => {
    if (!selectedDoctor) {
      setError("Veuillez sélectionner un médecin")
      return
    }

    try {
      setLoading(true)
      setError("")
      const token = Cookies.get("token")
      await axios.post(
        `http://localhost:8089/api/users/medical-records/${medicalRecordId}/share`,
        {
          recipientId: selectedDoctor,
          note: note.trim() || "Partage de dossier médical",
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        },
      )
      setSuccess(true)
      setTimeout(() => {
        handleClose()
      }, 2000)
    } catch (err) {
      console.error("Erreur lors du partage du dossier:", err)
      setError(err.response?.data?.message || "Erreur lors du partage du dossier médical")
    } finally {
      setLoading(false)
    }
  }

  const handleClose = () => {
    setIsOpen(false)
    setSelectedDoctor("")
    setNote("")
    setError("")
    setSuccess(false)
  }

  return (
    <>
      <Button
        variant="outline"
        size="sm"
        onClick={() => setIsOpen(true)}
        disabled={disabled}
        className="bg-[#D1DEEB] text-gray-900 hover:bg-[#b8c9db] shadow-lg rounded-lg py-3 px-6 transition-colors duration-300" 
      >
        <Share2 className="h-4 w-4 mr-2" />
        Partager
      </Button>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Partager le dossier médical</DialogTitle>
            <DialogDescription>Sélectionnez un médecin avec qui partager ce dossier médical</DialogDescription>
          </DialogHeader>

          {success ? (
            <div className="flex flex-col items-center justify-center py-4">
              <div className="rounded-full bg-green-100 p-3 mb-3">
                <Check className="h-6 w-6 text-green-600" />
              </div>
              <p className="text-center font-medium text-green-600">Dossier partagé avec succès!</p>
            </div>
          ) : (
            <>
              {error && (
                <Alert variant="destructive" className="mb-4">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <div className="grid gap-4 py-4">
                <div className="grid gap-2">
                  <label htmlFor="doctor" className="text-sm font-medium">
                    Médecin
                  </label>
                  <Select onValueChange={setSelectedDoctor} value={selectedDoctor}>
                    <SelectTrigger id="doctor" disabled={fetchingDoctors}>
                      <SelectValue placeholder={fetchingDoctors ? "Chargement..." : "Sélectionner un médecin"} />
                    </SelectTrigger>
                    <SelectContent>
                      {doctors.map((doctor) => (
                        <SelectItem key={doctor._id} value={doctor._id}>
                          {doctor.username}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="grid gap-2">
                  <label htmlFor="note" className="text-sm font-medium">
                    Note (optionnel)
                  </label>
                  <Textarea
                    id="note"
                    placeholder="Ajouter une note pour le médecin destinataire"
                    value={note}
                    onChange={(e) => setNote(e.target.value)}
                    rows={3}
                  />
                </div>
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={handleClose}>
                  Annuler
                </Button>
                <Button onClick={handleShare} disabled={loading || !selectedDoctor} className="bg-[#D1DEEB] text-gray-900 hover:bg-[#b8c9db] shadow-lg rounded-lg py-3 px-6 transition-colors duration-300" >
                  {loading ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Partage en cours...
                    </>
                  ) : (
                    "Partager"
                  )}
                </Button>
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>
    </>
  )
}

export default ShareMedicalRecordButton
</file>

<file path="src/pages/Staff.jsx">
// src/pages/Staff.jsx
import { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Plus, Search, UserCircle, BadgeCheck, Mail, Phone, ToggleLeft, ToggleRight, Filter } from "lucide-react"; // Ajout Filter si manquant
import StaffOverview from "@/components/staff/StaffOverview";
import ResourceManagement from "@/components/staff/ResourceManagement";
import axios from "axios";
import { toast } from "sonner"; // Pour les notifications

// --- Composant StaffDirectory (déplacé à l'intérieur ou importé) ---
const StaffDirectory = ({ staffMembers, searchQuery, onSearchChange, onDoctorAvailabilityChange }) => {
    // Fonction pour la couleur du statut (peut être déplacée hors du composant si utilisée ailleurs)
    const getAvailabilityStyle = (isAvailable) => {
        return isAvailable
            ? { text: "Available", color: "text-green-600", Icon: ToggleRight }
            : { text: "Occupied", color: "text-red-600", Icon: ToggleLeft };
    };

    const filteredStaff = staffMembers.filter(staff =>
        staff.username.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (staff.specialization && staff.specialization.toLowerCase().includes(searchQuery.toLowerCase()))
    );

    return (
        <Card className="glass-card col-span-2">
            <CardHeader>
                <div className="flex items-center justify-between">
                    <CardTitle>Staff Directory</CardTitle>
                    <div className="relative">
                        <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                        <Input
                            placeholder="Search staff..."
                            value={searchQuery}
                            onChange={(e) => onSearchChange(e.target.value)}
                            className="pl-8 w-[300px]"
                        />
                    </div>
                </div>
            </CardHeader>
            <CardContent>
                {filteredStaff.length === 0 ? (
                    <p className="text-center text-muted-foreground">No staff found matching your search.</p>
                ) : (
                    <div className="space-y-4">
                        {filteredStaff.map((staff) => {
                            const availability = staff.role === "Doctor" ? getAvailabilityStyle(staff.isAvailable) : null;

                            return (
                                <div
                                    key={staff._id}
                                    className="flex items-center justify-between p-4 border rounded-lg bg-white/50 hover:shadow-md transition-shadow"
                                >
                                    <div className="flex items-center gap-4">
                                        {/* Remplacer UserCircle par l'image si disponible */}
                                        {staff.profileImage ? (
                                            <img src={`http://localhost:8089${staff.profileImage}`} alt={staff.username} className="h-10 w-10 rounded-full object-cover" />
                                        ) : (
                                            <UserCircle className="h-10 w-10 text-primary" />
                                        )}
                                        <div>
                                            <div className="flex items-center gap-2">
                                                <h3 className="font-semibold">{staff.username}</h3>
                                                {staff.isValidated && <BadgeCheck className="h-4 w-4 text-blue-500" title="Validated" />}
                                            </div>
                                            <p className="text-sm text-muted-foreground">
                                                {staff.role} {staff.specialization ? `- ${staff.specialization}` : ''}
                                            </p>
                                            <div className="flex items-center gap-4 text-xs text-muted-foreground mt-1">
                                                <span className="flex items-center gap-1">
                                                    <Mail className="h-3 w-3" />
                                                    {staff.email}
                                                </span>
                                                <span className="flex items-center gap-1">
                                                    <Phone className="h-3 w-3" />
                                                    {staff.phoneNumber}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    {/* Section Disponibilité pour les Médecins */}
                                    {staff.role === "Doctor" && availability && (
                                        <div className="flex items-center gap-2 cursor-pointer" onClick={() => onDoctorAvailabilityChange(staff._id, !staff.isAvailable)} title="Click to toggle availability">
                                            <availability.Icon className={`w-6 h-6 ${availability.color}`} />
                                            <span className={`text-sm font-medium ${availability.color}`}>
                                                {availability.text}
                                            </span>
                                        </div>
                                    )}
                                    {/* Afficher autre chose pour les non-médecins si besoin */}
                                    {staff.role !== "Doctor" && (
                                        <span className="text-sm text-gray-400 italic">N/A</span> // Ou rien du tout
                                    )}
                                </div>
                            );
                        })}
                    </div>
                )}
            </CardContent>
        </Card>
    );
};
// --- Fin Composant StaffDirectory ---


const Staff = () => {
    const [searchQuery, setSearchQuery] = useState("");
    const [resourcesSearchQuery, setResourcesSearchQuery] = useState(""); // Doit être une string, pas un array
    const [staffMembers, setStaffMembers] = useState([]);
    const [loadingStaff, setLoadingStaff] = useState(true);
    const [staffError, setStaffError] = useState(null);

    // --- Données statiques pour ResourceManagement (peuvent être dynamiques plus tard) ---
    const resources = [
        // ... (vos données de ressources)
          {
            id: "1",
            name: "ICU Beds",
            total: 20,
            available: 8,
            type: "bed",
            location: "ICU Wing",
            status: "operational"
        },
           {
            id: "2",
            name: "Operating Rooms",
            total: 5,
            available: 2,
            type: "room",
            location: "Surgery Wing",
            status: "operational"
        },
           {
            id: "3",
            name: "Ventilators",
            total: 15,
            available: 6,
            type: "machine",
            status: "operational"
        },
           {
            id: "4",
            name: "ECG Machines",
            total: 10,
            available: 4,
            type: "equipment",
            status: "operational"
        }
    ];
    // --- Fin Données statiques ---

    // --- Fonction pour récupérer le staff ---
    const fetchStaff = async () => {
        setLoadingStaff(true);
        setStaffError(null);
        try {
            // Note: Pas besoin de token si on utilise les cookies correctement configurés avec 'withCredentials: true'
            const response = await axios.get('http://localhost:8089/api/users/doctors', { withCredentials: true });
             console.log("Staff data fetched:", response.data); // Log pour vérifier les données
            // Assurez-vous que chaque docteur a une propriété isAvailable (même si undefined au début)
            const staffWithAvailability = response.data.map(staff => ({
                ...staff,
                isAvailable: staff.isAvailable === undefined ? true : staff.isAvailable // Default to true if undefined
            }));
            setStaffMembers(staffWithAvailability);
        } catch (error) {
            console.error("Error fetching staff:", error);
            setStaffError("Failed to load staff data.");
             if (error.response) {
                 console.error("Server responded with status code:", error.response.status);
                 console.error("Response data:", error.response.data);
             } else if (error.request) {
                 console.error("No response received from server:", error.request);
             } else {
                 console.error("Error setting up the request:", error.message);
             }
        } finally {
            setLoadingStaff(false);
        }
    };

    useEffect(() => {
        fetchStaff();
    }, []); // Charger au montage du composant

    // --- Fonction pour modifier la disponibilité du docteur ---
    const handleDoctorAvailabilityChange = async (doctorId, newAvailability) => {
        // Optimistic UI Update: Change l'état local immédiatement
        const originalStaffMembers = [...staffMembers]; // Copie pour rollback
         setStaffMembers(prevStaff => prevStaff.map(staff =>
            staff._id === doctorId ? { ...staff, isAvailable: newAvailability } : staff
        ));

        try {
            // Appel API pour mettre à jour le backend
            const response = await axios.put(`http://localhost:8089/api/users/${doctorId}/availability`,
             { isAvailable: newAvailability },
             { withCredentials: true } // Important pour envoyer les cookies d'authentification
             );

            // Si succès, afficher une notification
            toast.success(response.data.message || `Doctor availability updated successfully.`);
             // Pas besoin de re-fetch, l'état local est déjà à jour.
             // fetchStaff(); // Optionnel: re-fetch pour être sûr à 100%

        } catch (error) {
            console.error("Error updating doctor availability:", error);
             toast.error(`Failed to update availability: ${error.response?.data?.message || error.message}`);
            // Rollback l'état local en cas d'erreur
            setStaffMembers(originalStaffMembers);
        }
    };
    // --- Fin Fonction ---

    return (
        <div className="space-y-6 p-6"> {/* Ajout de padding */}
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Staff Management</h1>
                {/* Sheet pour ajouter un membre (gardé tel quel) */}
                <Sheet>
                     <SheetTrigger asChild>
                         <Button className="gap-2">
                             <Plus className="h-4 w-4" />
                             Add Staff Member
                         </Button>
                     </SheetTrigger>
                     <SheetContent>
                         <SheetHeader>
                             <SheetTitle>Add New Staff Member</SheetTitle>
                         </SheetHeader>
                         <div className="space-y-4 mt-6">
                             <Input placeholder="Full Name" />
                             <Input placeholder="Role" />
                             <Input placeholder="Department" />
                             <Input placeholder="Email" type="email" />
                             <Input placeholder="Phone" type="tel" />
                             <Button className="w-full">Add Staff Member</Button>
                         </div>
                     </SheetContent>
                 </Sheet>
            </div>

            <StaffOverview /> {/* Composant pour les stats générales */}

            <div className="grid gap-6 md:grid-cols-2">
                {/* Composant pour la gestion des ressources */}
                <ResourceManagement
                    resources={resources}
                    searchQuery={resourcesSearchQuery}
                    onSearchChange={setResourcesSearchQuery} // Attention: Doit être une string
                />

                {/* Composant pour l'annuaire du personnel */}
                 {loadingStaff && <p>Loading staff...</p>}
                 {staffError && <p className="text-red-500">{staffError}</p>}
                 {!loadingStaff && !staffError && (
                     <StaffDirectory
                         staffMembers={staffMembers}
                         searchQuery={searchQuery}
                         onSearchChange={setSearchQuery}
                         onDoctorAvailabilityChange={handleDoctorAvailabilityChange} // Passer la fonction ici
                    />
                 )}
            </div>
        </div>
    );
};

export default Staff;
</file>

<file path="src/reportWebVitals.js">
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="src/setupTests.js">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
	darkMode: ["class"],
	content: [
	  "./pages/**/*.{ts,tsx,js,jsx}",
	  "./components/**/*.{ts,tsx,js,jsx}",
	  "./app/**/*.{ts,tsx,js,jsx}",
	  "./src/**/*.{ts,tsx,js,jsx}",
	],
	prefix: "",
	theme: {
	  container: {
		center: true,
		padding: '2rem',
		screens: {
		  '2xl': '1400px'
		}
	  },
	  extend: {
		colors: {
		  border: "hsl(var(--border))",
		  input: "hsl(var(--input))",
		  ring: "hsl(var(--ring))",
		  background: "hsl(var(--background))",
		  foreground: "hsl(var(--foreground))",
		  customindigo: '#C4DBFF',
		  primary: {
			DEFAULT: '#42A5FF',
			500: '#42A5FF',
			600: '#1E88E5',
		  },
		  secondary: {
			DEFAULT: "hsl(var(--secondary))",
			foreground: "hsl(var(--secondary-foreground))",
		  },
		  destructive: {
			DEFAULT: "hsl(var(--destructive))",
			foreground: "hsl(var(--destructive-foreground))",
		  },
		  muted: {
			DEFAULT: "hsl(var(--muted))",
			foreground: "hsl(var(--muted-foreground))",
		  },
		  accent: {
			DEFAULT: "hsl(var(--accent))",
			foreground: "hsl(var(--accent-foreground))",
		  },
		  popover: {
			DEFAULT: "hsl(var(--popover))",
			foreground: "hsl(var(--popover-foreground))",
		  },
		  card: {
			DEFAULT: "hsl(var(--card))",
			foreground: "hsl(var(--card-foreground))",
		  },
		  teal: {
			400: "#6DDCCF",
			500: "#5DCFC2",
			600: "#4EC2B5",
		  },
		  sidebar: {
			DEFAULT: 'hsl(var(--sidebar-background))',
			foreground: 'hsl(var(--sidebar-foreground))',
			primary: 'hsl(var(--sidebar-primary))',
			'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
			accent: 'hsl(var(--sidebar-accent))',
			'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
			border: 'hsl(var(--sidebar-border))',
			ring: 'hsl(var(--sidebar-ring))'
		  },
		  profileBlue: {
			50: '#EBF8FF',
			100: '#D1EBFF',
			200: '#A3D8FF',
			300: '#66B8FF',
			400: '#3097FD',
			500: '#0077ED',
			600: '#0062D6',
			700: '#004FB0',
			800: '#00398A',
			900: '#002A66'
		  },
		  profileTeal: {
			50: '#EFFCFC',
			100: '#D0F7F7',
			200: '#A0EEEE',
			300: '#6DE0E0',
			400: '#39CDCE',
			500: '#2BB8B9',
			600: '#1F9596',
			700: '#167273',
			800: '#0F5152',
			900: '#083333'
		  }
		},
		borderRadius: {
		  lg: "var(--radius)",
		  md: "calc(var(--radius) - 2px)",
		  sm: "calc(var(--radius) - 4px)",
		},
		keyframes: {
		  'accordion-down': {
			from: { height: '0' },
			to: { height: 'var(--radix-accordion-content-height)' }
		  },
		  'accordion-up': {
			from: { height: 'var(--radix-accordion-content-height)' },
			to: { height: '0' }
		  },
		  fadeIn: {
			'0%': { opacity: '0' },
			'100%': { opacity: '1' }
		  },
		  slideUpFade: {
			'0%': { transform: 'translateY(20px)', opacity: '0' },
			'100%': { transform: 'translateY(0)', opacity: '1' }
		  },
		  shimmer: {
			'0%': { backgroundPosition: '-500px 0' },
			'100%': { backgroundPosition: '500px 0' }
		  },
		  pulse: {
			'0%, 100%': { opacity: '0.5' },
			'50%': { opacity: '0.8' }
		  }
		},
		animation: {
		  'accordion-down': 'accordion-down 0.2s ease-out',
		  'accordion-up': 'accordion-up 0.2s ease-out',
		  'fade-in': 'fadeIn 0.5s ease-out forwards',
		  'slide-up-fade': 'slideUpFade 0.6s ease-out forwards',
		  'shimmer': 'shimmer 2s infinite linear',
		  'pulse-slow': 'pulse 3s infinite ease-in-out'
		},
		backgroundImage: {
		  'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
		  'profile-gradient': 'linear-gradient(to right, var(--profile-gradient-from), var(--profile-gradient-to))',
		},
		backdropBlur: {
		  xs: '2px',
		},
		transitionProperty: {
		  'height': 'height',
		  'spacing': 'margin, padding',
		}
	  },
	},
	plugins: [require("tailwindcss-animate")],
  };
</file>

<file path="vite.config.js">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 3000,
  },
  plugins: [
    react(),
    mode === "development" && componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  test: {
    environment: "jsdom",
    globals: true,
    coverage: {
      provider: "v8",
      reporter: ["text", "lcov"],
      include: ["src/**/*.{js,jsx}"],
      exclude: [
        "src/__tests__/**",
        "src/**/*.test.{js,jsx}",
        "vendor/**", // Exclude vendor directory from coverage
      ],
    },
    include: ["src/__tests__/**/*.{test,spec}.{js,jsx}"], // Only run tests in src/__tests__
    exclude: ["vendor/**", "node_modules/**"], // Exclude vendor and node_modules from test execution
  },
}));
</file>

<file path="vite.config.js.timestamp-1741763411979-d1942f0aca7f2.mjs">
// vite.config.js
import { defineConfig } from "file:///C:/Users/Lenovo/Desktop/EpicCoders/PI/PIFullStack-EmergencyDepartment/frontend/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/Lenovo/Desktop/EpicCoders/PI/PIFullStack-EmergencyDepartment/frontend/node_modules/@vitejs/plugin-react-swc/index.mjs";
import path from "path";
import { componentTagger } from "file:///C:/Users/Lenovo/Desktop/EpicCoders/PI/PIFullStack-EmergencyDepartment/frontend/node_modules/lovable-tagger/dist/index.js";
var __vite_injected_original_dirname = "C:\\Users\\Lenovo\\Desktop\\EpicCoders\\PI\\PIFullStack-EmergencyDepartment\\frontend";
var vite_config_default = defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 3e3
  },
  plugins: [
    react(),
    mode === "development" && componentTagger()
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  },
  test: {
    environment: "jsdom",
    globals: true,
    coverage: {
      provider: "v8",
      reporter: ["text", "lcov"],
      include: ["src/**/*.{js,jsx}"],
      exclude: [
        "src/__tests__/**",
        "src/**/*.test.{js,jsx}",
        "vendor/**"
        // Exclude vendor directory from coverage
      ]
    },
    include: ["src/__tests__/**/*.{test,spec}.{js,jsx}"],
    // Only run tests in src/__tests__
    exclude: ["vendor/**", "node_modules/**"]
    // Exclude vendor and node_modules from test execution
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxMZW5vdm9cXFxcRGVza3RvcFxcXFxFcGljQ29kZXJzXFxcXFBJXFxcXFBJRnVsbFN0YWNrLUVtZXJnZW5jeURlcGFydG1lbnRcXFxcZnJvbnRlbmRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXExlbm92b1xcXFxEZXNrdG9wXFxcXEVwaWNDb2RlcnNcXFxcUElcXFxcUElGdWxsU3RhY2stRW1lcmdlbmN5RGVwYXJ0bWVudFxcXFxmcm9udGVuZFxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvTGVub3ZvL0Rlc2t0b3AvRXBpY0NvZGVycy9QSS9QSUZ1bGxTdGFjay1FbWVyZ2VuY3lEZXBhcnRtZW50L2Zyb250ZW5kL3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjtcclxuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0IHsgY29tcG9uZW50VGFnZ2VyIH0gZnJvbSBcImxvdmFibGUtdGFnZ2VyXCI7XHJcblxyXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgbW9kZSB9KSA9PiAoe1xyXG4gIHNlcnZlcjoge1xyXG4gICAgaG9zdDogXCI6OlwiLFxyXG4gICAgcG9ydDogMzAwMCxcclxuICB9LFxyXG4gIHBsdWdpbnM6IFtcclxuICAgIHJlYWN0KCksXHJcbiAgICBtb2RlID09PSBcImRldmVsb3BtZW50XCIgJiYgY29tcG9uZW50VGFnZ2VyKCksXHJcbiAgXS5maWx0ZXIoQm9vbGVhbiksXHJcbiAgcmVzb2x2ZToge1xyXG4gICAgYWxpYXM6IHtcclxuICAgICAgXCJAXCI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi9zcmNcIiksXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgdGVzdDoge1xyXG4gICAgZW52aXJvbm1lbnQ6IFwianNkb21cIixcclxuICAgIGdsb2JhbHM6IHRydWUsXHJcbiAgICBjb3ZlcmFnZToge1xyXG4gICAgICBwcm92aWRlcjogXCJ2OFwiLFxyXG4gICAgICByZXBvcnRlcjogW1widGV4dFwiLCBcImxjb3ZcIl0sXHJcbiAgICAgIGluY2x1ZGU6IFtcInNyYy8qKi8qLntqcyxqc3h9XCJdLFxyXG4gICAgICBleGNsdWRlOiBbXHJcbiAgICAgICAgXCJzcmMvX190ZXN0c19fLyoqXCIsXHJcbiAgICAgICAgXCJzcmMvKiovKi50ZXN0Lntqcyxqc3h9XCIsXHJcbiAgICAgICAgXCJ2ZW5kb3IvKipcIiwgLy8gRXhjbHVkZSB2ZW5kb3IgZGlyZWN0b3J5IGZyb20gY292ZXJhZ2VcclxuICAgICAgXSxcclxuICAgIH0sXHJcbiAgICBpbmNsdWRlOiBbXCJzcmMvX190ZXN0c19fLyoqLyoue3Rlc3Qsc3BlY30ue2pzLGpzeH1cIl0sIC8vIE9ubHkgcnVuIHRlc3RzIGluIHNyYy9fX3Rlc3RzX19cclxuICAgIGV4Y2x1ZGU6IFtcInZlbmRvci8qKlwiLCBcIm5vZGVfbW9kdWxlcy8qKlwiXSwgLy8gRXhjbHVkZSB2ZW5kb3IgYW5kIG5vZGVfbW9kdWxlcyBmcm9tIHRlc3QgZXhlY3V0aW9uXHJcbiAgfSxcclxufSkpOyJdLAogICJtYXBwaW5ncyI6ICI7QUFBNGEsU0FBUyxvQkFBb0I7QUFDemMsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sVUFBVTtBQUNqQixTQUFTLHVCQUF1QjtBQUhoQyxJQUFNLG1DQUFtQztBQU16QyxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxFQUFFLEtBQUssT0FBTztBQUFBLEVBQ3pDLFFBQVE7QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxFQUNSO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixTQUFTLGlCQUFpQixnQkFBZ0I7QUFBQSxFQUM1QyxFQUFFLE9BQU8sT0FBTztBQUFBLEVBQ2hCLFNBQVM7QUFBQSxJQUNQLE9BQU87QUFBQSxNQUNMLEtBQUssS0FBSyxRQUFRLGtDQUFXLE9BQU87QUFBQSxJQUN0QztBQUFBLEVBQ0Y7QUFBQSxFQUNBLE1BQU07QUFBQSxJQUNKLGFBQWE7QUFBQSxJQUNiLFNBQVM7QUFBQSxJQUNULFVBQVU7QUFBQSxNQUNSLFVBQVU7QUFBQSxNQUNWLFVBQVUsQ0FBQyxRQUFRLE1BQU07QUFBQSxNQUN6QixTQUFTLENBQUMsbUJBQW1CO0FBQUEsTUFDN0IsU0FBUztBQUFBLFFBQ1A7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUNBLFNBQVMsQ0FBQyx5Q0FBeUM7QUFBQTtBQUFBLElBQ25ELFNBQVMsQ0FBQyxhQUFhLGlCQUFpQjtBQUFBO0FBQUEsRUFDMUM7QUFDRixFQUFFOyIsCiAgIm5hbWVzIjogW10KfQo=
</file>

</files>
