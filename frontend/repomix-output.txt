This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
components.json
composer.json
eslint.config.js
index.html
package.json
postcss.config.js
public/index.html
public/manifest.json
public/placeholder.svg
public/robots.txt
README.md
src/App.css
src/App.jsx
src/App.test.js
src/components/AnimatedBackground.css
src/components/AnimatedBackground.jsx
src/components/AuthLayout.js
src/components/DashboardHeader.jsx
src/components/DashboardSidebar.jsx
src/components/EditableField.jsx
src/components/footer.jsx
src/components/ForgotPassword.jsx
src/components/header.css
src/components/header.jsx
src/components/HeaderProfile.jsx
src/components/home.jsx
src/components/Layout.jsx
src/components/LoadingState.jsx
src/components/login.jsx
src/components/Login/login.jsx
src/components/profile.jsx
src/components/ProfileAvatar.jsx
src/components/ProfileContent.jsx
src/components/ProfileHeader.jsx
src/components/ProtectedRoute.jsx
src/components/register.jsx
src/components/ResetPassword.jsx
src/components/staff/ResourceManagement.jsx
src/components/staff/StaffDirectory.jsx
src/components/staff/StaffOverview.jsx
src/components/TabNavigation.jsx
src/components/ui/accordion.jsx
src/components/ui/alert-dialog.jsx
src/components/ui/alert.jsx
src/components/ui/aspect-ratio.jsx
src/components/ui/avatar.jsx
src/components/ui/badge.jsx
src/components/ui/breadcrumb.jsx
src/components/ui/button.jsx
src/components/ui/calendar.jsx
src/components/ui/card.jsx
src/components/ui/carousel.jsx
src/components/ui/chart.jsx
src/components/ui/checkbox.jsx
src/components/ui/collapsible.jsx
src/components/ui/command.jsx
src/components/ui/context-menu.jsx
src/components/ui/dialog.jsx
src/components/ui/drawer.jsx
src/components/ui/dropdown-menu.jsx
src/components/ui/form.jsx
src/components/ui/hover-card.jsx
src/components/ui/input-otp.jsx
src/components/ui/input.jsx
src/components/ui/label.jsx
src/components/ui/menubar.jsx
src/components/ui/navigation-menu.jsx
src/components/ui/pagination.jsx
src/components/ui/popover.jsx
src/components/ui/progress.jsx
src/components/ui/radio-group.jsx
src/components/ui/resizable.jsx
src/components/ui/scroll-area.jsx
src/components/ui/select.jsx
src/components/ui/separator.jsx
src/components/ui/sheet.jsx
src/components/ui/sidebar.jsx
src/components/ui/skeleton.jsx
src/components/ui/slider.jsx
src/components/ui/sonner.jsx
src/components/ui/switch.jsx
src/components/ui/table.jsx
src/components/ui/tabs.jsx
src/components/ui/textarea.jsx
src/components/ui/toast.jsx
src/components/ui/toaster.jsx
src/components/ui/toggle-group.jsx
src/components/ui/toggle.jsx
src/components/ui/tooltip.jsx
src/components/ui/use-toast.js
src/hooks/use-mobile.jsx
src/hooks/use-toast.js
src/index.css
src/index.jsx
src/Layouts/DashboardLayout.jsx
src/Layouts/MainLayout.jsx
src/Layouts/PublicLayout.jsx
src/lib/utils.jsx
src/logo.svg
src/main.jsx
src/pages/Alerts.jsx
src/pages/Calendar.jsx
src/pages/ConfirmationEmergencyRegister.jsx
src/pages/Dashboard.jsx
src/pages/Doctors.jsx
src/pages/Emergency.jsx
src/pages/EmergencyRegister.jsx
src/pages/EmergencyStatus.jsx
src/pages/Forum.jsx
src/pages/index.jsx
src/pages/Login.jsx
src/pages/NotFound.jsx
src/pages/Patients.jsx
src/pages/ProfilePage.jsx
src/pages/Records.jsx
src/pages/Settings.jsx
src/pages/Staff.jsx
src/reportWebVitals.js
src/setupTests.js
src/vite-env.d.ts
tailwind.config.js
vite.config.js

================================================================
Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: composer.json
================
{
    "require": {
        "twbs/bootstrap": "5.3.3"
    }
}

================
File: eslint.config.js
================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>emergency-admin-dashboard</title>
  <meta name="description" content="Lovable Generated Project" />
  <meta name="author" content="Lovable" />
  <meta property="og:image" content="/og-image.png" />
</head>

<body>
  <div id="root"></div>
  <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
  <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html>

================
File: package.json
================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@babel/core": "^7.26.9",
    "@babel/preset-env": "^7.26.9",
    "@babel/preset-react": "^7.26.3",
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@react-oauth/google": "^0.12.1",
    "@tanstack/react-query": "^5.56.2",
    "axios": "^1.8.1",
    "bootstrap": "^5.3.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "framer-motion": "^12.4.10",
    "input-otp": "^1.2.4",
    "js-cookie": "^3.0.5",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.9",
    "react-calendar": "^5.1.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "react-icons": "^5.5.0",
    "react-multi-carousel": "^2.8.5",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.30.0",
    "react-toastify": "^11.0.5",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@babel/preset-typescript": "^7.26.0",
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.3",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.14"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.css
================
/* Hero Section */
.app-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 0;
 
}

.hero {
  display: flex;
  gap: 20px;
  padding-top: 5px;
  padding-bottom: 120px;
  position: relative;
  top :100px ;
}

.hero .banner {
  flex: 1;
  
}

.hero .banner h1,
.hero .banner p {
  max-width: 550px;
}

.hero .banner h1 {
  letter-spacing: 2px;
  word-spacing: 5px;
  font-size: 40px;
  color: #333;

    
}

.hero .banner p {
  color: #555;
  letter-spacing: 2px;
  line-height: 1.6;
}

.hero .banner span {
  position: absolute;
  right: -300px;
  top: -200px;
  z-index: -1;
}

.hero .banner:first-child {
  display: flex;
  justify-content: center;
  flex-direction: column;
  gap: 50px;
  margin-top: -20px;
}

.hero .banner:last-child {
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: hidden;
  margin-top: -20px;      
}

.animated-image {
  animation: moveUpDown 1s infinite alternate ease-in-out;
}
/* Style du bouton Emergency */
/* Style du bouton Emergency */
.emergency-btn {
  background-color: #edf4f8;
  color: #333;
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  font-weight: bold;
  border-radius: 30px; /* Arrondi du bouton */
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  display: inline-block;
  margin-top: 15px;
  width: 250px;
  text-align: center;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); /* Ombre légère pour un effet 3D */
}

.emergency-btn:hover {
  background-color: #d6e4ef;
  transform: scale(1.05); /* Léger effet zoom au survol */
}



@keyframes moveUpDown {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(20px);
  }
}

/* Biography Section */
.biography {
  display: flex;
  gap: 50px;
  padding-top: 5px;
  padding-bottom: 60px;
}

.biography .banner:first-child {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: -100px;
}

.biography .banner:last-child {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: -50px;
}

.biography .banner h3 {
  letter-spacing: 2px;
  word-spacing: 5px;
  font-size: 40px;
  color: #333;
}

.biography .banner p:first-child {
  
  font-size: 24px;
  letter-spacing: 2px;
  color: #555;
}

/* Services Section */
/* Services Section */
.services-section {
  margin-top: 50px;
  text-align: center;
}

.services-carousel .custom-arrow {
  width: 40px;
  height: 40px;
  background-color: rgba(173, 216, 230, 0.8);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  cursor: pointer;
}

.left-arrow { left: -50px; }
.right-arrow { right: -50px; }

.service-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: #edf4f8;
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
  width: 250px;
  height: 250px;
  margin: auto;
}

.service-image {
  width: 200px;
  height: 200px;
  object-fit: contain;
  margin-bottom: 10px;
}

.service-name {
  font-weight: 600;
  color: #2c3e50;
}
/* Responsive Design */
@media (max-width: 1186px) {
  .hero .banner span {
    right: -400px;
  }
  .hero .banner h1 {
    font-size: 32px;
  }
}

@media (max-width: 1085px) {
  .hero .banner span {
    right: -480px;
    top: -315px;
  }
}

@media (max-width: 925px) {
  .hero {
    flex-direction: column;
  }
  .biography {
    flex-direction: column-reverse;
  }
}

@media (max-width: 700px) {
  .hero {
    padding-bottom: 40px;
  }
  .departments h2 {
    font-size: 2rem;
  }
  .service-card .card-img {
    height: 150px;
  }
  .service-card .card-title {
    font-size: 1rem;
  }
}
.footer_container {
  background-color: #edf4f8;
  padding: 20px 20px;
  border-top:100px solid #ffff;
}

.footer_content {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  max-width: 1300px;
  margin: 0 auto;
}

.footer_logo {
  flex: 1;
  display: flex;
  justify-content: center;
}

.footer_logo-img {
  max-width: 200px; /* Réduction de la taille du logo */
}

.footer_section {
  flex: 1;
  min-width: 200px;
}

.footer_section h4 {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 15px;
}

.footer_section ul {
  list-style: none;
  padding: 0;
}

.footer_section ul li {
  margin-bottom: 10px;
  font-size: 14px;
  color: #555;
}

.footer_section ul li a {
  color: #555;
  text-decoration: none;
}

.footer_section ul li a:hover {
  color: #007BFF;
  transition: 0.3s ease-in-out;
}

.footer_section div {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 10px;
}

.footer_section div svg {
  color: #007BFF;
  font-size: 18px;
}

/* Responsive */
@media (max-width: 768px) {
  .footer_content {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .footer_section {
    margin-bottom: 20px;
  }
}

================
File: src/App.jsx
================
import { Routes, Route, Navigate } from "react-router-dom";
import MainLayout from "./Layouts/MainLayout";
import DashboardLayout from "./Layouts/DashboardLayout";
import { SidebarProvider } from "@/components/ui/sidebar";

import PublicLayout from "./Layouts/PublicLayout";
import './index.css'
import Home from "./components/Home";
import Profile from "./components/Profile";
import Login from "./pages/Login";
import Register from "./components/Register";
import ForgotPassword from "./components/ForgotPassword";
import Dashboard from "./pages/Dashboard";
import Patients from "./pages/Patients";
import Doctors from "./pages/Doctors";
import Calendar from "./pages/Calendar";
import Staff from "./pages/Staff";
import Alerts from "./pages/Alerts";
import Settings from "./pages/Settings";
import Emergency from"./pages/Emergency";
import Forum from "./pages/Forum";
import EmergencyRegister from "./pages/EmergencyRegister";
import ConfirmationEmergencyRegister from "./pages/ConfirmationEmergencyRegister";
import EmergencyStatus from "./pages/EmergencyStatus"; // Importez le composant de statut
function App() {
  return (
      <Routes>
        {/* Redirection par défaut vers login */}
        <Route path="/" element={<Navigate to="/login" />} />

        {/* Routes publiques sans header/footer/sidebar */}
        <Route path="/login" element={<PublicLayout><Login /></PublicLayout>} />
      
        <Route path="/emergency-confirmation" element={<PublicLayout><ConfirmationEmergencyRegister /></PublicLayout>} />
        <Route path="/emergency-status" element={<EmergencyStatus />} />
        <Route path="/register" element={<PublicLayout><Register /></PublicLayout>} />
        <Route path="/forgotpassword" element={<PublicLayout><ForgotPassword /></PublicLayout>} />

        {/* Routes Main avec header/footer */}
        <Route path="/home" element={<MainLayout><Home /></MainLayout>} />
        <Route path="/profile" element={<MainLayout><Profile /></MainLayout>} />
        <Route path="/emergency-register" element={<MainLayout><EmergencyRegister /></MainLayout>} />
        <Route path="/emergency-confirmation" element={<MainLayout><ConfirmationEmergencyRegister /></MainLayout>} />

        {/* Routes Dashboard avec sidebar */}
        <Route path="/dashboard" element={
    <SidebarProvider>
        <DashboardLayout><Dashboard /></DashboardLayout>
    </SidebarProvider>} />
        <Route path="/doctors" element={<DashboardLayout><Doctors /></DashboardLayout>} />
        <Route path="/patients" element={<DashboardLayout><Patients /></DashboardLayout>} />
        <Route path="/calendar" element={<DashboardLayout><Calendar /></DashboardLayout>} />
        <Route path="/staff" element={<DashboardLayout><Staff /></DashboardLayout>} />
        <Route path="/alerts" element={<DashboardLayout><Alerts /></DashboardLayout>} />
        <Route path="/emergency" element={<DashboardLayout><Emergency /></DashboardLayout>} />
        <Route path="/settings" element={<DashboardLayout><Settings /></DashboardLayout>} />
        <Route path="/forum" element={<DashboardLayout><Forum /></DashboardLayout>} />
      </Routes>
  );
}



export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/AnimatedBackground.css
================
/* 🌟 Dégradé animé */
@keyframes gradientAnimation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}
.background-container {
    min-height: 100vh; /* Permet au contenu de pousser le fond */
    display: flex;
    flex-direction: column;
    background: linear-gradient(-45deg, #ffff, #5CB8FF, #f4faff, #cce5f8);
  background-size: 300% 300%;
  animation: gradientAnimation 10s ease infinite;
  overflow: hidden;
  }
  
/* Animation du stéthoscope */
.stethoscope {
    position: absolute;
    width: 100px;
    top: 50%;
    left: -100px;
    animation: moveStethoscope 10s linear infinite;
  }
  
  @keyframes moveStethoscope {
    0% {
      left: -100px;
      transform: rotate(0deg);
    }
    50% {
      transform: rotate(10deg);
    }
    100% {
      left: 100%;
      transform: rotate(-10deg);
    }
  }

/* 🌟 Particules flottantes */
.particles, .particles2 {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  pointer-events: none;
}

.particles::before, .particles::after {
  content: "";
  position: absolute;
  width: 5px;
  height: 5px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  box-shadow: 
    10vw 20vh 8px rgba(255, 255, 255, 0.2),
    30vw 40vh 12px rgba(255, 255, 255, 0.3),
    50vw 10vh 6px rgba(255, 255, 255, 0.1),
    80vw 60vh 10px rgba(255, 255, 255, 0.2);
  animation: floatParticles 20s linear infinite;
}

.particles2::before, .particles2::after {
  content: "";
  position: absolute;
  width: 4px;
  height: 4px;
  background: rgba(255, 255, 255, 0.6);
  border-radius: 50%;
  box-shadow: 
    15vw 50vh 5px rgba(255, 255, 255, 0.1),
    35vw 25vh 7px rgba(255, 255, 255, 0.2),
    60vw 70vh 6px rgba(255, 255, 255, 0.15),
    90vw 20vh 8px rgba(255, 255, 255, 0.2);
  animation: floatParticles2 15s linear infinite;
}

/* 🌟 Animation des particules */
@keyframes floatParticles {
  0% { transform: translateY(0); opacity: 0.8; }
  50% { transform: translateY(-50px); opacity: 0.5; }
  100% { transform: translateY(0); opacity: 0.8; }
}

@keyframes floatParticles2 {
  0% { transform: translateY(0); opacity: 0.7; }
  50% { transform: translateY(-30px); opacity: 0.4; }
  100% { transform: translateY(0); opacity: 0.7; }
}

================
File: src/components/AnimatedBackground.jsx
================
import "./AnimatedBackground.css";


const AnimatedBackground = ({ children }) => {
  
  return (
    <div className="background-container">
      <div className="animated-half">
       
      </div>
      <div className="content-half">{children}</div>
    </div>
  );
};

export default AnimatedBackground;

================
File: src/components/AuthLayout.js
================
import AnimatedBackground from "./AnimatedBackground";

const AuthLayout = ({ children }) => {
  return (
    <div className="flex h-screen">
      {/* Partie gauche avec l'animation */}
      <div className="w-1/2 h-full">
        <AnimatedBackground />
      </div>

      {/* Partie droite avec le formulaire */}
      <div className="w-1/2 flex items-center justify-center bg-gray-100 p-8">
        <div className="bg-white p-8 rounded-2xl shadow-lg w-full max-w-md">
          {children}
        </div>
      </div>
    </div>
  );
};

export default AuthLayout;

================
File: src/components/DashboardHeader.jsx
================
// src/components/DashboardHeader.jsx
import React from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Bell, PanelLeft } from "lucide-react"; // Importez PanelLeft pour le toggle sidebar
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { useSidebar } from "@/components/ui/sidebar"; // Si vous utilisez SidebarTrigger
import {
    Tooltip,
    TooltipContent,
    TooltipProvider,
    TooltipTrigger,
} from "@/components/ui/tooltip"; // Import Tooltip components

const DashboardHeader = () => {
    const { toggleSidebar } = useSidebar(); // Si vous utilisez SidebarTrigger

    return (
        <div className="sticky top-0 bg-background/95 z-40 w-full border-b">
            <div className="mx-auto h-16 max-w-7xl px-4 sm:px-6 lg:px-8 flex items-center justify-between">
                {/* Partie Gauche : Recherche */}
                <div className="flex-1 flex">
                    <div className="max-w-md w-full relative">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input
                            placeholder="Search patients..."
                            className="pl-10"
                        />
                    </div>
                </div>

                {/* Partie Droite : Profil utilisateur */}
                <div className="flex items-center space-x-4">
                    {/* Icône de Langue (exemple - en utilisant Tooltip pour l'exemple) */}
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon">
                                    <span className="fi fi-us fis"></span> {/* Remplacez par votre icône de langue si nécessaire */}
                                    <span className="sr-only">Select Language</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                                Change Language
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>


                    {/* Toggle Sidebar (si vous utilisez SidebarTrigger) - en utilisant Tooltip pour l'exemple */}
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon" onClick={toggleSidebar}> {/* Utilisez toggleSidebar pour basculer le sidebar */}
                                    <PanelLeft className="h-4 w-4" />
                                    <span className="sr-only">Toggle Sidebar</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                                Toggle Sidebar
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>


                    {/* Icône de Notifications (exemple - en utilisant Tooltip pour l'exemple) */}
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon">
                                    <Bell className="h-4 w-4" />
                                    <span className="sr-only">Notifications</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                                Notifications
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>


                    {/* Avatar utilisateur - en utilisant Tooltip pour l'exemple */}
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon">
                                    <Avatar className="h-8 w-8">
                                        <AvatarImage src="https://github.com/shadcn.png" alt="@shadcn" /> {/* Remplacez par l'URL de l'avatar de l'utilisateur */}
                                        <AvatarFallback>CN</AvatarFallback> {/* Initiales de l'utilisateur ou fallback */}
                                    </Avatar>
                                    <span className="sr-only">User Profile</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                                <div className="font-medium">Bini Jets</div> {/* Remplacez par le nom de l'utilisateur */}
                                <p className="text-xs text-muted-foreground">Available</p> {/* Remplacez par le statut de l'utilisateur */}
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>

                </div>
            </div>
        </div>
    );
};

export default DashboardHeader;

================
File: src/components/DashboardSidebar.jsx
================
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar";
import {
  Calendar,
  ClipboardList,
  Home,
  Users,
  Bell,
  Settings,
  UserCog,
  Hospital,
  Stethoscope,
  MessageCircle,
  LogIn,
} from "lucide-react";
import { Link } from "react-router-dom";
import "../app.css";
const menuItems = [
  { title: "Dashboard", icon: Home, path: "/dashboard" },
  { title: "Doctors", icon: Stethoscope, path: "/doctors" },
  { title: "Patients", icon: Users, path: "/patients" },
  { title: "Calendar", icon: Calendar, path: "/calendar" },
  { title: "Records", icon: ClipboardList, path: "/records" },
  { title: "Emergency", icon: Hospital, path: "/emergency" },
  { title: "Staff", icon: UserCog, path: "/staff" },
  { title: "Forum", icon: MessageCircle, path: "/forum" },
  { title: "Alerts", icon: Bell, path: "/alerts" },
  { title: "Settings", icon: Settings, path: "/settings" },
  { title: "Login", icon: LogIn, path: "/login" },
];

const DashboardSidebar = () => {
  return (
    <Sidebar>
      <SidebarContent>
        <div className="p-4">
          <h1 className="text-xl font-bold text-white">Emergency Care</h1>
        </div>
        <SidebarGroup>
          <SidebarGroupLabel>Main Menu</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {menuItems.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <Link to={item.path} className="flex items-center gap-2 text-white">
                      <item.icon className="w-5 h-5" />
                      <span>{item.title}</span>
                    </Link>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  );
};

export default DashboardSidebar;

================
File: src/components/EditableField.jsx
================
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';

const EditableField = ({
  label,
  value,
  field,
  section,
  isEditing,
  onChange,
  type = 'text'
}) => {
  const [localValue, setLocalValue] = useState(value);

  useEffect(() => {
    setLocalValue(value);
  }, [value]);

  const handleChange = (newValue) => {
    setLocalValue(newValue);
    onChange(section, field, newValue);
  };

  const displayValue = () => {
    if (!value && value !== 0) return 'Not specified';

    if (Array.isArray(value)) {
      return value.join(', ') || 'None';
    }

    if (type === 'date' && value) {
      try {
        return new Date(value).toLocaleDateString();
      } catch (e) {
        return value;
      }
    }

    return value;
  };

  const renderEditableContent = () => {
    if (type === 'textarea') {
      return (
        <textarea
          value={Array.isArray(localValue) ? localValue.join(', ') : localValue || ''}
          onChange={(e) => handleChange(e.target.value)}
          className="w-full p-2 border border-profileBlue-200 rounded focus:outline-none focus:ring-1 focus:ring-profileBlue-400 transition-all"
          rows={3}
        />
      );
    } else if (type === 'date') {
      return (
        <input
          type="date"
          value={localValue ? new Date(localValue).toISOString().split('T')[0] : ''}
          onChange={(e) => handleChange(e.target.value)}
          className="w-full p-2 border border-profileBlue-200 rounded focus:outline-none focus:ring-1 focus:ring-profileBlue-400 transition-all"
        />
      );
    } else if (type === 'array') {
      return (
        <input
          type="text"
          value={Array.isArray(localValue) ? localValue.join(', ') : localValue || ''}
          onChange={(e) => handleChange(e.target.value.split(',').map(item => item.trim()))}
          className="w-full p-2 border border-profileBlue-200 rounded focus:outline-none focus:ring-1 focus:ring-profileBlue-400 transition-all"
          placeholder="Separate values with commas"
        />
      );
    } else {
      return (
        <input
          type="text"
          value={localValue || ''}
          onChange={(e) => handleChange(e.target.value)}
          className="w-full p-2 border border-profileBlue-200 rounded focus:outline-none focus:ring-1 focus:ring-profileBlue-400 transition-all"
        />
      );
    }
  };

  return (
    <motion.div
      className="profile-field-container"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="profile-field-label">{label}</div>

      {isEditing ? (
        renderEditableContent()
      ) : (
        <div className="profile-field-value">
          {displayValue()}
        </div>
      )}
    </motion.div>
  );
};

export default EditableField;

================
File: src/components/footer.jsx
================
import React from "react";
import { Link } from "react-router-dom";
import { FaLocationArrow, FaPhone } from "react-icons/fa6";
import { MdEmail } from "react-icons/md";

const Footer = () => {
  const hours = [
    { id: 1, day: "Monday", time: "9:00 AM - 11:00 PM" },
    { id: 2, day: "Tuesday", time: "12:00 PM - 12:00 AM" },
    { id: 3, day: "Wednesday", time: "10:00 AM - 10:00 PM" },
    { id: 4, day: "Thursday", time: "9:00 AM - 9:00 PM" },
    { id: 5, day: "Friday", time: "3:00 PM - 9:00 PM" },
    { id: 6, day: "Saturday", time: "9:00 AM - 3:00 PM" },
  ];

  return (
    <footer className="footer_container">
      <div className="footer_content">
        <div className="footer_logo">
          <img src="./images/logo1.png" alt="logo" className="footer_logo-img"/>
        </div>

        <div className="footer_section">
          <h4>Quick Links</h4>
          <ul>
            <li><Link to={"/"}>Home</Link></li>
            <li><Link to={"/appointment"}>Appointment</Link></li>
            <li><Link to={"/about"}>About</Link></li>
          </ul>
        </div>

        <div className="footer_section">
          <h4>Opening Hours</h4>
          <ul>
            {hours.map((element) => (
              <li key={element.id}>
                <span>{element.day}</span>
                <span>{element.time}</span>
              </li>
            ))}
          </ul>
        </div>

        <div className="footer_section">
          <h4>Contact Us</h4>
          <div><FaPhone /><span>+21656800822</span></div>
          <div><MdEmail /><span>Edepartement@gmail.com</span></div>
          <div><FaLocationArrow /><span>Ariana, Tunisia</span></div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

================
File: src/components/ForgotPassword.jsx
================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

const ForgotPassword = () => {
    const [email, setEmail] = useState("");
    const [message, setMessage] = useState(""); // Message de succès ou d'erreur
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setMessage(""); // Réinitialiser le message avant chaque requête

        try {
            const res = await axios.post("http://localhost:8089/api/auth/forgot-password", { email }, { withCredentials: true });
            
            if (res.data.message) {
                setMessage("✅ Email de réinitialisation envoyé !");
                setTimeout(() => navigate("/login"), 3000);
            }
        } catch (err) {
            console.error("❌ Erreur Axios :", err);
            setMessage("❌ Erreur lors de la réinitialisation.");
        }
    };

    return (
        <div className="d-flex justify-content-center align-items-center vh-100">
            <div className="bg-white p-3 rounded w-25" >
                <h4>Mot de passe oublié</h4>
                <form onSubmit={handleSubmit}>
                    <div className="mb-3">
                        <label htmlFor="email">
                            <strong>Email</strong>
                        </label>
                        <input
                            type="email"
                            placeholder="Entrez votre email"
                            autoComplete="off"
                            name="email"
                            className="form-control rounded-0"
                            onChange={(e) => setEmail(e.target.value)}
                            required
                        />
                    </div>
                    <button type="submit" className="btn btn-success w-100 rounded-0" style={{ backgroundColor: "#6DDCCF", borderColor: "#6DDCCF", color: "white" }}>
                        Envoyer
                    </button>
                </form>
                {message && <p className="mt-3 text-center">{message}</p>}
            </div>
        </div>
    );
};

export default ForgotPassword;

================
File: src/components/header.css
================
/* Updated Header Styles for a Professional Blue Look */
.header_container {
 
  /* Secondary Blue for background */
  padding: 10px 20px ;
  display: flex;
  justify-content: space-between;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000;
 background-color: #edf4f8;
  border-bottom: 1px solid #E0F2FE;
  /* Match border color to background for subtle effect */
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}
.header_logo {
  /* Logo styles remain the same */
}

.header_logo-img {
  height: 60px;
  /* Slightly smaller logo for a cleaner look */
  vertical-align: middle;
}

.header_navLinks {
  display: flex;
  align-items: center;
}

.header_links {
  display: flex;
  margin-right: 20px;
}

.header_links a {
  color: #3c7f77;
  /* Dark Blue for links */
  text-decoration: none;
  margin: 0 15px;
  font-weight: 500;
  transition: color 0.2s ease-in-out;
  /* Smooth color transition */
}

.header_links a:hover {
  color: #C3DAFD;
  /* Primary Blue on hover */
}

.header_btn {
  padding: 8px 18px;
  /* Adjusted button padding */
  border: none;
  border-radius: 5px;
  /* Slightly rounded buttons */
  background-color: #C4DBFF;
  /* Primary Blue for button background */
  color: white;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.2s ease-in-out;
  /* Button hover transition */
}

.header_btn:hover {
  background-color: #0056b3;
  /* Darker shade of primary blue on hover */
}

.header_loginBtn {
  /* Specific login button styles if needed */
}

.header_hamburger {
  font-size: 24px;
  cursor: pointer;
  color: #0D47A1;
  /* Dark Blue for hamburger icon */
}

/* User Menu Styles */
.header_user-menu {
  position: relative;
  cursor: pointer;
  display: flex;
  align-items: center;
}

.header_user-info {
  display: flex;
  align-items: center;
  background-color: white;
  /* White background for user info area */
  padding: 6px 12px;
  border-radius: 5px;
  border: 1px solid #E0F2FE;
  /* Light border */
  transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
}

.header_user-info:hover,
.header_user-info:focus {
  background-color: #F0F0F0;
  /* Light Gray/Blue on hover/focus */
  border-color: #007BFF;
  /* Primary Blue border on hover/focus */
}

.header_user-avatar {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  margin-right: 8px;
  vertical-align: middle;
  border: 1px solid #E0F2FE;
  /* Light border for avatar */
}

.header_user-icon {
  margin-left: 5px;
  font-size: 18px;
  /* Slightly smaller icon */
  vertical-align: middle;
  color: #0D47A1;
  /* Dark Blue for user icon */
}

.header_dropdown-menu {
  position: absolute;
  top: 100%;
  right: 0;
  background-color: white;
  border: 1px solid #E0F2FE;
  /* Light border for dropdown */
  border-radius: 5px;
  padding: 8px 0;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  z-index: 10;
  min-width: 160px;
  /* Slightly wider dropdown */
}

.header_dropdown-menu a,
.header_dropdown-menu button {
  display: block;
  padding: 8px 20px;
  text-decoration: none;
  color: #0D47A1;
  /* Dark Blue for dropdown items */
  text-align: left;
  border: none;
  background: none;
  width: 100%;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
  /* Dropdown item hover transition */
}

.header_dropdown-menu a:hover,
.header_dropdown-menu button:hover {
  background-color: #F0F0F0;
  /* Light Gray/Blue on dropdown item hover */
}

/* Responsive Styles (Mobile) - Adjust as needed, but keeping it similar */
@media (max-width: 768px) {
  .header_navLinks {
    display: none;
    flex-direction: column;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: #E0F2FE;
    /* Secondary Blue for mobile menu background */
    text-align: center;
    padding: 20px 0;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .header_showmenu {
    display: flex;
  }

  .header_links {
    flex-direction: column;
    margin-right: 0;
  }

  .header_links a {
    margin: 10px 0;
    display: block;
  }

  .header_hamburger {
    display: block;
  }
}

================
File: src/components/header.jsx
================
import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { GiHamburgerMenu } from "react-icons/gi";
import { FiUser } from "react-icons/fi";
import Cookies from "js-cookie";
import axios from "axios";
import "./header.css"; // Import the CSS file

const Header = () => {
    const [show, setShow] = useState(false);
    const [user, setUser] = useState(null);
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    useEffect(() => {
        const fetchUserData = async () => {
            const token = Cookies.get("token");
            if (token) {
                try {
                    const response = await axios.get("http://localhost:8089/api/auth/me", { withCredentials: true });
                    setUser(response.data);
                } catch (error) {
                    console.error("Error fetching user data:", error);
                    setUser(null);
                } finally {
                    setLoading(false);
                }
            } else {
                setLoading(false);
            }
        };

        fetchUserData();
    }, []);

    const handleLogout = async () => {
        try {
            await axios.post("http://localhost:8089/api/auth/logout", {}, { withCredentials: true });
            Cookies.remove("token");
            setUser(null);
            navigate("/login");
        } catch (error) {
            console.error("Logout failed:", error.response?.data?.message || error.message);
        }
    };

    const toggleDropdown = () => {
        setDropdownOpen(!dropdownOpen);
    };

    const closeDropdown = () => {
        setDropdownOpen(false);
    };

    if (loading) {
        return <div>Loading...</div>; // Or a loading component
    }

    return (
        <nav className="header_container">
            <div className="header_logo">
                <img src="./images/logo1.png" alt="logo" className="header_logo-img" />
            </div>
            <div className={show ? "header_navLinks header_showmenu" : "header_navLinks"}>
                <div className="header_links">
                    <Link to={"/home"} onClick={() => setShow(!show)}>Home</Link>
                    <Link to={"/emergency-register"} onClick={() => setShow(!show)}>Emergency</Link>
                    <Link to={"/document"} onClick={() => setShow(!show)}>Medical Document</Link>
                    <Link to={"/ambulance"} onClick={() => setShow(!show)}>Ambulance Check</Link>
                    <Link to={"/ressources"} onClick={() => setShow(!show)}>Resources Check</Link>
                </div>

                {user ? (
                    <div className="header_user-menu">
                        <div className="header_user-info" onClick={toggleDropdown}>
                            {user.profileImage && (
                                <img
                                    src={`http://localhost:8089${user.profileImage}`}
                                    alt="Profile"
                                    className="header_user-avatar"
                                    onError={(e) => {
                                        console.error("Failed to load image:", user.profileImage);
                                        e.target.style.display = "none"; // Hide image if load fails
                                    }}
                                />
                            )}
                            <span>{user.username}</span>
                            <FiUser className="header_user-icon" />
                        </div>

                        {dropdownOpen && (
                            <div className="header_dropdown-menu">
                                <Link to="/profile" onClick={closeDropdown}>My Profile</Link>
                                <button onClick={handleLogout}>Logout</button>
                            </div>
                        )}
                    </div>
                ) : (
                    <button className="header_btn header_loginBtn" onClick={() => navigate("/login")}>Login</button>
                )}
            </div>
           
        </nav>
    );
};

export default Header;

================
File: src/components/HeaderProfile.jsx
================
import React from 'react';
import { Link } from 'react-router-dom';

const Header = () => {
    return (
        <header className="bg-profileBlue-600 text-white p-4 shadow-md">
            <div className="container mx-auto flex justify-between items-center">
                <Link to="/" className="text-xl font-bold">PiFullStack</Link>
                <nav>
                    <ul className="flex space-x-4">
                        <li><Link to="/" className="hover:text-profileBlue-200">Accueil</Link></li>
                        <li><Link to="/profile" className="hover:text-profileBlue-200">Profil</Link></li>
                    </ul>
                </nav>
            </div>
        </header>
    );
};

export default Header;

================
File: src/components/home.jsx
================
import React from "react";
import Carousel from "react-multi-carousel";
import "react-multi-carousel/lib/styles.css";
import { FaArrowLeft, FaArrowRight } from "react-icons/fa";
import "../App.css";
const Home = () => {
  const servicesArray = [
    { name: "Emergency", imageUrl: "/images/Emergecy.png" },
    { name: "Medical Document", imageUrl: "/images/electronic_medical_records-removebg-preview.png" },
    { name: "Ambulance Check", imageUrl: "/images/stafambulace.png" },
    { name: "Resources Check", imageUrl: "/images/ressources-removebg-preview.png" },
    { name: "Patient Feedback", imageUrl: "/images/equipe2-removebg-preview.png" },
  ];

  // Configuration du carrousel
  const responsive = {
    desktop: { breakpoint: { max: 3000, min: 1024 }, items: 3, slidesToSlide: 1 },
    tablet: { breakpoint: { max: 1024, min: 768 }, items: 2, slidesToSlide: 1 },
    mobile: { breakpoint: { max: 768, min: 0 }, items: 1, slidesToSlide: 1 },
  };

  // Flèches personnalisées
  const CustomLeftArrow = ({ onClick }) => (
    <div className="custom-arrow left-arrow" onClick={onClick}>
      <FaArrowLeft size={24} />
    </div>
  );

  const CustomRightArrow = ({ onClick }) => (
    <div className="custom-arrow right-arrow" onClick={onClick}>
      <FaArrowRight size={24} />
    </div>
  );

  return (
    <>
      {/* Hero Section */}
      <div className="hero container">
        <div className="banner">
          <h1>Transforming Emergency Care with Smart & Efficient Solutions</h1>
          <p>
            Our Intelligent Emergency Department Management System is designed to revolutionize patient care by optimizing resource allocation, reducing waiting times, and enhancing real-time collaboration among healthcare professionals.
          </p>
          <a href="/emergency-services" className="emergency-btn">Go Emergency Services</a>

        </div>
        <div className="banner">
          <img src="/images/hero.png" alt="hero" className="animated-image" />
          <span>
            <img src="/images/Vector.png" alt="vector" />
          </span>
        </div>
      </div>

      {/* Biography Section */}
      <div className="container biography"> 
        <div className="banner">
          <img src="/images/about.png" alt="whoweare" className="bio-image" />
        </div>
        <div className="banner">
          <p className="bio-title">Biography</p>
          <h3>Who We Are</h3>
          <p>
            Emergency departments (ED) play a crucial role as the first point of contact for patients requiring urgent medical attention.
          </p>
          <p>We are all in 2025!</p>
          <p>We are working on a MERN STACK PROJECT.</p>
        </div>
      </div>

      {/* Services Section */}
      <div className="container services-section">
        <h2 className="text-center fw-bold">Our Services</h2>
        <p className="text-center text-muted">Discover how we can help you</p>

        <Carousel
          responsive={responsive}
          infinite={true}
          autoPlay={true}
          autoPlaySpeed={3000}
          customLeftArrow={<CustomLeftArrow />}
          customRightArrow={<CustomRightArrow />}
          className="services-carousel"
        >
          {servicesArray.map((service, index) => (
            <div key={index} className="service-card">
              <img src={service.imageUrl} alt={service.name} className="service-image" />
              <h4 className="service-name">{service.name}</h4>
            </div>
          ))}
        </Carousel>
      </div>
    </>
  );
};

export default Home;

================
File: src/components/Layout.jsx
================
// src/components/Layout.jsx
import React from 'react';
import { Outlet } from "react-router-dom";
import Header from "./header";
import Footer from "./footer";
import DashboardSidebar from "./DashboardSidebar";

export const HeaderFooterLayout = () => {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow">
        <Outlet />
      </main>
      <Footer />
    </div>
  );
};

export const DashboardLayout = () => {
  return (
    <div className="flex">
      <DashboardSidebar />
      <main className="flex-1">
        <Outlet />
      </main>
    </div>
  );
};

export const BasicLayout = () => {
  return (
    <main>
      <Outlet />
    </main>
  );
};

================
File: src/components/LoadingState.jsx
================
import React from 'react';

const LoadingState = () => {
    return (
        <div className="w-full h-screen flex flex-col items-center justify-center bg-white">
            <div className="flex flex-col items-center space-y-4">
                <div className="relative w-24 h-24">
                    <div className="absolute inset-0 rounded-full bg-gradient-to-r from-profileBlue-400 to-profileTeal-400 animate-pulse-slow"></div>
                    <div className="absolute inset-1 rounded-full bg-white"></div>
                    <div className="absolute inset-3 rounded-full bg-gradient-to-r from-profileBlue-400 to-profileTeal-400 animate-spin" style={{ animationDuration: '3s' }}></div>
                    <div className="absolute inset-5 rounded-full bg-white"></div>
                    <div className="absolute inset-7 rounded-full bg-gradient-to-r from-profileBlue-500 to-profileTeal-500 animate-pulse-slow" style={{ animationDelay: '0.5s' }}></div>
                </div>

                <div className="flex flex-col items-center">
                    <div className="h-2 w-32 bg-gray-200 rounded overflow-hidden">
                        <div className="h-full w-full bg-gradient-to-r from-profileBlue-400 to-profileTeal-400 animate-shimmer"></div>
                    </div>
                    <h3 className="text-profileBlue-600 font-medium mt-3">Loading your profile</h3>
                    <p className="text-gray-500 text-sm mt-1">Please wait a moment</p>
                </div>
            </div>
        </div>
    );
};

export default LoadingState;

================
File: src/components/login.jsx
================
import React, { useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import "bootstrap/dist/css/bootstrap.min.css";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const response = await axios.post(
        "http://localhost:8089/api/auth/login",
        { email, password },
        { withCredentials: true } // Ensures cookies are stored
      );
      const userData = response.data.user;
      userData.profilePicture = userData.gender === "male" ? "/images/male.jpg" : "/images/female.jpg";

      // Store user info in session storage (alternative to localStorage)
      sessionStorage.setItem("user", JSON.stringify(userData));

      setMessage(`Connexion réussie ! Bienvenue, ${userData.username}`);

      if (userData.role === "Patient") {
        navigate("/home");
      } else {
        navigate("/dashboard");
      }
    } catch (error) {
      setMessage(error.response?.data?.message || "Erreur lors de la connexion");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleLoginSuccess = async (response) => {
    try {
      const res = await axios.post("http://localhost:8089/api/auth/google-login", {
        token: response.credential,
      });

      localStorage.setItem("user", JSON.stringify(res.data.user));
      localStorage.setItem("token", res.data.token);

      setMessage("Connexion réussie avec Google !");
      navigate("/home");
    } catch (error) {
      setMessage("Erreur lors de l'authentification Google");
    }
  };

  const handleGoogleLoginFailure = () => {
    setMessage("Échec de l'authentification Google");
  };

  return (
    <div className="d-flex vh-100 bg-light ">
      <div className="col-md-6 d-flex flex-column align-items-center justify-content-center text-white"
        style={{ backgroundColor: "#6DDCCF" }}>
        <h1 className="mb-4">ED</h1>
        <img src="/images/image1.png" alt="Project Logo" className="mb-4 rounded shadow-lg img-fluid" style={{ maxWidth: "300px" }} />
        <h2 className="mb-2">Emergency departments </h2>
        <p className="text-center">providing healthcare to different patient categories</p>
      </div>

      <div className="col-md-6 d-flex flex-column justify-content-center p-5 bg-white shadow">
        <h2 className="mb-3">Sign In</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Email Address</label>
            <input type="email" className="form-control" value={email} onChange={(e) => setEmail(e.target.value)} required />
          </div>
          <div className="mb-3">
            <label className="form-label">Password</label>
            <input type="password" className="form-control" value={password} onChange={(e) => setPassword(e.target.value)} required />
          </div>
          <div className="d-flex justify-content-between mb-3">
            <div className="form-check">
              <input type="checkbox" className="form-check-input" id="rememberMe" />
              <label className="form-check-label" htmlFor="rememberMe">Remember Me</label>
            </div>
            <Link to="/forgotpassword" className="text-primary">Forgot Password?</Link>
          </div>
          <button
            type="submit"
            className="btn w-100"
            style={{ backgroundColor: "#6DDCCF", borderColor: "#6DDCCF", color: "white" }}
            disabled={isLoading}
          >
            {isLoading ? "Connexion en cours..." : "Se connecter"}
          </button>
        </form>

        <GoogleOAuthProvider clientId="681587327914-bh8qlfn9kr76hci8d4n0v1mces8ac0r0.apps.googleusercontent.com">
          <GoogleLogin
            onSuccess={handleGoogleLoginSuccess}
            onError={handleGoogleLoginFailure}
          />
        </GoogleOAuthProvider>

        {message && <div className={`alert ${message.includes("réussie") ? "alert-success" : "alert-danger"} mt-3`}>{message}</div>}

        <p className="text-center mt-3">
          Don't have an account? <Link to="/register" className="text-primary">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

================
File: src/components/Login/login.jsx
================
import React, { useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import "bootstrap/dist/css/bootstrap.min.css";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const response = await axios.post(
        "http://localhost:8089/api/auth/login",
        { email, password },
        { withCredentials: true } // Ensures cookies are stored
      );
      const userData = response.data.user;
      userData.profilePicture = userData.gender === "male" ? "/images/male.jpg" : "/images/female.jpg";

      // Store user info in session storage (alternative to localStorage)
      sessionStorage.setItem("user", JSON.stringify(userData));

      setMessage(`Connexion réussie ! Bienvenue, ${userData.username}`);

      if (userData.role === "Patient") {
        navigate("/home");
      } else {
        navigate("/dashboard");
      }
    } catch (error) {
      setMessage(error.response?.data?.message || "Erreur lors de la connexion");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleLoginSuccess = async (response) => {
    try {
      const res = await axios.post("http://localhost:8089/api/auth/google-login", {
        token: response.credential,
      });

      localStorage.setItem("user", JSON.stringify(res.data.user));
      localStorage.setItem("token", res.data.token);

      setMessage("Connexion réussie avec Google !");
      navigate("/home");
    } catch (error) {
      setMessage("Erreur lors de l'authentification Google");
    }
  };

  const handleGoogleLoginFailure = () => {
    setMessage("Échec de l'authentification Google");
  };

  return (
    <div className="d-flex vh-100 bg-light  ">
      <div className="col-md-6 d-flex flex-column align-items-center justify-content-center text-white"
        style={{ backgroundColor: "#6DDCCF" }}>
        <h1 className="mb-4">ED</h1>
        <img src="/images/image1.png" alt="Project Logo" className="mb-4 rounded shadow-lg img-fluid" style={{ maxWidth: "300px" }} />
        <h2 className="mb-2">Emergency departments </h2>
        <p className="text-center">providing healthcare to different patient categories</p>
      </div>

      <div className="col-md-6 d-flex flex-column justify-content-center p-5 bg-white shadow">
        <h2 className="mb-3">Sign In</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Email Address</label>
            <input type="email" className="form-control" value={email} onChange={(e) => setEmail(e.target.value)} required />
          </div>
          <div className="mb-3">
            <label className="form-label">Password</label>
            <input type="password" className="form-control" value={password} onChange={(e) => setPassword(e.target.value)} required />
          </div>
          <div className="d-flex justify-content-between mb-3">
            <div className="form-check">
              <input type="checkbox" className="form-check-input" id="rememberMe" />
              <label className="form-check-label" htmlFor="rememberMe">Remember Me</label>
            </div>
            <Link to="/forgotpassword" className="text-primary">Forgot Password?</Link>
          </div>
          <button
            type="submit"
            className="btn w-100"
            style={{ backgroundColor: "#6DDCCF", borderColor: "#6DDCCF", color: "white" }}
            disabled={isLoading}
          >
            {isLoading ? "Connexion en cours..." : "Se connecter"}
          </button>
        </form>

        <GoogleOAuthProvider clientId="681587327914-bh8qlfn9kr76hci8d4n0v1mces8ac0r0.apps.googleusercontent.com">
          <GoogleLogin
            onSuccess={handleGoogleLoginSuccess}
            onError={handleGoogleLoginFailure}
          />
        </GoogleOAuthProvider>

        {message && <div className={`alert ${message.includes("réussie") ? "alert-success" : "alert-danger"} mt-3`}>{message}</div>}

        <p className="text-center mt-3">
          Don't have an account? <Link to="/register" className="text-primary">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

================
File: src/components/profile.jsx
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie';
import ProfileHeader from './ProfileHeader';
import ProfileContent from './ProfileContent';
import LoadingState from './LoadingState';
import { toast } from 'sonner';

const Profile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('personal');
  const [profileData, setProfileData] = useState({
    personal: {},
    medical: {},
    professional: {}
  });
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = Cookies.get("token");

    axios.get('http://localhost:8089/api/profile', {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    .then(response => {
      setProfileData(response.data);
      setLoading(false);
    })
    .catch(error => {
      console.error('Error:', error);
      setError('Error loading profile');
      setLoading(false);
    });
  }, []);

  const handleSave = async () => {
    try {
      const token = Cookies.get("token");
      const response = await axios.put('http://localhost:8089/api/profile', profileData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      if (response.status === 200) {
        const updatedData = response.data;
        setProfileData(updatedData);
        setIsEditing(false);
        toast.success('Profile updated successfully');
      } else {
        throw new Error('Failed to update profile');
      }
    } catch (error) {
      console.error('Error:', error);
      setError('Error saving changes');
      toast.error('Failed to update profile');
    }
  };

  const handleEdit = (section, field, value) => {
    setProfileData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  if (loading) return <LoadingState />;
  if (error) {
    return (
      <div className="min-h-screen bg-slate-50 flex flex-col items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-lg p-6 max-w-md w-full">
          <div className="text-center">
            <div className="bg-red-100 text-red-600 p-3 rounded-full inline-flex mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            <h2 className="text-lg font-semibold text-gray-800 mb-2">Error Loading Profile</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <button 
              onClick={() => window.location.reload()}
              className="bg-[#42A5FF] hover:bg-[#1E88E5] text-white font-medium py-2 px-4 rounded transition-colors"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-50">
      <ProfileHeader 
        username={profileData.personal.username} 
        role={profileData.personal.role} 
        profileImage={profileData.personal.profileImage} // Passer l'image de profil
      />
      
      <div className="container -mt-16 relative z-30 pb-16">
        <ProfileContent
          profileData={profileData}
          activeTab={activeTab}
          setActiveTab={setActiveTab}
          isEditing={isEditing}
          setIsEditing={setIsEditing}
          handleEdit={handleEdit}
          handleSave={handleSave}
        />
      </div>
    </div>
  );
};

export default Profile;

================
File: src/components/ProfileAvatar.jsx
================
import React from 'react';
import { UserRound } from 'lucide-react';

const sizes = {
    sm: 'w-16 h-16',
    md: 'w-24 h-24',
    lg: 'w-32 h-32',
    xl: 'w-40 h-40'
};

const ProfileAvatar = ({ imageUrl, altText, size = 'lg' }) => {
    return (
        <div className={`profile-avatar ${sizes[size]} rounded-full overflow-hidden animate-fade-in`}>
            {imageUrl ? (
                <img
                    src={imageUrl}
                    alt={altText}
                    className="w-full h-full object-cover"
                    loading="lazy"
                />
            ) : (
                <div className="w-full h-full flex items-center justify-center bg-[#42A5FF]/20">
                    <UserRound
                        className="text-[#42A5FF]"
                        size={size === 'xl' ? 64 : size === 'lg' ? 48 : size === 'md' ? 36 : 24}
                    />
                </div>
            )}
        </div>
    );
};

export default ProfileAvatar;

================
File: src/components/ProfileContent.jsx
================
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import TabNavigation from './TabNavigation';
import EditableField from './EditableField';
import { PencilIcon, SaveIcon } from 'lucide-react';

const ProfileContent = ({
    profileData,
    activeTab,
    setActiveTab,
    isEditing,
    setIsEditing,
    handleEdit,
    handleSave
}) => {
    const getTabs = () => {
        const tabs = ['personal'];
        if (profileData.personal?.role === 'Patient') {
            tabs.push('medical');
        } else if (['Doctor', 'Nurse', 'Administrator'].includes(profileData.personal?.role)) {
            tabs.push('professional');
        }
        return tabs;
    };

    const renderFields = (section) => {
        const data = profileData[section] || {};

        // Skip certain fields that shouldn't be editable
        const skipFields = ['role', 'username'];

        // Get all the fields in the section
        const fields = Object.entries(data).filter(([field]) => !skipFields.includes(field));

        if (fields.length === 0) {
            return (
                <div className="col-span-2 text-center py-8 text-gray-500">
                    No information available in this section
                </div>
            );
        }

        const getFieldType = (field, value) => {
            if (field === 'allergies' || Array.isArray(value)) return 'array';
            if (field === 'dateOfBirth' || field.toLowerCase().includes('date')) return 'date';
            if (field.toLowerCase().includes('description') || field.toLowerCase().includes('notes')) return 'textarea';
            return 'text';
        };

        return fields.map(([field, value]) => {
            const fieldType = getFieldType(field, value);
            const label = field
                .replace(/([A-Z])/g, ' $1')
                .replace(/^./, (str) => str.toUpperCase())
                .trim();

            return (
                <div key={field} className="col-span-1">
                    <EditableField
                        label={label}
                        value={value}
                        field={field}
                        section={section}
                        isEditing={isEditing}
                        onChange={handleEdit}
                        type={fieldType}
                    />
                </div>
            );
        });
    };

    const tabs = getTabs();

    return (
        <motion.div
            className="profile-card animate-slide-up-fade"
            style={{ animationDelay: '0.3s' }}
        >
            <div className="px-6 py-4 flex justify-between items-center border-b">
                <TabNavigation
                    tabs={tabs}
                    activeTab={activeTab}
                    onTabChange={setActiveTab}
                />

                <motion.button
                    className={`profile-edit-button p-2 ${isEditing
                            ? 'bg-gradient-to-r from-[#42A5FF] to-[#1E88E5] text-white'
                            : 'bg-[#42A5FF]/10 text-[#42A5FF] hover:bg-[#42A5FF]/20'
                        }`}
                    onClick={() => isEditing ? handleSave() : setIsEditing(true)}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                >
                    <div className="flex items-center space-x-2 px-3 py-1">
                        {isEditing ? (
                            <>
                                <SaveIcon size={18} />
                                <span className="font-medium">Save Changes</span>
                            </>
                        ) : (
                            <>
                                <PencilIcon size={18} />
                                <span className="font-medium">Edit Profile</span>
                            </>
                        )}
                    </div>
                </motion.button>
            </div>

            <div className="p-6">
                <AnimatePresence mode="wait">
                    <motion.div
                        key={activeTab}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        transition={{ duration: 0.3 }}
                    >
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {renderFields(activeTab)}
                        </div>
                    </motion.div>
                </AnimatePresence>
            </div>
        </motion.div>
    );
};

export default ProfileContent;

================
File: src/components/ProfileHeader.jsx
================
import React from 'react';
import ProfileAvatar from './ProfileAvatar';
import { motion } from 'framer-motion';

const ProfileHeader = ({ username = 'User', role, profileImage }) => {
  return (
    <div className="relative h-72 overflow-hidden">
      {/* Gradient background */}
      <div className="absolute inset-0 bg-gradient-to-r from-[#42A5FF] to-[#1E88E5]"></div>
      
      {/* Decorative elements */}
      <div className="absolute inset-0">
        <motion.div 
          className="absolute top-[20%] left-[5%] h-32 w-32 rounded-full bg-white opacity-10"
          animate={{ 
            scale: [1, 1.2, 1],
            opacity: [0.1, 0.2, 0.1]
          }}
          transition={{ 
            duration: 8,
            repeat: Infinity,
            repeatType: "reverse" 
          }}
        />
        <motion.div 
          className="absolute bottom-[10%] right-[15%] h-24 w-24 rounded-full bg-white opacity-15"
          animate={{ 
            scale: [1, 1.3, 1],
            opacity: [0.15, 0.25, 0.15]
          }}
          transition={{ 
            duration: 6,
            repeat: Infinity,
            repeatType: "reverse",
            delay: 1 
          }}
        />
      </div>
      
      {/* Content */}
      <div className="profile-glass absolute inset-0 z-10"></div>
      <div className="container h-full relative z-20">
        <div className="h-full flex items-center pt-16"> {/* Ajout de `pt-16` pour déplacer vers le bas */}
          <div className="flex items-center space-x-6">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
                <ProfileAvatar 
                imageUrl={profileImage} 
                altText={username} 
                size="xl" 
              />
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.4 }}
              className="text-white"
            >
              <div className="text-sm font-medium text-blue-100 mb-1">Welcome,</div>
              <h1 className="text-4xl font-bold text-white">
                {username}
              </h1>
              {role && (
                <div className="mt-2 inline-block px-4 py-1 rounded-full bg-[#6DDDCF]  backdrop-blur-sm text-sm font-medium text-white">
                  {role}
                </div>
              )}
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileHeader;

================
File: src/components/ProtectedRoute.jsx
================
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children, allowedRoles }) => {
  const user = JSON.parse(sessionStorage.getItem("user"));

  // Si l'utilisateur n'est pas connecté
  if (!user) {
    return <Navigate to="/login" />;
  }

  // Si le rôle de l'utilisateur n'est pas autorisé
  if (!allowedRoles.includes(user.role)) {
    return <Navigate to="/home" />;
  }

  // L'utilisateur a le rôle autorisé, afficher les enfants
  return children;
};

export default ProtectedRoute;

================
File: src/components/register.jsx
================
import React, { useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import "../App.css";

const Register = () => {
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    phoneNumber: "",
    role: "Patient",
    name: "",
    dateOfBirth: "",
    gender: "",
    address: "",
    emergencyContact: "",
    bloodType: "",
    allergies: "",
    badgeNumber: "",
    specialization: "",
    licenseNumber: "",
    shift: "",
    profileImage: null,
  });

  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [otpSent, setOtpSent] = useState(false);
  const [otp, setOtp] = useState("");
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  const handleFileChange = (e) => {
    setFormData({ ...formData, profileImage: e.target.files[0] });
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    // Vérifier si les mots de passe correspondent
    if (formData.password !== formData.confirmPassword) {
      setMessage("Les mots de passe ne correspondent pas");
      setIsLoading(false);
      return;
    }
    

    try {
      // Envoyer les données d'inscription au backend
      const response = await axios.post(
        "http://localhost:8089/api/auth/register",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
          withCredentials: true, // Inclure les cookies
        }
      );

      // Si l'inscription réussit, afficher un message et activer l'OTP
      setMessage("Inscription réussie ! Veuillez vérifier votre email pour l'OTP.");
      setOtpSent(true);
    } catch (error) {
      // Gérer les erreurs
      console.error("Erreur lors de l'inscription:", error);
      setMessage(
        error.response?.data?.message || "Erreur lors de l'inscription"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleVerifyOtp = async () => {
    try {
      // Vérifier l'OTP
      await axios.post(
        "http://localhost:8089/api/auth/verify-otp",
        {
          email: formData.email,
          otp,
        },
        {
          withCredentials: true, // Inclure les cookies
        }
      );

      // Si l'OTP est vérifié, rediriger vers la page de connexion
      setMessage("OTP vérifié avec succès. Vous pouvez maintenant vous connecter.");
      navigate("/login");
    } catch (error) {
      // Gérer les erreurs de vérification de l'OTP
      setMessage(
        error.response?.data?.message || "Erreur lors de la vérification de l'OTP"
      );
    }
  };

  return (
    <div className="d-flex vh-100 bg-light">
      {/* Left Side */}
      <div
        className="col-md-6 d-flex flex-column align-items-center justify-content-center text-white"
        style={{ backgroundColor: "#6DDCCF" }}
      >
        <h1 className="mb-4">ED</h1>
        <img
          src="/images/image1.png"
          alt="Project Logo"
          className="mb-4 rounded shadow-lg img-fluid"
          style={{ maxWidth: "300px" }}
        />
        <h2 className="mb-2">Emergency department</h2>
        <p className="text-center">
          Providing healthcare to different patient categories
        </p>
        <div className="d-flex justify-content-center gap-2 mt-3">
          <button className="btn btn-outline-secondary rounded-circle">
            <i className="fab fa-facebook"></i>
          </button>
          <button className="btn btn-outline-secondary rounded-circle">
            <i className="fab fa-twitter"></i>
          </button>
          <button className="btn btn-outline-secondary rounded-circle">
            <i className="fab fa-instagram"></i>
          </button>
        </div>
      </div>

      {/* Right Side */}
      <div className="col-md-6 d-flex flex-column justify-content-center p-5 bg-white shadow">
        <h2 className="mb-3">Sign Up</h2>
        <p className="text-muted">
          Create your account by filling out the information below.
        </p>

        {!otpSent ? (
          <form onSubmit={handleSubmit}>
            <div className="row">
              <div className="col-md-6">
                <input
                  type="text"
                  name="username"
                  placeholder="Nom d'utilisateur"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="email"
                  name="email"
                  placeholder="Email"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="password"
                  name="password"
                  placeholder="Mot de passe"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="password"
                  name="confirmPassword"
                  placeholder="Confirmer mot de passe"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <input
                  type="text"
                  name="phoneNumber"
                  placeholder="Téléphone"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                />
                <select
                  name="role"
                  className="form-control mb-2"
                  onChange={handleChange}
                  required
                >
                  <option value="Patient">Patient</option>
                  <option value="Doctor">Médecin</option>
                  <option value="Nurse">Infirmier</option>
                  <option value="Administrator">Administrateur</option>
                </select>
              </div>
              <div className="col-md-6">
                {formData.role === "Patient" && (
                  <>
                    <input
                      type="text"
                      name="name"
                      placeholder="Nom complet"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="date"
                      name="dateOfBirth"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="gender"
                      placeholder="Genre"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="address"
                      placeholder="Adresse"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="emergencyContact"
                      placeholder="Contact d'urgence"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="bloodType"
                      placeholder="Groupe sanguin"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="allergies"
                      placeholder="Allergies (optionnel)"
                      className="form-control mb-2"
                      onChange={handleChange}
                    />
                  </>
                )}
                {formData.role === "Doctor" && (
                  <>
                    <input
                      type="text"
                      name="badgeNumber"
                      placeholder="Numéro de badge"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="specialization"
                      placeholder="Spécialisation"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="licenseNumber"
                      placeholder="Numéro de licence"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                  </>
                )}
                {formData.role === "Nurse" && (
                  <>
                    <input
                      type="text"
                      name="badgeNumber"
                      placeholder="Numéro de badge"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="shift"
                      placeholder="Horaire de travail"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                    <input
                      type="text"
                      name="licenseNumber"
                      placeholder="Numéro de licence"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                  </>
                )}
                {formData.role === "Administrator" && (
                  <>
                    <input
                      type="text"
                      name="badgeNumber"
                      placeholder="Numéro de badge"
                      className="form-control mb-2"
                      onChange={handleChange}
                      required
                    />
                  </>
                )}
              </div>
            </div>
{/* Ajouter le champ pour l'upload d'image */}
<div className="form-group">
              <label htmlFor="profileImage">Image de profil</label>
              <input
                type="file"
                name="profileImage"
                id="profileImage"
                className="form-control mb-2"
                onChange={handleFileChange}
              />
            </div>

            <button
              type="submit"
              className="btn btn-primary w-100 mt-3"
              style={{
                backgroundColor: "#6DDCCF",
                borderColor: "#6DDCCF",
                color: "white",
              }}
              disabled={isLoading}
            >
              {isLoading ? "Inscription..." : "S'inscrire"}
            </button>

            <div className="mt-3 text-center">
              <span>Déjà un compte ? </span>
              <Link to="/login" className="text-decoration-none">
                Se connecter
              </Link>
            </div>
          </form>
        ) : (
          <div>
            <input
              type="text"
              placeholder="Entrez l'OTP"
              className="form-control mb-2"
              value={otp}
              onChange={(e) => setOtp(e.target.value)}
            />
            <button
              className="btn btn-primary w-100"
              style={{
                backgroundColor: "#6DDCCF",
                borderColor: "#6DDCCF",
                color: "white",
              }}
              onClick={handleVerifyOtp}
            >
              Vérifier l'OTP
            </button>
          </div>
        )}

        {message && (
          <div
            className={`alert ${
              message.includes("réussie") ? "alert-success" : "alert-danger"
            } mt-3`}
          >
            {message}
          </div>
        )}
      </div>
    </div>
  );
};

export default Register;

================
File: src/components/ResetPassword.jsx
================
import React, { useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";

const ResetPassword = () => {
    const [newPassword, setNewPassword] = useState(""); // Changed from "password" to "newPassword"
    const [message, setMessage] = useState("");
    const [error, setError] = useState("");
    const navigate = useNavigate();
    const { token } = useParams(); // Capture the token from URL

    const handleSubmit = async (e) => {
        e.preventDefault();
        setMessage("");
        setError("");

        if (!newPassword) {
            setError("❌ New Password is required!");
            return;
        }

        try {
            const res = await axios.post(
                `http://localhost:8089/api/auth/reset-password/${token}`,
                { newPassword }, // Using the correct payload
                { withCredentials: true }
            );

            if (res.data.success) {
                setMessage("✅ Password successfully updated! Redirecting to login...");
                setTimeout(() => navigate("/login"), 3000);
            } else {
                setError("❌ Something went wrong. Please try again.");
            }
        } catch (err) {
            setError(err.response?.data?.message || "❌ Error resetting password.");
        }
    };

    return (
        <div className="d-flex justify-content-center align-items-center bg-secondary vh-100">
            <div className="bg-white p-4 rounded w-25 shadow">
                <h4 className="text-center">Reset Password</h4>
                {error && <p className="text-danger text-center">{error}</p>}
                {message && <p className="text-success text-center">{message}</p>}
                <form onSubmit={handleSubmit}>
                    <div className="mb-3">
                        <label htmlFor="newPassword">
                            <strong>New Password</strong>
                        </label>
                        <input
                            type="password"
                            placeholder="Enter new password"
                            autoComplete="off"
                            name="newPassword"
                            className="form-control rounded-0"
                            value={newPassword}
                            onChange={(e) => setNewPassword(e.target.value)}
                            required
                        />
                    </div>
                    <button type="submit" className="btn btn-success w-100 rounded-0" disabled={!newPassword}>
                        Update Password
                    </button>
                </form>
            </div>
        </div>
    );
};

export default ResetPassword;

================
File: src/components/staff/ResourceManagement.jsx
================
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Bed, Building2, Stethoscope, MonitorSmartphone, Plus, Pencil, Trash2 } from "lucide-react";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

const ResourceManagement = ({ resources, searchQuery, onSearchChange }) => {
  const { toast } = useToast();
  const [selectedResource, setSelectedResource] = useState(null);
  const [isEditing, setIsEditing] = useState(false);

  const getResourceIcon = (type) => {
    switch (type) {
      case "bed":
        return Bed;
      case "room":
        return Building2;
      case "machine":
        return MonitorSmartphone;
      case "equipment":
        return Stethoscope;
      default:
        return Stethoscope;
    }
  };

  const handleDelete = (resourceId) => {
    // In a real app, this would make an API call
    toast({
      title: "Resource Deleted",
      description: "The resource has been successfully deleted.",
    });
  };

  const handleAddOrUpdate = (isNew) => {
    // In a real app, this would make an API call
    toast({
      title: isNew ? "Resource Added" : "Resource Updated",
      description: `The resource has been successfully ${isNew ? 'added' : 'updated'}.`,
    });
    setSelectedResource(null);
    setIsEditing(false);
  };

  return (
    <Card className="glass-card col-span-2">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl">Hospital Resources</CardTitle>
          <Sheet>
            <SheetTrigger asChild>
              <Button size="sm" className="gap-2">
                <Plus className="h-4 w-4" />
                Add Resource
              </Button>
            </SheetTrigger>
            <SheetContent>
              <SheetHeader>
                <SheetTitle>
                  {isEditing ? "Edit Resource" : "Add New Resource"}
                </SheetTitle>
              </SheetHeader>
              <div className="space-y-4 mt-6">
                <Input placeholder="Resource Name" defaultValue={selectedResource?.name} />
                <Input
                  type="number"
                  placeholder="Total Quantity"
                  defaultValue={selectedResource?.total}
                />
                <Input
                  type="number"
                  placeholder="Available Quantity"
                  defaultValue={selectedResource?.available}
                />
                <select
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2"
                  defaultValue={selectedResource?.type}
                >
                  <option value="equipment">Equipment</option>
                  <option value="bed">Bed</option>
                  <option value="room">Room</option>
                  <option value="machine">Machine</option>
                </select>
                <Input placeholder="Location" defaultValue={selectedResource?.location} />
                <select
                  className="w-full h-10 rounded-md border border-input bg-background px-3 py-2"
                  defaultValue={selectedResource?.status}
                >
                  <option value="operational">Operational</option>
                  <option value="maintenance">Maintenance</option>
                  <option value="offline">Offline</option>
                </select>
                <Button
                  className="w-full"
                  onClick={() => handleAddOrUpdate(!isEditing)}
                >
                  {isEditing ? "Update Resource" : "Add Resource"}
                </Button>
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <div className="flex items-center justify-between mt-2">
          <div className="text-sm text-muted-foreground">
            Track and manage hospital resources
          </div>
          <div className="relative">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search resources..."
              value={searchQuery}
              onChange={(e) => onSearchChange(e.target.value)}
              className="pl-8 w-[300px]"
            />
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid gap-4 md:grid-cols-2">
          {resources.map((resource) => {
            const Icon = getResourceIcon(resource.type);
            const availabilityPercentage = (resource.available / resource.total) * 100;
            const availabilityColor =
              availabilityPercentage > 50 ? "bg-green-500" :
              availabilityPercentage > 20 ? "bg-yellow-500" : "bg-red-500";

            return (
              <div
                key={resource.id}
                className="p-4 border rounded-lg bg-white/50 hover-scale"
              >
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <Icon className="h-5 w-5 text-primary" />
                    <h3 className="font-semibold">{resource.name}</h3>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        setSelectedResource(resource);
                        setIsEditing(true);
                      }}
                    >
                      <Pencil className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDelete(resource.id)}
                    >
                      <Trash2 className="h-4 w-4 text-destructive" />
                    </Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Available:</span>
                    <span className="font-medium">{resource.available} / {resource.total}</span>
                  </div>
                  <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div
                      className={`h-full ${availabilityColor} transition-all duration-500`}
                      style={{ width: `${availabilityPercentage}%` }}
                    />
                  </div>
                  {resource.location && (
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">Location:</span>
                      <span>{resource.location}</span>
                    </div>
                  )}
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Status:</span>
                    <span className="capitalize">{resource.status}</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};

export default ResourceManagement;

================
File: src/components/staff/StaffDirectory.jsx
================
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, UserCircle, BadgeCheck, Mail, Phone } from "lucide-react";

const StaffDirectory = ({ staffMembers, searchQuery, onSearchChange }) => {
  const getStatusColor = (status) => {
    switch (status) {
      case "Active":
        return "text-green-500";
      case "Off Duty":
        return "text-yellow-500";
      case "On Leave":
        return "text-red-500";
      default:
        return "text-gray-500";
    }
  };

  return (
    <Card className="glass-card col-span-2">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle>Staff Directory</CardTitle>
          <div className="relative">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search staff..."
              value={searchQuery}
              onChange={(e) => onSearchChange(e.target.value)}
              className="pl-8 w-[300px]"
            />
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {staffMembers.map((staff) => (
            <div
              key={staff.id}
              className="flex items-center justify-between p-4 border rounded-lg bg-white/50 hover-scale"
            >
              <div className="flex items-center gap-4">
                <UserCircle className="h-10 w-10 text-primary" />
                <div>
                  <div className="flex items-center gap-2">
                    <h3 className="font-semibold">{staff.name}</h3>
                    <BadgeCheck className="h-4 w-4 text-blue-500" />
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {staff.role} - {staff.department}
                  </p>
                  <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
                    <span className="flex items-center gap-1">
                      <Mail className="h-3 w-3" />
                      {staff.contact.email}
                    </span>
                    <span className="flex items-center gap-1">
                      <Phone className="h-3 w-3" />
                      {staff.contact.phone}
                    </span>
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <span className={`font-medium ${getStatusColor(staff.status)}`}>
                  {staff.status}
                </span>
                <Button size="sm">View Profile</Button>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default StaffDirectory;

================
File: src/components/staff/StaffOverview.jsx
================
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

const StaffOverview = () => {
  return (
    <div className="grid gap-6 md:grid-cols-3">
      <Card className="glass-card hover-scale">
        <CardHeader>
          <CardTitle>Staff Overview</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div>Total Staff: 24</div>
            <div>Doctors: 8</div>
            <div>Nurses: 12</div>
            <div>Admin: 4</div>
          </div>
        </CardContent>
      </Card>

      <Card className="glass-card hover-scale">
        <CardHeader>
          <CardTitle>Departments</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div>Emergency: 6 staff</div>
            <div>ICU: 8 staff</div>
            <div>General: 5 staff</div>
            <div>Surgery: 5 staff</div>
          </div>
        </CardContent>
      </Card>

      <Card className="glass-card hover-scale">
        <CardHeader>
          <CardTitle>Current Shift</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div>On Duty: 12</div>
            <div>Off Duty: 8</div>
            <div>On Leave: 4</div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default StaffOverview;

================
File: src/components/TabNavigation.jsx
================
import React from 'react';
import { motion } from 'framer-motion';

const TabNavigation = ({
    tabs,
    activeTab,
    onTabChange
}) => {
    return (
        <div className="flex space-x-1 border-b">
            {tabs.map((tab) => {
                const isActive = activeTab === tab;

                return (
                    <button
                        key={tab}
                        onClick={() => onTabChange(tab)}
                        className={`profile-tab ${isActive ? 'profile-tab-active' : ''}`}
                    >
                        <span className="capitalize">
                            {tab.charAt(0).toUpperCase() + tab.slice(1)} Information
                        </span>

                        {isActive && (
                            <motion.div
                                className="absolute bottom-0 left-0 right-0 h-0.5 bg-profileBlue-400"
                                layoutId="activeTab"
                                initial={false}
                                transition={{
                                    type: "spring",
                                    stiffness: 500,
                                    damping: 30
                                }}
                            />
                        )}
                    </button>
                );
            })}
        </div>
    );
};

export default TabNavigation;

================
File: src/components/ui/accordion.jsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/alert-dialog.jsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/components/ui/alert.jsx
================
import * as React from "react"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/aspect-ratio.jsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: src/components/ui/avatar.jsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.jsx
================
import * as React from "react"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({ className, variant, ...props }) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/breadcrumb.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef(({ ...props }, ref) => (
  <nav ref={ref} aria-label="breadcrumb" {...props} />
))
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: src/components/ui/button.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(function Button(props, ref) {
  const { className, variant, size, asChild = false, ...rest } = props; // Utilisez 'props' comme premier argument et déstructurez-le ici
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...rest} // Passez les props restantes, pas 'props' directement
    />
  )
})
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/calendar.jsx
================
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

================
File: src/components/ui/card.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/carousel.jsx
================
import * as React from "react"
import useEmblaCarousel from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

const CarouselContext = React.createContext(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: src/components/ui/chart.jsx
================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" }

const ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartContext = React.createContext(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}


const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
                .map(([key, itemConfig]) => {
                  const color =
                    itemConfig.theme?.[theme] ||
                    itemConfig.color
                  return color ? `  --color-${key}: ${color};` : null
                })
                .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            }
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltipContent"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config,
  payload,
  key
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
      typeof payload.payload === "object" &&
      payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey = key

  if (
    key in payload &&
    typeof payload[key] === "string"
  ) {
    configLabelKey = payload[key]
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key] === "string"
  ) {
    configLabelKey = payloadPayload[
      key
    ]
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: src/components/ui/checkbox.jsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/collapsible.jsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: src/components/ui/command.jsx
================
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/context-menu.jsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: src/components/ui/dialog.jsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/drawer.jsx
================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: src/components/ui/dropdown-menu.jsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/form.jsx
================
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, FormProvider, useFormContext } from "react-hook-form";  // Importation correcte de react-hook-form
import { forwardRef, useContext } from "react";  // Importation correcte de useContext depuis React
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

// Fournir le contexte du formulaire
const Form = FormProvider;

// Créer un contexte pour le champ du formulaire
const FormFieldContext = React.createContext({});

// Le composant FormField avec un Provider pour le contexte
const FormField = (props) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

// Hook personnalisé pour utiliser le champ du formulaire
const useFormField = () => {
  const fieldContext = useContext(FormFieldContext);  // Utilisation de useContext depuis React
  const itemContext = useContext(FormItemContext);    // Utilisation de useContext depuis React
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

// Créer un contexte pour l'élément du formulaire
const FormItemContext = React.createContext({});

// Le composant FormItem avec un Provider pour l'ID unique
const FormItem = forwardRef(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

// Le composant FormLabel pour afficher l'étiquette du formulaire
const FormLabel = forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

// Le composant FormControl pour contrôler l'état du formulaire
const FormControl = forwardRef((props, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

// Le composant FormDescription pour afficher la description du formulaire
const FormDescription = forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

// Le composant FormMessage pour afficher les messages d'erreur du formulaire
const FormMessage = forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

// Exporter tous les composants et hooks nécessaires
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};

================
File: src/components/ui/hover-card.jsx
================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: src/components/ui/input-otp.jsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: src/components/ui/input.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
}
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.jsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/menubar.jsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: src/components/ui/navigation-menu.jsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/ui/pagination.jsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: src/components/ui/popover.jsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: src/components/ui/progress.jsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: src/components/ui/radio-group.jsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/resizable.jsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: src/components/ui/scroll-area.jsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
      "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
      "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.jsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
        "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.jsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/sheet.jsx
================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}

================
File: src/components/ui/sidebar.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

const SidebarContext = React.createContext(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              }
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              }
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          }
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: src/components/ui/skeleton.jsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.jsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/sonner.jsx
================
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({ ...props }) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: src/components/ui/switch.jsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/table.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/components/ui/tabs.jsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/textarea.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
}
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/ui/toast.jsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName


export {
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.jsx
================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/toggle-group.jsx
================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext(
  {
    size: "default",
    variant: "default",
  }
)

const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: src/components/ui/toggle.jsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: src/components/ui/tooltip.jsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/ui/use-toast.js
================
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };

================
File: src/hooks/use-mobile.jsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
    const [isMobile, setIsMobile] = React.useState(undefined)

    React.useEffect(() => {
        const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
        const onChange = () => {
            setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
        }
        mql.addEventListener("change", onChange)
        setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
        return () => mql.removeEventListener("change", onChange)
    }, [])

    return !!isMobile
}

================
File: src/hooks/use-toast.js
================
import * as React from "react"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

const actionTypes = {
    ADD_TOAST: "ADD_TOAST",
    UPDATE_TOAST: "UPDATE_TOAST",
    DISMISS_TOAST: "DISMISS_TOAST",
    REMOVE_TOAST: "REMOVE_TOAST",
}

let count = 0

function genId() {
    count = (count + 1) % Number.MAX_SAFE_INTEGER
    return count.toString()
}

const toastTimeouts = new Map()

const addToRemoveQueue = (toastId) => {
    if (toastTimeouts.has(toastId)) {
        return
    }

    const timeout = setTimeout(() => {
        toastTimeouts.delete(toastId)
        dispatch({
            type: "REMOVE_TOAST",
            toastId: toastId,
        })
    }, TOAST_REMOVE_DELAY)

    toastTimeouts.set(toastId, timeout)
}

export const reducer = (state, action) => {
    switch (action.type) {
        case "ADD_TOAST":
            return {
                ...state,
                toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
            }

        case "UPDATE_TOAST":
            return {
                ...state,
                toasts: state.toasts.map((t) =>
                    t.id === action.toast.id ? { ...t, ...action.toast } : t
                ),
            }

        case "DISMISS_TOAST": {
            const { toastId } = action

            if (toastId) {
                addToRemoveQueue(toastId)
            } else {
                state.toasts.forEach((toast) => {
                    addToRemoveQueue(toast.id)
                })
            }

            return {
                ...state,
                toasts: state.toasts.map((t) =>
                    t.id === toastId || toastId === undefined
                        ? {
                            ...t,
                            open: false,
                        }
                        : t
                ),
            }
        }
        case "REMOVE_TOAST":
            if (action.toastId === undefined) {
                return {
                    ...state,
                    toasts: [],
                }
            }
            return {
                ...state,
                toasts: state.toasts.filter((t) => t.id !== action.toastId),
            }
    }
}

const listeners = []

let memoryState = { toasts: [] }

function dispatch(action) {
    memoryState = reducer(memoryState, action)
    listeners.forEach((listener) => {
        listener(memoryState)
    })
}

function toast({ ...props }) {
    const id = genId()

    const update = (props) =>
        dispatch({
            type: "UPDATE_TOAST",
            toast: { ...props, id },
        })
    const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

    dispatch({
        type: "ADD_TOAST",
        toast: {
            ...props,
            id,
            open: true,
            onOpenChange: (open) => {
                if (!open) dismiss()
            },
        },
    })

    return {
        id: id,
        dismiss,
        update,
    }
}

function useToast() {
    const [state, setState] = React.useState(memoryState)

    React.useEffect(() => {
        listeners.push(setState)
        return () => {
            const index = listeners.indexOf(setState)
            if (index > -1) {
                listeners.splice(index, 1)
            }
        }
    }, [state])

    return {
        ...state,
        toast,
        dismiss: (toastId) => dispatch({ type: "DISMISS_TOAST", toastId }),
    }
}

export { useToast, toast }

================
File: src/index.css
================
@tailwind base;
@tailwind components;

@layer base {
  :root {
    --background: 210 40% 98%;
    --foreground: 222 47% 11%;
    --card: 0 0% 100%;
    --card-foreground: 222 47% 11%;
    --popover: 0 0% 100%;
    --popover-foreground: 222 47% 11%;
    --primary: 208 99% 45%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222 47% 11%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 90%;
    --accent-foreground: 222 47% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 208 99% 45%;
    --radius: 0.75rem;

    /* Sidebar specific colors */
    --sidebar-background: 198 100% 23%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 0 0% 100%;
    --sidebar-primary-foreground: 222 47% 11%;
    --sidebar-accent: 198 100% 23%;
    --sidebar-accent-foreground: 217 91% 60%;
    --sidebar-border: 214 100% 75%;
    --sidebar-ring: 210 40% 98%;
  }

  .dark {
    --background: 217 32% 17%;
    --foreground: 210 40% 98%;
    --card: 222 47% 11%;
    --card-foreground: 210 40% 98%;
    --popover: 222 47% 11%;
    --popover-foreground: 210 40% 98%;
    --primary: 208 99% 45%;
    --primary-foreground: 210 40% 98%;
    --secondary: 217 32% 17%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217 32% 17%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217 32% 17%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217 32% 17%;
    --input: 217 32% 17%;
    --ring: 208 99% 45%;

    /* Sidebar specific colors for dark mode */
    --sidebar-background: 217 91% 40%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 0 0% 100%;
    --sidebar-primary-foreground: 222 47% 11%;
    --sidebar-accent: 210 40% 98%;
    --sidebar-accent-foreground: 217 91% 40%;
    --sidebar-border: 214 100% 25%;
    --sidebar-ring: 210 40% 98%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

.fade-in {
  animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.glass-card {
  @apply bg-white/90 backdrop-blur-sm border border-white/20 shadow-xl;
}

.hover-scale {
  @apply transition-transform duration-200 hover:scale-[1.02];
}
@layer components {
  .profile-glass {
    @apply bg-white bg-opacity-10 backdrop-filter backdrop-blur-lg border border-white border-opacity-20;
  }
  
  .profile-card {
    @apply bg-white rounded-2xl shadow-lg overflow-hidden transition-all duration-300;
  }

  .profile-field-container {
    @apply bg-profileBlue-50 rounded-lg p-4 transition-all duration-300 hover:shadow-md;
  }

  .profile-field-label {
    @apply text-sm font-medium text-profileBlue-600 mb-1;
  }
  
  .profile-field-value {
    @apply text-gray-800 font-normal;
  }

  .profile-tab {
    @apply relative px-4 py-2 font-medium transition-all duration-300 ease-in-out text-gray-600 hover:text-profileBlue-600;
  }

  .profile-tab-active {
    @apply text-profileBlue-600;
  }

  .profile-tab-active::after {
    content: '';
    @apply absolute bottom-0 left-0 w-full h-0.5 bg-profileBlue-400 rounded-t-full;
  }

  .profile-avatar {
    @apply relative rounded-full border-4 border-white shadow-lg overflow-hidden transition-all duration-300 transform hover:scale-105;
  }

  .profile-edit-button {
    @apply rounded-full flex items-center justify-center transition-all duration-300 ease-in-out;
  }
}
@layer utilities {
  .glass-card {
    @apply bg-white/90 backdrop-blur-sm border border-white/20 shadow-xl;
  }
  .hover-scale {
    @apply transition-transform duration-200 hover:scale-[1.02];
  }
}
@tailwind utilities;

================
File: src/index.jsx
================
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

================
File: src/Layouts/DashboardLayout.jsx
================
import DashboardSidebar from "../components/DashboardSidebar";
import { SidebarProvider } from '../components/ui/sidebar';

export default function DashboardLayout({ children }) {
    return (
        <SidebarProvider>
            <div className="dashboard-container" style={{ display: 'flex',width:'1500px'}}>
                <DashboardSidebar />
                <div className="dashboard-content" style={{ flex: 1, padding: '20px' }}>
                    {children} {/* C’est ici que la page (Dashboard, Doctors, etc.) va s'afficher */}
                </div>
            </div>
        </SidebarProvider>
    );
}

================
File: src/Layouts/MainLayout.jsx
================
import Header from "../components/header";
import Footer from "../components/footer";

export default function MainLayout({ children }) {
  return (
    <>
      <Header />
      <main>{children}</main>
      <Footer />
    </>
  );
}

================
File: src/Layouts/PublicLayout.jsx
================
export default function PublicLayout({ children }) {
    return <div className="public-layout">{children}</div>;
  }

================
File: src/lib/utils.jsx
================
import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
    return twMerge(clsx(inputs))
}

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/main.jsx
================
import { createRoot } from 'react-dom/client';
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from './App.jsx';
ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

================
File: src/pages/Alerts.jsx
================
const Alerts = () => {
    return (
        <div className="space-y-6">
            <h1 className="text-3xl font-bold">Alerts & Notifications</h1>
            {/* Alerts content will go here */}
        </div>
    );
};

export default Alerts;

================
File: src/pages/Calendar.jsx
================
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar as CalendarIcon, Clock, User } from "lucide-react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import axios from "axios";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";

const CalendarComponent = () => {
    const [selectedDate, setSelectedDate] = useState(new Date());
    const [emergencyRegistrations, setEmergencyRegistrations] = useState([]);
    const [loadingRegistrations, setLoadingRegistrations] = useState(true);

    useEffect(() => {
        const fetchEmergencyRegistrations = async () => {
            setLoadingRegistrations(true);
            try {
                const response = await axios.get("http://localhost:8089/api/emergency-patients", {
                    withCredentials: true,
                });

                console.log("Raw Response Data:", response.data);

                const formattedRegistrations = response.data.map(reg => {
                    let appointmentDate = reg.createdAt ? new Date(reg.createdAt) : null;

                    // Vérifier que la date est valide
                    if (isNaN(appointmentDate.getTime())) {
                        console.warn("Date invalide détectée pour:", reg);
                        appointmentDate = new Date(); // Fallback à aujourd'hui
                    }

                    return {
                        id: reg._id,
                        patientName: `${reg.firstName} ${reg.lastName} (Urgence - Statut: ${reg.status})`,
                        doctorName: "Urgence",
                        date: appointmentDate, // Utiliser createdAt comme date de l'événement
                        time: appointmentDate.toLocaleTimeString(),
                        type: `Demande d'Urgence - Statut: ${reg.status}`,
                        isEmergency: true,
                        originalData: reg,
                        status: reg.status
                    };
                });

                console.log("Formatted Registrations:", formattedRegistrations);
                setEmergencyRegistrations(formattedRegistrations);
            } catch (error) {
                console.error("Erreur lors de la récupération des enregistrements d'urgence:", error);
                toast.error("Erreur lors du chargement des demandes d'urgence.");
            } finally {
                setLoadingRegistrations(false);
            }
        };

        fetchEmergencyRegistrations();
    }, []);

    useEffect(() => {
        console.log("Emergency Registrations State:", emergencyRegistrations);
    }, [emergencyRegistrations]);

    const handleDateChange = (date) => {
        setSelectedDate(date);
    };

    // Removed date filtering to display all registrations
    const getAppointmentsForSelectedDate = () => {
        return emergencyRegistrations; // Return all registrations without filtering
    };

    const handleStatusChange = async (appointmentId, newStatus) => {
        try {
            const response = await axios.put(
                `http://localhost:8089/api/emergency-patients/${appointmentId}/status`,
                { status: newStatus },
                { withCredentials: true }
            );

            console.log("Status updated:", response.data);
            setEmergencyRegistrations(prevRegistrations =>
                prevRegistrations.map(reg =>
                    reg.id === appointmentId
                        ? { ...reg, status: newStatus, type: `Demande d'Urgence - Statut: ${newStatus}` }
                        : reg
                )
            );

            toast.success("Statut mis à jour avec succès!");
        } catch (error) {
            console.error("Erreur lors de la mise à jour du statut:", error);
            toast.error("Erreur lors de la mise à jour du statut.");
        }
    };

    return (
        <div className="space-y-6">
            <div className="grid gap-6 md:grid-cols-[300px_1fr]">
                <Card className="glass-card">
                    <CardHeader>
                        <CardTitle>Calendar</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="calendar-widget">
                            <Calendar onChange={handleDateChange} value={selectedDate} />
                        </div>
                    </CardContent>
                </Card>

                <Card className="glass-card">
                    <CardHeader>
                        <CardTitle>Demandes d'Urgence Enregistrées</CardTitle>
                    </CardHeader>
                    <CardContent>
                        {loadingRegistrations ? (
                            <p className="text-center text-gray-500">Chargement des demandes d'urgence...</p>
                        ) : (
                            <div className="space-y-4">
                                {emergencyRegistrations.map((appointment) => ( // Displaying all registrations
                                    <div
                                        key={appointment.id}
                                        className={`flex items-center justify-between p-4 border rounded-lg bg-white/50 hover-scale ${appointment.isEmergency ? 'border-red-500' : ''}`}
                                    >
                                        <div className="space-y-1">
                                            <div className="flex items-center gap-2">
                                                <User className="h-4 w-4" />
                                                <span className="font-medium">{appointment.patientName}</span>
                                            </div>
                                            <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                                <CalendarIcon className="h-4 w-4" />
                                                <span>{appointment.date.toLocaleDateString()}</span>
                                                <Clock className="h-4 w-4 ml-2" />
                                                <span>{appointment.time}</span>
                                            </div>
                                        </div>
                                        <div className="flex items-center gap-4">
                                            <span className="text-sm">{appointment.type}</span>

                                            <Select
                                                onValueChange={(value) => handleStatusChange(appointment.id, value)}
                                                defaultValue={appointment.status}
                                            >
                                                <SelectTrigger className="w-[180px]">
                                                    <SelectValue placeholder="Statut" />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="Demande Enregistrée">Demande Enregistrée</SelectItem>
                                                    <SelectItem value="En Cours d'Examen">En Cours d'Examen</SelectItem>
                                                    <SelectItem value="Médecin En Route">Médecin En Route</SelectItem>
                                                    <SelectItem value="Traité">Traité</SelectItem>
                                                    <SelectItem value="Annulé">Annulé</SelectItem>
                                                </SelectContent>
                                            </Select>

                                            <Button size="sm" variant="outline">
                                                Détails
                                            </Button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
};

export default CalendarComponent;

================
File: src/pages/ConfirmationEmergencyRegister.jsx
================
// src/pages/ConfirmationEmergencyRegister.jsx
import React from 'react';
import { useLocation, Link, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { AlertCircle, CheckCircle, Clock } from "lucide-react";

const ConfirmationEmergencyRegister = () => {
    const location = useLocation();
    const formData = location.state?.formData;
    const patientId = location.state?.patientId;
    const navigate = useNavigate();

    if (!formData || !patientId) {
        return (
            <div className="container mx-auto py-12 px-4 md:px-6 text-center">
                <Card className="max-w-md mx-auto">
                    <CardHeader>
                        <CardTitle>Erreur de Confirmation</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p>Les informations de confirmation n'ont pas été trouvées. Veuillez réessayer de soumettre le formulaire d'urgence.</p>
                        <Button asChild>
                            <Link to="/emergency-register">Retour au Formulaire</Link>
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    const handleTrackStatusClick = () => {
        navigate('/emergency-status', { state: { patientId: patientId } });
    };

    return (
        <div className="container mx-auto py-12 px-4 md:px-6">
            <Card className="max-w-2xl mx-auto">
                <CardHeader className="flex flex-col space-y-1">
                    <CardTitle className="text-2xl font-bold">
                        <CheckCircle className="mr-2 inline-block h-6 w-6 text-green-500 align-top" />
                        Demande d'Urgence Enregistrée !
                    </CardTitle>
                    <CardDescription>
                        Votre demande a été soumise avec succès. Voici un résumé des informations que vous avez fournies :
                    </CardDescription>
                </CardHeader>
                <CardContent className="grid gap-4">
                    <div className="border rounded-md p-4">
                        <h4 className="font-semibold mb-2">Informations Personnelles</h4>
                        <p>Nom: {formData.firstName} {formData.lastName}</p>
                        <p>Date de Naissance: {formData.dateOfBirth}</p>
                        <p>Genre: {formData.gender}</p>
                        <p>Téléphone: {formData.phoneNumber}</p>
                        {formData.email && <p>Email: {formData.email}</p>}
                        <p>Adresse: {formData.address}</p>
                        <p>Contact d'Urgence: {formData.emergencyContact}</p>
                    </div>

                    <div className="border rounded-md p-4">
                        <h4 className="font-semibold mb-2">Informations Médicales</h4>
                        {formData.insuranceInfo && <p>Information d'Assurance: {formData.insuranceInfo}</p>}
                        {formData.allergies && <p>Allergies: {formData.allergies}</p>}
                        {formData.currentMedications && <p>Médications Actuelles: {formData.currentMedications}</p>}
                        {formData.medicalHistory && <p>Historique Médical: {formData.medicalHistory}</p>}
                        <p>Symptômes Actuels: {formData.currentSymptoms}</p>
                        <p>Niveau de Douleur: {formData.painLevel}</p>
                        <p>Niveau d'Urgence: {formData.emergencyLevel}</p>
                    </div>

                    <div className="border rounded-md p-4 bg-blue-50">
                        <h4 className="font-semibold mb-2 flex items-center"><AlertCircle className="mr-2 h-4 w-4 text-blue-600 align-baseline" /> Prochaines Étapes Importantes</h4>
                        <p className="mb-2">
                            <strong className="flex items-center"><Clock className="mr-2 inline-block h-4 w-4 text-blue-600 align-baseline" /> Restez Disponible :</strong> Une équipe médicale va examiner votre demande sous peu et vous contactera au numéro de téléphone que vous avez fourni. Veuillez rester joignable.
                        </p>
                        <p className="mb-2">
                            <strong>Préparation (si possible) :</strong> Rassemblez votre carte d'assurance, une liste de vos médicaments actuels et tout document médical pertinent qui pourrait aider l'équipe médicale.
                        </p>
                        <p>
                            <strong>Ne Quittez Pas Votre Domicile (sauf indication contraire) :</strong> Sauf indication contraire de notre part, veuillez rester à votre adresse pour faciliter l'intervention des secours ou de l'ambulance si nécessaire.
                        </p>
                    </div>

                    <div className="flex justify-between">
                        <Button asChild variant="secondary">
                            <Link to="/home">Retour à l'Accueil</Link>
                        </Button>
                        <Button variant="outline" onClick={handleTrackStatusClick}>
                            Suivre le Statut de ma Demande
                        </Button>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

export default ConfirmationEmergencyRegister;

================
File: src/pages/Dashboard.jsx
================
import { Card } from "@/components/ui/card";
import { Users, Calendar, Bell, Hospital, UserPlus, Pencil, UserMinus } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useState, useEffect } from "react";
import { BarChart, Bar, PieChart, Pie, Cell, ResponsiveContainer, XAxis, YAxis, Tooltip } from "recharts";
import axios from "axios";
import "../App.css";

// Données statiques pour fallback
const initialPatients = [
    {
        _id: "1",
        username: "johndoe",
        email: "john@example.com",
        phoneNumber: "1234567890",
        name: "John Doe",
        dateOfBirth: "1990-01-01",
        gender: "Male",
        address: "123 Main St, City, Country",
        emergencyContact: "9876543210",
        bloodType: "O+",
        allergies: []
    }
];

const departmentData = [
    { name: "Cardiology", patients: 45 },
    { name: "Neurology", patients: 30 },
    { name: "Pediatrics", patients: 25 },
    { name: "Oncology", patients: 20 },
];

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"];

const Dashboard = () => {
    const [patients, setPatients] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [patientsCount, setPatientsCount] = useState(0);
    const [editingPatient, setEditingPatient] = useState(null);

    useEffect(() => {
        const fetchPatients = async () => {
            try {
                const response = await axios.get("http://localhost:8089/api/users/patients", {
                    withCredentials: true,
                });
                setPatients(response.data);
            } catch (err) {
                console.error("Erreur lors de la récupération des patients:", err);
                setPatients(initialPatients); // Fallback vers les données statiques
                setError("Impossible de récupérer les patients. Affichage des données locales.");
            } finally {
                setLoading(false);
            }
        };
        fetchPatients();
    }, []);

    useEffect(() => {
        const fetchPatientsCount = async () => {
            try {
                const response = await axios.get("http://localhost:8089/api/users/patients/count", {
                    withCredentials: true,
                });
                setPatientsCount(response.data.count);
            } catch (err) {
                console.error("Erreur lors de la récupération du nombre de patients", err);
            }
        };
        fetchPatientsCount();
    }, []);

    const handleDelete = async (id) => {
        try {
            await axios.delete(`http://localhost:8089/api/users/patients/${id}`, {
                withCredentials: true,
            });
            setPatients(patients.filter(patient => patient._id !== id));
        } catch (error) {
            console.error("Erreur lors de la suppression du patient:", error);
        }
    };

    const handleEdit = (patient) => {
        setEditingPatient({ ...patient });
    };

    const handleUpdate = async () => {
        if (editingPatient) {
            try {
                await axios.put(`http://localhost:8089/api/users/patients/${editingPatient._id}`, editingPatient, {
                    withCredentials: true,
                });
                setPatients(patients.map(p => p._id === editingPatient._id ? editingPatient : p));
                setEditingPatient(null);
            } catch (error) {
                console.error("Erreur lors de la mise à jour du patient:", error);
            }
        }
    };

    const statsCards = [
        { title: "Total Patients", value: patientsCount.toLocaleString(), icon: Users, color: "text-blue-600", bg: "bg-blue-100" },
        { title: "Appointments Today", value: "48", icon: Calendar, color: "text-blue-700", bg: "bg-blue-50" },
        { title: "Emergency Cases", value: "7", icon: Hospital, color: "text-red-500", bg: "bg-red-50" },
        { title: "Pending Alerts", value: "12", icon: Bell, color: "text-blue-500", bg: "bg-blue-50" },
    ];

    return (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold text-blue-900">Dashboard</h1>
                <div className="text-sm text-muted-foreground">
                    {new Date().toLocaleDateString("en-US", {
                        weekday: "long",
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                    })}
                </div>
            </div>

            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
                {statsCards.map((stat) => (
                    <Card key={stat.title} className="p-6 hover-scale">
                        <div className="flex items-center gap-4">
                            <div className={`${stat.color} ${stat.bg} p-3 rounded-lg`}>
                                <stat.icon className="w-8 h-8" />
                            </div>
                            <div>
                                <p className="text-sm text-muted-foreground">{stat.title}</p>
                                <h3 className="text-2xl font-bold text-blue-900">{stat.value}</h3>
                            </div>
                        </div>
                    </Card>
                ))}
            </div>

            <div className="grid gap-6 md:grid-cols-2">
                <Card className="p-6">
                    <h2 className="text-xl font-semibold mb-4 text-blue-900">Department Statistics</h2>
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={departmentData}>
                            <XAxis dataKey="name" />
                            <YAxis />
                            <Tooltip />
                            <Bar dataKey="patients" fill="#0088FE" />
                        </BarChart>
                    </ResponsiveContainer>
                </Card>

                <Card className="p-6">
                    <h2 className="text-xl font-semibold mb-4 text-blue-900">Patient Distribution</h2>
                    <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                            <Pie data={departmentData} dataKey="patients" nameKey="name" cx="50%" cy="50%" outerRadius={100}>
                                {departmentData.map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                ))}
                            </Pie>
                            <Tooltip />
                        </PieChart>
                    </ResponsiveContainer>
                </Card>
            </div>

            <Card className="p-6">
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-xl font-semibold text-blue-900">Patient List</h2>
                </div>

                {loading ? (
                    <p className="text-center text-gray-500">Chargement des patients...</p>
                ) : error ? (
                    <p className="text-center text-red-500">{error}</p>
                ) : (
                    <div className="space-y-4">
                        {patients && patients.length > 0 ? (
                            patients.map((patient) => (
                                <div key={patient._id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                                    {editingPatient?._id === patient._id ? (
                                        <div className="flex-1 flex gap-4">
                                            <Input
                                                value={editingPatient.name}
                                                onChange={(e) => setEditingPatient({ ...editingPatient, name: e.target.value })}
                                            />
                                            <Input
                                                value={editingPatient.email}
                                                onChange={(e) => setEditingPatient({ ...editingPatient, email: e.target.value })}
                                            />
                                            <Input
                                                value={editingPatient.bloodType}
                                                onChange={(e) => setEditingPatient({ ...editingPatient, bloodType: e.target.value })}
                                            />
                                            <Button onClick={handleUpdate}>Save</Button>
                                        </div>
                                    ) : (
                                        <>
                                            <div>
                                                <h3 className="font-semibold">{patient.name}</h3>
                                                <p className="text-sm text-muted-foreground">{patient.email}</p>
                                                <p className="text-sm text-blue-600">{patient.bloodType}</p>
                                            </div>
                                            <div className="flex gap-2">
                                                <Button variant="outline" size="icon" onClick={() => handleEdit(patient)}>
                                                    <Pencil className="h-4 w-4" />
                                                </Button>
                                                <Button variant="outline" size="icon" onClick={() => handleDelete(patient._id)}>
                                                    <UserMinus className="h-4 w-4" />
                                                </Button>
                                            </div>
                                        </>
                                    )}
                                </div>
                            ))
                        ) : (
                            <p className="text-center text-gray-500">Aucun patient disponible.</p>
                        )}
                    </div>
                )}
            </Card>
        </div>
    );
};

export default Dashboard;

================
File: src/pages/Doctors.jsx
================
import { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
    Sheet,
    SheetContent,
    SheetHeader,
    SheetTitle,
    SheetTrigger,
} from "@/components/ui/sheet";
import {
    UserPlus,
    MessageCircle,
    Search,
    Filter,
    Pencil,
    Trash2,
    Calendar,
    Mail,
    Phone,
} from "lucide-react";
import axios from 'axios';

const Doctors = () => {
    const [doctors, setDoctors] = useState([]);
    const [searchQuery, setSearchQuery] = useState("");
    const [editingDoctor, setEditingDoctor] = useState(null);
    const [newDoctor, setNewDoctor] = useState({
        username: "",
        email: "",
        password: "",
        phoneNumber: "",
        specialization: "",
        licenseNumber: "",
        badgeNumber: "",
    });

    const fetchDoctors = async () => {
        try {
            const token = localStorage.getItem('authToken');
            const response = await axios.get('http://localhost:8089/api/users/doctors', { withCredentials: true });
            setDoctors(response.data);
        } catch (error) {
            console.error("Error fetching doctors:", error);
            if (error.response) {
                console.error("Server responded with status code:", error.response.status);
                console.error("Response data:", error.response.data);
            } else if (error.request) {
                console.error("No response received from server:", error.request);
            } else {
                console.error("Error setting up the request:", error.message);
            }
        }
    };

    useEffect(() => {
        fetchDoctors();
    }, []);

    const handleSearch = (query) => {
        setSearchQuery(query);
        if (!query.trim()) {
            fetchDoctors();
            return;
        }
        const filtered = doctors.filter(
            (doctor) =>
                doctor.username.toLowerCase().includes(query.toLowerCase()) ||
                doctor.specialization?.toLowerCase().includes(query.toLowerCase())
        );
        setDoctors(filtered);
    };

    const handleDelete = async (id) => {
        try {
            const token = localStorage.getItem('authToken');
            await axios.delete(`/api/users/${id}`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                },
            });
            fetchDoctors();
        } catch (error) {
            console.error("Error deleting doctor:", error);
        }
    };

    const handleAdd = async () => {
        try {
            const token = localStorage.getItem('authToken');
            const response = await axios.post("/api/auth/register", {
                ...newDoctor,
                role: "Doctor",
                isValidated: true
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
            });

            fetchDoctors();
            setNewDoctor({
                username: "",
                email: "",
                password: "",
                phoneNumber: "",
                specialization: "",
                licenseNumber: "",
                badgeNumber: "",
            });
        } catch (error) {
            console.error("Error adding doctor:", error);
            if (error.response) {
                console.error("Server responded with status code:", error.response.status);
                console.error("Response data:", error.response.data);
            } else if (error.request) {
                console.error("No response received from server:", error.request);
            } else {
                console.error("Error setting up the request:", error.message);
            }
        }
    };

    const handleUpdate = async () => {
        if (editingDoctor) {
            try {
                const token = localStorage.getItem('authToken');
                const response = await axios.put(`/api/users/${editingDoctor._id}`, editingDoctor, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`,
                    },
                });

                fetchDoctors();
                setEditingDoctor(null);
            } catch (error) {
                console.error("Error updating doctor:", error);
                if (error.response) {
                    console.error("Server responded with status code:", error.response.status);
                    console.error("Response data:", error.response.data);
                } else if (error.request) {
                    console.error("No response received from server:", error.request);
                } else {
                    console.error("Error setting up the request:", error.message);
                }
            }
        }
    };

    return (
        <div className="space-y-6 p-6">
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Doctors Dashboard</h1>
                <Sheet>
                    <SheetTrigger asChild>
                        <Button>
                            <UserPlus className="w-4 h-4 mr-2 " />
                            Add Doctor
                        </Button>
                    </SheetTrigger>
                    <SheetContent>
                        <SheetHeader>
                            <SheetTitle>Add New Doctor</SheetTitle>
                        </SheetHeader>
                        <div className="space-y-4 mt-6">
                            <Input
                                placeholder="Username"
                                value={newDoctor.username}
                                onChange={(e) =>
                                    setNewDoctor({ ...newDoctor, username: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Email"
                                type="email"
                                value={newDoctor.email}
                                onChange={(e) =>
                                    setNewDoctor({ ...newDoctor, email: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Password"
                                type="password"
                                value={newDoctor.password}
                                onChange={(e) =>
                                    setNewDoctor({ ...newDoctor, password: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Phone Number"
                                value={newDoctor.phoneNumber}
                                onChange={(e) =>
                                    setNewDoctor({ ...newDoctor, phoneNumber: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Specialization"
                                value={newDoctor.specialization}
                                onChange={(e) =>
                                    setNewDoctor({ ...newDoctor, specialization: e.target.value })
                                }
                            />
                            <Input
                                placeholder="License Number"
                                value={newDoctor.licenseNumber}
                                onChange={(e) =>
                                    setNewDoctor({ ...newDoctor, licenseNumber: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Badge Number"
                                value={newDoctor.badgeNumber}
                                onChange={(e) =>
                                    setNewDoctor({ ...newDoctor, badgeNumber: e.target.value })
                                }
                            />
                            <Button onClick={handleAdd} className="w-full">
                                Add Doctor
                            </Button>
                        </div>
                    </SheetContent>
                </Sheet>
            </div>

            <div className="flex gap-4 mb-6">
                <div className="flex-1">
                    <div className="relative">
                        <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                        <Input
                            placeholder="Search doctors..."
                            className="pl-10"
                            value={searchQuery}
                            onChange={(e) => handleSearch(e.target.value)}
                        />
                    </div>
                </div>
                <Button variant="outline">
                    <Filter className="w-4 h-4 mr-2" />
                    Filter
                </Button>
            </div>

            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {doctors.map((doctor) => (
                    <Card key={doctor._id} className="hover:shadow-lg transition-shadow">
                        <CardContent className="p-6">
                            <div className="flex justify-between items-start">
                                <div className="flex items-center gap-4">
                                    <img
                                        src={`http://localhost:8089${doctor.profileImage}`}
                                        alt={doctor.username}
                                        className="w-16 h-16 rounded-full"
                                    />
                                    <div>
                                        <h2 className="text-xl font-semibold">{doctor.username}</h2>
                                        <p className="text-muted-foreground">{doctor.specialization}</p>
                                    </div>
                                </div>
                                <div className="flex gap-2">
                                    <Button
                                        variant="outline"
                                        size="icon"
                                        onClick={() => setEditingDoctor(doctor)}
                                    >
                                        <Pencil className="h-4 w-4" />
                                    </Button>
                                    <Button
                                        variant="outline"
                                        size="icon"
                                        onClick={() => handleDelete(doctor._id)}
                                    >
                                        <Trash2 className="h-4 w-4" />
                                    </Button>
                                </div>
                            </div>

                            <div className="mt-4 space-y-2">
                                <div className="flex items-center gap-2 text-sm">
                                    <span className="font-semibold">Badge:</span>
                                    <span>{doctor.badgeNumber || "N/A"}</span>
                                </div>
                                <div className="flex items-center gap-2 text-sm">
                                    <span className="font-semibold">License:</span>
                                    <span>{doctor.licenseNumber || "N/A"}</span>
                                </div>
                                <div className="flex items-center gap-2 text-sm">
                                    <Mail className="w-4 h-4 text-muted-foreground" />
                                    <span>{doctor.email}</span>
                                </div>
                                <div className="flex items-center gap-2 text-sm">
                                    <Phone className="w-4 h-4 text-muted-foreground" />
                                    <span>{doctor.phoneNumber}</span>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                ))}
            </div>

            {editingDoctor && (
                <Sheet open={!!editingDoctor} onOpenChange={() => setEditingDoctor(null)}>
                    <SheetContent>
                        <SheetHeader>
                            <SheetTitle>Edit Doctor</SheetTitle>
                        </SheetHeader>
                        <div className="space-y-4 mt-6">
                            <Input
                                placeholder="Username"
                                value={editingDoctor.username}
                                onChange={(e) =>
                                    setEditingDoctor({ ...editingDoctor, username: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Email"
                                type="email"
                                value={editingDoctor.email}
                                onChange={(e) =>
                                    setEditingDoctor({ ...editingDoctor, email: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Phone Number"
                                value={editingDoctor.phoneNumber}
                                onChange={(e) =>
                                    setEditingDoctor({ ...editingDoctor, phoneNumber: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Specialty"
                                value={editingDoctor.specialization}
                                onChange={(e) =>
                                    setEditingDoctor({ ...editingDoctor, specialization: e.target.value })
                                }
                            />
                            <Input
                                placeholder="License Number"
                                value={editingDoctor.licenseNumber}
                                onChange={(e) =>
                                    setEditingDoctor({
                                        ...editingDoctor,
                                        licenseNumber: e.target.value,
                                    })
                                }
                            />
                            <Input
                                placeholder="Badge Number"
                                value={editingDoctor.badgeNumber}
                                onChange={(e) =>
                                    setEditingDoctor({
                                        ...editingDoctor,
                                        badgeNumber: e.target.value,
                                    })
                                }
                            />
                            <Button onClick={handleUpdate} className="w-full">
                                Update Doctor
                            </Button>
                        </div>
                    </SheetContent>
                </Sheet>
            )}
        </div>
    );
};

export default Doctors;

================
File: src/pages/Emergency.jsx
================
import { useState, useEffect, useMemo } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { AlertCircle, Ambulance, Phone, UserCog } from "lucide-react";

const fetchEmergencyPatients = async () => {
    const response = await fetch('/api/emergency-patients'); // API endpoint URL - adjust if needed
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
};

const Emergency = () => {
    const [searchQuery, setSearchQuery] = useState("");
    const [emergencyCases, setEmergencyCases] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const loadEmergencyCases = async () => {
            setLoading(true); // Set loading to true before fetching
            setError(null);     // Clear any previous errors
            try {
                const data = await fetchEmergencyPatients(); // Fetch data from API endpoint
                setEmergencyCases(data); // Update emergencyCases state with fetched data
            } catch (err) {
                console.error("Error fetching emergency cases:", err);
                setError("Failed to load emergency cases."); // Set error state if fetch fails
            } finally {
                setLoading(false); // Set loading to false after fetch completes (success or error)
            }
        };

        loadEmergencyCases(); // Call the data loading function when component mounts
    }, []); // Empty dependency array means this effect runs only once on mount

    const getStatusFromEmergencyLevel = (emergencyLevel) => {
        switch (emergencyLevel) {
            case "critical":
                return "critical";
            case "high":
                return "moderate";
            case "medium":
                return "stable";
            case "low":
                return "minor";
            default:
                return "unknown";
        }
    };

    const getStatusColor = (status) => {
        switch (status) {
            case "critical":
                return "text-red-500";
            case "moderate":
                return "text-yellow-500";
            case "stable":
                return "text-green-500";
            case "minor":
                return "text-gray-500";
            default:
                return "text-gray-500";
        }
    };

    const triageOrder = { critical: 1, high: 2, medium: 3, low: 4 };
    const triagedEmergencyCases = useMemo(() => {
        if (!emergencyCases) return []; // Handle case when emergencyCases is initially null or undefined
        const sortedCases = [...emergencyCases].sort((a, b) => {
            return triageOrder[a.emergencyLevel] - triageOrder[b.emergencyLevel];
        });
        return sortedCases;
    }, [emergencyCases]);

    const filteredEmergencyCases = useMemo(() => {
        return triagedEmergencyCases.filter(emergency =>
            `${emergency.firstName} ${emergency.lastName}`.toLowerCase().includes(searchQuery.toLowerCase())
        );
    }, [searchQuery, triagedEmergencyCases]);

    return (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Emergency Management</h1>
                <Button variant="destructive" className="gap-2">
                    <AlertCircle className="h-4 w-4" />
                    Declare Emergency
                </Button>
            </div>

            <div className="grid gap-6 md:grid-cols-3">
                <Card className="glass-card hover-scale">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Ambulance className="h-5 w-5 text-red-500" />
                            Emergency Contacts
                        </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-2">
                            <div className="flex items-center gap-2">
                                <Phone className="h-4 w-4" />
                                <span>Ambulance: 911</span>
                            </div>
                            <div className="flex items-center gap-2">
                                <UserCog className="h-4 w-4" />
                                <span>On-call Doctor: Dr. Smith</span>
                            </div>
                        </div>
                    </CardContent>
                </Card>

                <Card className="glass-card hover-scale">
                    <CardHeader>
                        <CardTitle>Available Rooms</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-2">
                            <div>Emergency Room 1: Available</div>
                            <div>Emergency Room 2: Occupied</div>
                            <div>Emergency Room 3: Available</div>
                        </div>
                    </CardContent>
                </Card>

                <Card className="glass-card hover-scale">
                    <CardHeader>
                        <CardTitle>Resources</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-2">
                            <div>Available Doctors: 4</div>
                            <div>Available Nurses: 8</div>
                            <div>Available Beds: 6</div>
                        </div>
                    </CardContent>
                </Card>
            </div>

            <Card className="glass-card">
                <CardHeader>
                    <CardTitle>Active Emergency Cases</CardTitle>
                    <Input
                        placeholder="Search cases..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="max-w-sm"
                    />
                </CardHeader>
                <CardContent>
                    {loading ? (
                        <div className="text-center">Loading emergency cases...</div>
                    ) : error ? (
                        <div className="text-red-500 text-center">{error}</div>
                    ) : filteredEmergencyCases.length === 0 ? (
                        <div className="text-center">No active emergency cases found.</div>
                    ) : (
                        <div className="space-y-4">
                            {filteredEmergencyCases.map((emergency) => (
                                <div
                                    key={emergency.id}
                                    className="flex items-center justify-between p-4 border rounded-lg bg-white/50"
                                >
                                    <div>
                                        <h3 className="font-semibold">{emergency.firstName} {emergency.lastName}</h3>
                                        <p className="text-sm text-muted-foreground">
                                            {emergency.location} {/* Consider displaying address or other relevant info */}
                                        </p>
                                    </div>
                                    <div className="flex items-center gap-4">
                                        <span className={`font-medium ${getStatusColor(getStatusFromEmergencyLevel(emergency.emergencyLevel))}`}>
                                            {getStatusFromEmergencyLevel(emergency.emergencyLevel).toUpperCase()}
                                        </span>
                                        <Button size="sm">View Details</Button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
};

export default Emergency;

================
File: src/pages/EmergencyRegister.jsx
================
// src/pages/EmergencyRegister.jsx
import React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import { z } from "zod";
import { AlertTriangle, Heart } from "lucide-react";
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import axios from 'axios';

const emergencyFormSchema = z.object({
    firstName: z.string().min(2, { message: "First name must be at least 2 characters" }),
    lastName: z.string().min(2, { message: "Last name must be at least 2 characters" }),
    dateOfBirth: z.string().min(1, { message: "Date of birth is required" }),
    gender: z.enum(["male", "female", "other"], { required_error: "Please select a gender" }),
    phoneNumber: z.string().min(8, { message: "Invalid phone number" }),
    email: z.string().email({ message: "Invalid email address" }).optional(),
    address: z.string().min(5, { message: "Address must be at least 5 characters" }),
    emergencyContact: z.string().min(8, { message: "Invalid emergency contact" }),
    insuranceInfo: z.string().optional(),
    allergies: z.string().optional(),
    currentMedications: z.string().optional(),
    medicalHistory: z.string().optional(),
    currentSymptoms: z.string().min(5, { message: "Please describe your current symptoms" }),
    painLevel: z.enum(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], { required_error: "Please select your pain level" }),
    emergencyLevel: z.enum(["low", "medium", "high", "critical"], { required_error: "Please select the emergency level" }),
    acceptTerms: z.boolean().refine(val => val === true, { message: "You must accept the terms and conditions" }),
});

const EmergencyRegister = () => {
    const form = useForm({ resolver: zodResolver(emergencyFormSchema), defaultValues: { firstName: "", lastName: "", dateOfBirth: "", gender: "", phoneNumber: "", email: "", address: "", emergencyContact: "", insuranceInfo: "", allergies: "", currentMedications: "", medicalHistory: "", currentSymptoms: "", painLevel: "", emergencyLevel: "", acceptTerms: false } });
    const navigate = useNavigate();

    async function onSubmit(data) {
        try {
            const response = await axios.post('http://localhost:8089/api/emergency-patients', data);
            console.log("Response data after registration (EmergencyRegister):", JSON.stringify(response.data, null, 2)); // Log JSON string
            const patientIdToNavigate = response.data._id;

            toast.success("Your emergency request has been registered", { description: "A member of our medical team will contact you shortly." });
            form.reset();
            navigate('/emergency-confirmation', { state: { formData: data, patientId: patientIdToNavigate } });

        } catch (error) {
            if (error.response) {
                console.error("Server error:", error.response.data);
                if (error.response.data.message && Array.isArray(error.response.data.message)) {
                    error.response.data.message.forEach(errorMessage => { toast.error("Validation Error", { description: errorMessage }); });
                } else {
                    toast.error("Failed to register emergency request", { description: error.response.data.message || "An error occurred on the server." });
                }
            } else if (error.request) {
                console.error("No response received from server");
                toast.error("Failed to register emergency request", { description: "No response received from the server. Please check your network connection." });
            } else {
                console.error("Error setting up request:", error.message);
                toast.error("Failed to register emergency request", { description: "An unexpected error occurred. Please try again later." });
            }
        }
    }

    return (
        <div className="container mx-auto py-6 px-4 md:px-6">
            <Card className="w-full max-w-4xl mx-auto shadow-lg">
                <CardHeader className="bg-gradient-to-r from-blue-500 to-blue-400 text-white">
                    <div className="flex items-center gap-2">
                        <AlertTriangle className="h-6 w-6" />
                        <Heart className="h-6 w-6" />
                    </div>
                    <CardTitle className="text-2xl md:text-3xl font-bold">Patient Emergency Registration</CardTitle>
                    <CardDescription className="text-base">Please fill out this form with your information and the issues you are currently experiencing.</CardDescription>
                </CardHeader>
                <CardContent className="pt-6">
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div className="space-y-6">
                                    <h3 className="text-lg font-medium text-blue-600">Personal Information</h3>
                                    <FormField control={form.control} name="firstName" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">First Name</FormLabel><FormControl><Input placeholder="First Name" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="lastName" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Last Name</FormLabel><FormControl><Input placeholder="Last Name" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="dateOfBirth" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Date of Birth</FormLabel><FormControl><Input type="date" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="gender" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Gender</FormLabel><FormControl><RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex flex-col space-y-1"><FormItem className="flex items-center space-x-3 space-y-0"><FormControl><RadioGroupItem value="male" className="border-blue-500 text-blue-600 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white" /></FormControl><FormLabel className="font-normal text-blue-700">Male</FormLabel></FormItem><FormItem className="flex items-center space-x-3 space-y-0"><FormControl><RadioGroupItem value="female" className="border-blue-500 text-blue-600 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white" /></FormControl><FormLabel className="font-normal text-blue-700">Female</FormLabel></FormItem><FormItem className="flex items-center space-x-3 space-y-0"><FormControl><RadioGroupItem value="other" className="border-blue-500 text-blue-600 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white" /></FormControl><FormLabel className="font-normal text-blue-700">Other</FormLabel></FormItem></RadioGroup></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="phoneNumber" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Phone Number</FormLabel><FormControl><Input placeholder="+1 555-555-5555" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="email" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Email (optional)</FormLabel><FormControl><Input type="email" placeholder="email@example.com" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="address" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Address</FormLabel><FormControl><Textarea placeholder="Your full address" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="emergencyContact" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Emergency Contact</FormLabel><FormControl><Input placeholder="Name and phone number" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormDescription className="text-blue-600">Person to contact in case of emergency</FormDescription><FormMessage className="text-red-500" /></FormItem>)} />
                                </div>
                                <div className="space-y-6">
                                    <h3 className="text-lg font-medium text-blue-600">Medical Information</h3>
                                    <FormField control={form.control} name="insuranceInfo" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Insurance Information (optional)</FormLabel><FormControl><Input placeholder="Insurance policy number" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="allergies" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Allergies (optional)</FormLabel><FormControl><Textarea placeholder="List any known allergies" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="currentMedications" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Current Medications (optional)</FormLabel><FormControl><Textarea placeholder="Medications you are currently taking" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="medicalHistory" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Medical History (optional)</FormLabel><FormControl><Textarea placeholder="Pre-existing medical conditions" {...field} className="border-blue-300 focus:ring-blue-500 focus:border-blue-500" /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="currentSymptoms" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Current Symptoms</FormLabel><FormControl><Textarea placeholder="Describe in detail the symptoms you are experiencing" className="min-h-[120px] border-blue-300 focus:ring-blue-500 focus:border-blue-500" {...field} /></FormControl><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="painLevel" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Pain Level (1-10)</FormLabel><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger className="border-blue-300 focus:ring-blue-500 focus:border-blue-500"><SelectValue placeholder="Select pain level" /></SelectTrigger></FormControl><SelectContent><SelectItem value="1">1 - Very mild</SelectItem><SelectItem value="2">2</SelectItem><SelectItem value="3">3</SelectItem><SelectItem value="4">4</SelectItem><SelectItem value="5">5 - Moderate</SelectItem><SelectItem value="6">6</SelectItem><SelectItem value="7">7</SelectItem><SelectItem value="8">8</SelectItem><SelectItem value="9">9</SelectItem><SelectItem value="10">10 - Unbearable</SelectItem></SelectContent></Select><FormMessage className="text-red-500" /></FormItem>)} />
                                    <FormField control={form.control} name="emergencyLevel" render={({ field }) => (<FormItem><FormLabel className="text-blue-800">Emergency Level</FormLabel><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger className="border-blue-300 focus:ring-blue-500 focus:border-blue-500"><SelectValue placeholder="Select emergency level" /></SelectTrigger></FormControl><SelectContent><SelectItem value="low">Low - I can wait</SelectItem><SelectItem value="medium">Medium - I need to see a doctor today</SelectItem><SelectItem value="high">High - I need care quickly</SelectItem><SelectItem value="critical">Critical - Life-threatening emergency</SelectItem></SelectContent></Select><FormMessage className="text-red-500" /></FormItem>)} />
                                </div>
                            </div>
                            <FormField control={form.control} name="acceptTerms" render={({ field }) => (<FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border border-blue-300 p-4 bg-blue-50"><FormControl><Checkbox checked={field.value} onCheckedChange={field.onChange} className="data-[state=checked]:bg-blue-500 data-[state=checked]:border-blue-500" /></FormControl><div className="space-y-1 leading-none"><FormLabel className="text-blue-800">I accept the terms and conditions and authorize the facility to process my medical data</FormLabel><FormDescription className="text-blue-600">By checking this box, you agree to your information being used for your medical care.</FormDescription></div><FormMessage className="text-red-500" /></FormItem>)} />
                            <Button type="submit" className="w-full bg-blue-500 hover:bg-blue-600 text-white" size="lg">Submit Emergency Request</Button>
                        </form>
                    </Form>
                </CardContent>
            </Card>
        </div>
    );
};

export default EmergencyRegister;

================
File: src/pages/EmergencyStatus.jsx
================
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import axios from 'axios';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Clock, Calendar } from "lucide-react";

const EmergencyStatus = () => {
    const location = useLocation();
    const patientId = location.state?.patientId; // **Correctly get patientId from location.state - NO HARDCODING**
    console.log("PatientId from location.state:", patientId); // Log patientId from state

    const [status, setStatus] = useState('Chargement du statut...');
    const [estimatedWaitTime, setEstimatedWaitTime] = useState('Calcul en cours...');

    const fetchStatus = async () => {
        if (!patientId) {
            console.error("patientId est manquant dans l'état de navigation");
            setStatus("ID patient manquant");
            setEstimatedWaitTime("Indisponible");
            return;
        }
        try {
            const apiUrl = `http://localhost:8089/api/emergency-patients/${patientId}/status`;
            console.log("URL being requested:", apiUrl);
            const response = await axios.get(apiUrl, {
                withCredentials: true,
            });

            const newStatus = response.data.status; // Extract status from response
            setStatus(newStatus); // Set the status state

            switch (newStatus) {
                case "Demande Enregistrée":
                    setEstimatedWaitTime("10-15 minutes");
                    break;
                case "En Cours d'Examen":
                    setEstimatedWaitTime("5-10 minutes");
                    break;
                case "Médecin En Route":
                    setEstimatedWaitTime("2-5 minutes");
                    break;
                case "Traité":
                    setEstimatedWaitTime("Traitement terminé");
                    break;
                case "Annulé":
                    setEstimatedWaitTime("Demande annulée");
                    break;
                default:
                    setEstimatedWaitTime("Indisponible");
            }
        } catch (error) {
            console.error("Erreur lors de la récupération du statut:", error);
            setStatus("Impossible de récupérer le statut");
            setEstimatedWaitTime("Indisponible");
        }
    };

    useEffect(() => {
        console.log("PatientId inside useEffect:", patientId);
        if (patientId) {
            fetchStatus();
            const interval = setInterval(fetchStatus, 5000);
            return () => clearInterval(interval);
        } else {
            console.warn("patientId est manquant, requête de statut annulée.");
        }
    }, [patientId]);

    return (
        <div className="container mx-auto py-12 px-4 md:px-6">
            <Card className="max-w-2xl mx-auto">
                <CardHeader className="flex flex-col space-y-1">
                    <CardTitle className="text-2xl font-bold">
                        <Clock className="mr-2 inline-block h-6 w-6 text-blue-500 align-top" />
                        Statut de Votre Demande d'Urgence
                    </CardTitle>
                    <CardDescription>
                        Suivez l'évolution de votre demande en temps réel.
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="border rounded-md p-6 bg-gray-50">
                        <h4 className="font-semibold mb-4">Statut Actuel :</h4>
                        <p className="text-xl font-semibold text-blue-700">{status}</p>
                        <p className="text-muted-foreground">Dernière mise à jour : {new Date().toLocaleTimeString()}</p>
                    </div>

                    <div className="border rounded-md p-6 bg-blue-50">
                        <h4 className="font-semibold mb-4 flex items-center">
                            <Clock className="mr-2 h-4 w-4 text-blue-600 align-baseline" /> Temps d'Attente Estimé
                        </h4>
                        <p>
                            Le temps d'attente estimé est actuellement de : <span className="font-semibold">{estimatedWaitTime}</span>. Ce temps peut varier en fonction de l'activité du service d'urgence.
                        </p>
                    </div>

                    <div className="flex justify-between">
                        <Button asChild variant="secondary">
                            <Link to="/home">Retour à l'Accueil</Link>
                        </Button>
                        <Button asChild variant="outline">
                            <Link to="/calendar"> <Calendar className="mr-2 h-4 w-4 inline-block align-baseline" /> Prendre un Rendez-vous de Suivi</Link>
                        </Button>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

export default EmergencyStatus;

================
File: src/pages/Forum.jsx
================
import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
    Sheet,
    SheetContent,
    SheetHeader,
    SheetTitle,
    SheetTrigger,
} from "@/components/ui/sheet";
import {
    MessageCircle,
    ThumbsUp,
    MessageSquare,
    Search,
    Filter,
} from "lucide-react";

const initialTopics = [
    {
        id: "1",
        title: "New Treatment Methods Discussion",
        author: "Dr. Sarah Johnson",
        content: "I'd like to discuss the latest treatment methods for cardiac patients. Recent studies have shown promising results with minimally invasive procedures. What are your thoughts on implementing these in our hospital?",
        likes: 15,
        replies: 23,
        date: "2024-02-20",
        category: "Cardiology",
    },
    {
        id: "2",
        title: "Emergency Protocol Updates",
        author: "Dr. Michael Chen",
        content: "We need to review our emergency protocols for the night shift. I've noticed some inconsistencies in our response times. Let's discuss potential improvements and standardization across all departments.",
        likes: 8,
        replies: 12,
        date: "2024-02-19",
        category: "Emergency",
    },
    {
        id: "3",
        title: "Medical Equipment Training Session",
        author: "Dr. Emily Rodriguez",
        content: "We're organizing a training session for the new MRI machine next week. All interested staff members please indicate your preferred time slots. This is mandatory for radiology department staff.",
        likes: 20,
        replies: 18,
        date: "2024-02-18",
        category: "Training",
    },
];

const Forum = () => {
    const [topics, setTopics] = useState(initialTopics);
    const [searchQuery, setSearchQuery] = useState("");
    const [newTopic, setNewTopic] = useState({
        title: "",
        content: "",
        category: "",
    });

    const handleSearch = (query) => {
        setSearchQuery(query);
        // If search query is empty, show all topics
        if (!query.trim()) {
            setTopics(initialTopics);
            return;
        }
        // Filter topics based on search query
        const filtered = initialTopics.filter(
            (topic) =>
                topic.title.toLowerCase().includes(query.toLowerCase()) ||
                topic.content.toLowerCase().includes(query.toLowerCase()) ||
                topic.category.toLowerCase().includes(query.toLowerCase())
        );
        setTopics(filtered);
    };

    const handleLike = (topicId) => {
        setTopics(
            topics.map((topic) =>
                topic.id === topicId
                    ? { ...topic, likes: topic.likes + 1 }
                    : topic
            )
        );
    };

    const handleAddTopic = () => {
        const newTopicData = {
            id: (topics.length + 1).toString(),
            title: newTopic.title,
            author: "Dr. John Doe", // In a real app, this would come from auth
            content: newTopic.content,
            likes: 0,
            replies: 0,
            date: new Date().toISOString().split("T")[0],
            category: newTopic.category,
        };

        setTopics([newTopicData, ...topics]);
        setNewTopic({ title: "", content: "", category: "" });
    };

    return (
        <div className="space-y-6 p-6">
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Medical Forum</h1>
                <Sheet>
                    <SheetTrigger asChild>
                        <Button>
                            <MessageCircle className="w-4 h-4 mr-2" />
                            New Topic
                        </Button>
                    </SheetTrigger>
                    <SheetContent>
                        <SheetHeader>
                            <SheetTitle>Create New Topic</SheetTitle>
                        </SheetHeader>
                        <div className="space-y-4 mt-6">
                            <Input
                                placeholder="Topic Title"
                                value={newTopic.title}
                                onChange={(e) =>
                                    setNewTopic({ ...newTopic, title: e.target.value })
                                }
                            />
                            <Input
                                placeholder="Category"
                                value={newTopic.category}
                                onChange={(e) =>
                                    setNewTopic({ ...newTopic, category: e.target.value })
                                }
                            />
                            <textarea
                                placeholder="Write your topic content here..."
                                className="w-full min-h-[200px] p-4 border rounded-md"
                                value={newTopic.content}
                                onChange={(e) =>
                                    setNewTopic({ ...newTopic, content: e.target.value })
                                }
                            />
                            <Button onClick={handleAddTopic} className="w-full">
                                Post Topic
                            </Button>
                        </div>
                    </SheetContent>
                </Sheet>
            </div>

            <div className="flex gap-4">
                <div className="flex-1">
                    <div className="flex gap-4 mb-6">
                        <div className="flex-1">
                            <div className="relative">
                                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                                <Input
                                    placeholder="Search topics..."
                                    className="pl-10"
                                    value={searchQuery}
                                    onChange={(e) => handleSearch(e.target.value)}
                                />
                            </div>
                        </div>
                        <Button variant="outline">
                            <Filter className="w-4 h-4 mr-2" />
                            Filter
                        </Button>
                    </div>

                    <div className="space-y-4">
                        {topics.map((topic) => (
                            <Card key={topic.id} className="hover:shadow-lg transition-shadow">
                                <CardHeader>
                                    <div className="flex justify-between items-center">
                                        <CardTitle>{topic.title}</CardTitle>
                                        <span className="text-sm text-muted-foreground">
                                            {topic.date}
                                        </span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span className="text-sm text-muted-foreground">
                                            Posted by {topic.author}
                                        </span>
                                        <span className="text-xs bg-secondary px-2 py-1 rounded-full">
                                            {topic.category}
                                        </span>
                                    </div>
                                </CardHeader>
                                <CardContent>
                                    <p className="mb-4">{topic.content}</p>
                                    <div className="flex items-center gap-4 text-sm text-muted-foreground">
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => handleLike(topic.id)}
                                        >
                                            <ThumbsUp className="w-4 h-4 mr-2" />
                                            {topic.likes} Likes
                                        </Button>
                                        <Button variant="ghost" size="sm">
                                            <MessageSquare className="w-4 h-4 mr-2" />
                                            {topic.replies} Replies
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Forum;

================
File: src/pages/index.jsx
================
const Index = () => {
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="text-center">
                <h1 className="text-4xl font-bold mb-4">Welcome to your profile </h1>
                <p className="text-xl text-gray-600">Start here!</p>
            </div>
        </div>
    );
};

export default Index;

================
File: src/pages/Login.jsx
================
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import "bootstrap/dist/css/bootstrap.min.css";

const images = [
  {
    url: "/images/logo0.png",
    title: "Welcome to Our Platform",
    description: "Your journey to amazing experiences starts here.",
  },
  {
    url: "/images/imageurg.jpg",
    title: "Discover New Possibilities",
    description: "Unlock your potential with our innovative solutions.",
  },
  {
    url: "/images/25291-removebg-preview.png",
    title: "Connect With Others",
    description: "Take your real time of waiting.",
  },
];

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  const navigate = useNavigate();

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const response = await axios.post(
        "http://localhost:8089/api/auth/login",
        { email, password },
        { withCredentials: true }
      );
      const userData = response.data.user;
      userData.profilePicture = userData.gender === "male" ? "/images/male.jpg" : "/images/female.jpg";
      sessionStorage.setItem("user", JSON.stringify(userData));
      setMessage(`Connexion réussie ! Bienvenue, ${userData.username}`);
      userData.role === "Patient" ? navigate("/home") : navigate("/dashboard");
    } catch (error) {
      setMessage(error.response?.data?.message || "Erreur lors de la connexion");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleLoginSuccess = async (response) => {
    try {
      const res = await axios.post("http://localhost:8089/api/auth/google-login", {
        token: response.credential,
      });
      localStorage.setItem("user", JSON.stringify(res.data.user));
      localStorage.setItem("token", res.data.token);
      setMessage("Connexion réussie avec Google !");
      navigate("/home");
    } catch (error) {
      setMessage("Erreur lors de l'authentification Google");
    }
  };

  const handleGoogleLoginFailure = () => setMessage("Échec de l'authentification Google");

  return (
    <div className="d-flex vh-100">
      {/* Left Side - Carousel */}
      <div className="d-none d-md-flex col-md-6 position-relative overflow-hidden">
        {images.map((image, index) => (
          <div
            key={index}
            className={`position-absolute w-100 h-100 transition-opacity ${index === currentImageIndex ? "opacity-100" : "opacity-0"}`}
            style={{ transition: "opacity 1s ease-in-out" }}
          >
            <img src={image.url} alt={image.title} className="w-100 h-100 object-fit-cover" />
            <div className="position-absolute bottom-0 p-4 text-white bg-dark bg-opacity-50 w-100">
              <h3 className="mb-1">{image.title}</h3>
              <p>{image.description}</p>
            </div>
          </div>
        ))}

        {/* Indicators */}
        <div className="position-absolute bottom-2 start-50 translate-middle-x d-flex gap-2">
          {images.map((_, index) => (
            <button
              key={index}
              className={`rounded-circle bg-white ${index === currentImageIndex ? "opacity-100" : "opacity-50"}`}
              style={{ width: "10px", height: "10px", border: "none" }}
              onClick={() => setCurrentImageIndex(index)}
            ></button>
          ))}
        </div>
      </div>

      {/* Right Side - Form */}
      <div className="col-12 col-md-6 d-flex flex-column justify-content-center p-5 bg-white shadow">
        <h2 className="mb-3">Sign In</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Email Address</label>
            <input type="email" className="form-control" value={email} onChange={(e) => setEmail(e.target.value)} required />
          </div>
          <div className="mb-3">
            <label className="form-label">Password</label>
            <input type="password" className="form-control" value={password} onChange={(e) => setPassword(e.target.value)} required />
          </div>
          <div className="d-flex justify-content-between mb-3">
            <div className="form-check">
              <input type="checkbox" className="form-check-input" id="rememberMe" />
              <label className="form-check-label" htmlFor="rememberMe">Remember Me</label>
            </div>
            <Link to="/forgotpassword" className="text-primary">Forgot Password?</Link>
          </div>
          <button
            type="submit"
            className="btn w-100"
            style={{ backgroundColor: "#6DDCCF", borderColor: "#6DDCCF", color: "white" }}
            disabled={isLoading}
          >
            {isLoading ? "Connexion en cours..." : "Se connecter"}
          </button>
        </form>

        <div className="mt-3 text-center">Or</div>

        <GoogleOAuthProvider clientId="681587327914-bh8qlfn9kr76hci8d4n0v1mces8ac0r0.apps.googleusercontent.com">
          <div className="d-flex justify-content-center mt-3">
            <GoogleLogin onSuccess={handleGoogleLoginSuccess} onError={handleGoogleLoginFailure} />
          </div>
        </GoogleOAuthProvider>

        {message && (
          <div className={`alert mt-3 ${message.includes("réussie") ? "alert-success" : "alert-danger"}`}>
            {message}
          </div>
        )}

        <p className="text-center mt-3">
          Don't have an account? <Link to="/register" className="text-primary">Sign Up</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

================
File: src/pages/NotFound.jsx
================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
    const location = useLocation();

    useEffect(() => {
        console.error(
            "404 Error: User attempted to access non-existent route:",
            location.pathname
        );
    }, [location.pathname]);

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="text-center">
                <h1 className="text-4xl font-bold mb-4">404</h1>
                <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
                <a href="/" className="text-blue-500 hover:text-blue-700 underline">
                    Return to Home
                </a>
            </div>
        </div>
    );
};

export default NotFound;

================
File: src/pages/Patients.jsx
================
import { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Search, UserPlus, Calendar, Phone, User, Mail, Heart } from "lucide-react";
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";
import axios from "axios";
import { motion, AnimatePresence } from "framer-motion";

const Patients = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [patients, setPatients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const response = await axios.get("http://localhost:8089/api/users/patients", { withCredentials: true });
        setPatients(response.data);
      } catch (err) {
        setError("Impossible de récupérer les patients.");
      } finally {
        setLoading(false);
      }
    };

    fetchPatients();
  }, []);

  const filteredPatients = patients.filter(patient => patient.name.toLowerCase().includes(searchQuery.toLowerCase()));

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* En-tête */}
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-3xl font-bold text-gray-800">Gestion des Patients</h1>
          <Sheet>
            <SheetTrigger asChild>
              <Button className="bg-blue-600 text-white gap-2 hover:bg-blue-500">
                <UserPlus className="h-4 w-4" /> Ajouter Patient
              </Button>
            </SheetTrigger>
            <SheetContent>
              <SheetHeader>
                <SheetTitle>Ajouter un Nouveau Patient</SheetTitle>
              </SheetHeader>
              <div className="space-y-4 mt-6">
                <Input placeholder="Nom Complet" />
                <Input placeholder="Âge" type="number" />
                <Input placeholder="Condition Médicale" />
                <Button className="w-full bg-blue-600 text-white hover:bg-blue-500">Enregistrer</Button>
              </div>
            </SheetContent>
          </Sheet>
        </div>

        {/* Carte de la liste des patients */}
        <Card className="shadow-lg bg-white rounded-lg">
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle className="text-xl font-semibold">Liste des Patients</CardTitle>
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-500" />
                <Input
                  placeholder="Rechercher..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-8 w-72 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
                />
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {loading ? (
              <p className="text-center text-gray-600">Chargement...</p>
            ) : error ? (
              <p className="text-center text-red-500">{error}</p>
            ) : (
              <div className="space-y-4">
                {filteredPatients.map((patient) => (
                  <motion.div
                    key={patient._id}
                    className="flex justify-between items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-all duration-200"
                    whileHover={{ scale: 1.02 }}
                    onClick={() => { setSelectedPatient(patient); setIsDetailsOpen(true); }}
                  >
                    <div>
                      <h3 className="font-semibold text-gray-800">{patient.name}</h3>
                      <p className="text-sm text-gray-600">Âge: {patient.age} | {patient.condition}</p>
                    </div>
                    <Button className="bg-blue-600 text-white hover:bg-blue-500">Voir</Button>
                  </motion.div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Détails du patient (dialogue) */}
        <AnimatePresence>
          {isDetailsOpen && selectedPatient && (
            <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
              <DialogContent className="sm:max-w-[425px]">
                <motion.div
                  initial={{ opacity: 0, y: -20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                >
                  <DialogHeader>
                    <DialogTitle>Détails du Patient</DialogTitle>
                    <DialogDescription>Informations sur {selectedPatient.name}</DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 p-4">
                    <p><strong><User className="inline w-4 h-4" /> Nom:</strong> {selectedPatient.name}</p>
                    <p><strong><Mail className="inline w-4 h-4" /> Email:</strong> {selectedPatient.email}</p>
                    <p><strong><Phone className="inline w-4 h-4" /> Téléphone:</strong> {selectedPatient.phoneNumber}</p>
                    <p><strong><Calendar className="inline w-4 h-4" /> Date de Naissance:</strong> {new Date(selectedPatient.dateOfBirth).toLocaleDateString()}</p>
                    <p><strong><Heart className="inline w-4 h-4" /> Groupe Sanguin:</strong> {selectedPatient.bloodType}</p>
                  </div>
                  <DialogFooter>
                    <DialogClose asChild>
                      <Button className="bg-blue-600 text-white hover:bg-blue-500">Fermer</Button>
                    </DialogClose>
                  </DialogFooter>
                </motion.div>
              </DialogContent>
            </Dialog>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default Patients;

================
File: src/pages/ProfilePage.jsx
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie';
import { toast } from 'sonner';
import { motion } from 'framer-motion';

import ProfileHeader from '../components/ProfileHeader';
import ProfileContent from '../components/ProfileContent';
import LoadingState from '../components/LoadingState';

const ProfilePage = () => {
    const [isEditing, setIsEditing] = useState(false);
    const [activeTab, setActiveTab] = useState('personal');
    const [profileData, setProfileData] = useState({
        personal: {},
        medical: {},
        professional: {}
    });
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);

    // Simulate the API response with dummy data
    useEffect(() => {
        const mockData = {
            personal: {
                username: 'John Appleseed',
                role: 'Doctor',
                email: 'john.appleseed@example.com',
                phone: '+1 (555) 123-4567',
                address: '123 Apple Park Way, Cupertino, CA',
                dateOfBirth: '1980-05-15'
            },
            medical: {},
            professional: {
                department: 'Cardiology',
                specialization: 'Interventional Cardiology',
                experience: '15 years',
                education: 'Stanford Medical School',
                certifications: ['ABIM', 'FACC'],
                languages: ['English', 'Spanish']
            }
        };

        // Simulate API call
        setTimeout(() => {
            setProfileData(mockData);
            setLoading(false);
        }, 1500);

        /* Actual API Call (commented out)
        const token = Cookies.get("token");
        
        axios.get('http://localhost:8089/api/profile', {
          headers: {
            Authorization: `Bearer ${token}`
          }
        })
        .then(response => {
          setProfileData(response.data);
          setLoading(false);
        })
        .catch(error => {
          console.error('Error:', error);
          setError('Error loading profile');
          setLoading(false);
        });
        */
    }, []);

    const handleSave = async () => {
        try {
            setLoading(true);

            // Simulating API call for demo
            await new Promise(resolve => setTimeout(resolve, 800));

            /* Actual API Call (commented out)
            const token = Cookies.get("token");
            const response = await axios.put('http://localhost:8089/api/profile', profileData, {
              headers: {
                Authorization: `Bearer ${token}`
              }
            });
      
            if (response.status === 200) {
              const updatedData = response.data;
              setProfileData(updatedData);
            } else {
              throw new Error('Failed to update profile');
            }
            */

            setIsEditing(false);
            setLoading(false);
            toast.success('Profile updated successfully');
        } catch (error) {
            console.error('Error:', error);
            setError('Error saving changes');
            setLoading(false);
            toast.error('Failed to update profile');
        }
    };

    const handleEdit = (section, field, value) => {
        setProfileData(prev => ({
            ...prev,
            [section]: {
                ...prev[section],
                [field]: value
            }
        }));
    };

    if (loading) return <LoadingState />;

    if (error) {
        return (
            <div className="min-h-screen bg-slate-50 flex flex-col items-center justify-center p-4">
                <motion.div
                    className="bg-white rounded-lg shadow-lg p-6 max-w-md w-full"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                >
                    <div className="text-center">
                        <div className="bg-red-100 text-red-600 p-3 rounded-full inline-flex mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                        </div>
                        <h2 className="text-lg font-semibold text-gray-800 mb-2">Error Loading Profile</h2>
                        <p className="text-gray-600 mb-4">{error}</p>
                        <button
                            onClick={() => window.location.reload()}
                            className="bg-profileBlue-500 hover:bg-profileBlue-600 text-white font-medium py-2 px-4 rounded transition-colors"
                        >
                            Try Again
                        </button>
                    </div>
                </motion.div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-slate-50">
            <ProfileHeader
                username={profileData.personal.username}
                role={profileData.personal.role}
            />

            <div className="container -mt-16 relative z-30 pb-16">
                <ProfileContent
                    profileData={profileData}
                    activeTab={activeTab}
                    setActiveTab={setActiveTab}
                    isEditing={isEditing}
                    setIsEditing={setIsEditing}
                    handleEdit={handleEdit}
                    handleSave={handleSave}
                />
            </div>
        </div>
    );
};

export default ProfilePage;

================
File: src/pages/Records.jsx
================
const Records = () => {
    return (
        <div className="space-y-6">
            <h1 className="text-3xl font-bold">Medical Records</h1>
            {/* Medical records content will go here */}
        </div>
    );
};

export default Records;

================
File: src/pages/Settings.jsx
================
const Settings = () => {
    return (
        <div className="space-y-6">
            <h1 className="text-3xl font-bold">Settings</h1>
            {/* Settings content will go here */}
        </div>
    );
};

export default Settings;

================
File: src/pages/Staff.jsx
================
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Plus } from "lucide-react";
import StaffOverview from "@/components/staff/StaffOverview";
import ResourceManagement from "@/components/staff/ResourceManagement";
import StaffDirectory from "@/components/staff/StaffDirectory";

const staffMembers = [
    {
        id: "1",
        name: "Dr. John Smith",
        role: "Doctor",
        department: "Emergency",
        contact: {
            email: "john.smith@hospital.com",
            phone: "123-456-7890",
        },
        status: "Active",
    },
    {
        id: "2",
        name: "Nurse Sarah Johnson",
        role: "Nurse",
        department: "ICU",
        contact: {
            email: "sarah.j@hospital.com",
            phone: "123-456-7891",
        },
        status: "Off Duty",
    },
];

const resources = [
    {
        id: "1",
        name: "ICU Beds",
        total: 20,
        available: 8,
        type: "bed",
        location: "ICU Wing",
        status: "operational"
    },
    {
        id: "2",
        name: "Operating Rooms",
        total: 5,
        available: 2,
        type: "room",
        location: "Surgery Wing",
        status: "operational"
    },
    {
        id: "3",
        name: "Ventilators",
        total: 15,
        available: 6,
        type: "machine",
        status: "operational"
    },
    {
        id: "4",
        name: "ECG Machines",
        total: 10,
        available: 4,
        type: "equipment",
        status: "operational"
    }
];

const Staff = () => {
    const [searchQuery, setSearchQuery] = useState("");
    const [resourcesSearchQuery, setResourcesSearchQuery] = useState("");

    return (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Staff Management</h1>
                <Sheet>
                    <SheetTrigger asChild>
                        <Button className="gap-2">
                            <Plus className="h-4 w-4" />
                            Add Staff Member
                        </Button>
                    </SheetTrigger>
                    <SheetContent>
                        <SheetHeader>
                            <SheetTitle>Add New Staff Member</SheetTitle>
                        </SheetHeader>
                        <div className="space-y-4 mt-6">
                            <Input placeholder="Full Name" />
                            <Input placeholder="Role" />
                            <Input placeholder="Department" />
                            <Input placeholder="Email" type="email" />
                            <Input placeholder="Phone" type="tel" />
                            <Button className="w-full">Add Staff Member</Button>
                        </div>
                    </SheetContent>
                </Sheet>
            </div>

            <StaffOverview />

            <div className="grid gap-6 md:grid-cols-2">
                <ResourceManagement
                    resources={resources}
                    searchQuery={resourcesSearchQuery}
                    onSearchChange={setResourcesSearchQuery}
                />

                <StaffDirectory
                    staffMembers={staffMembers}
                    searchQuery={searchQuery}
                    onSearchChange={setSearchQuery}
                />
            </div>
        </div>
    );
};

export default Staff;

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
	darkMode: ["class"],
	content: [
	  "./pages/**/*.{ts,tsx,js,jsx}",
	  "./components/**/*.{ts,tsx,js,jsx}",
	  "./app/**/*.{ts,tsx,js,jsx}",
	  "./src/**/*.{ts,tsx,js,jsx}",
	],
	prefix: "",
	theme: {
	  container: {
		center: true,
		padding: '2rem',
		screens: {
		  '2xl': '1400px'
		}
	  },
	  extend: {
		colors: {
		  border: "hsl(var(--border))",
		  input: "hsl(var(--input))",
		  ring: "hsl(var(--ring))",
		  background: "hsl(var(--background))",
		  foreground: "hsl(var(--foreground))",
		  customindigo: '#C4DBFF',
		  primary: {
			DEFAULT: '#42A5FF',
			500: '#42A5FF',
			600: '#1E88E5',
		  },
		  secondary: {
			DEFAULT: "hsl(var(--secondary))",
			foreground: "hsl(var(--secondary-foreground))",
		  },
		  destructive: {
			DEFAULT: "hsl(var(--destructive))",
			foreground: "hsl(var(--destructive-foreground))",
		  },
		  muted: {
			DEFAULT: "hsl(var(--muted))",
			foreground: "hsl(var(--muted-foreground))",
		  },
		  accent: {
			DEFAULT: "hsl(var(--accent))",
			foreground: "hsl(var(--accent-foreground))",
		  },
		  popover: {
			DEFAULT: "hsl(var(--popover))",
			foreground: "hsl(var(--popover-foreground))",
		  },
		  card: {
			DEFAULT: "hsl(var(--card))",
			foreground: "hsl(var(--card-foreground))",
		  },
		  teal: {
			400: "#6DDCCF",
			500: "#5DCFC2",
			600: "#4EC2B5",
		  },
		  sidebar: {
			DEFAULT: 'hsl(var(--sidebar-background))',
			foreground: 'hsl(var(--sidebar-foreground))',
			primary: 'hsl(var(--sidebar-primary))',
			'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
			accent: 'hsl(var(--sidebar-accent))',
			'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
			border: 'hsl(var(--sidebar-border))',
			ring: 'hsl(var(--sidebar-ring))'
		  },
		  profileBlue: {
			50: '#EBF8FF',
			100: '#D1EBFF',
			200: '#A3D8FF',
			300: '#66B8FF',
			400: '#3097FD',
			500: '#0077ED',
			600: '#0062D6',
			700: '#004FB0',
			800: '#00398A',
			900: '#002A66'
		  },
		  profileTeal: {
			50: '#EFFCFC',
			100: '#D0F7F7',
			200: '#A0EEEE',
			300: '#6DE0E0',
			400: '#39CDCE',
			500: '#2BB8B9',
			600: '#1F9596',
			700: '#167273',
			800: '#0F5152',
			900: '#083333'
		  }
		},
		borderRadius: {
		  lg: "var(--radius)",
		  md: "calc(var(--radius) - 2px)",
		  sm: "calc(var(--radius) - 4px)",
		},
		keyframes: {
		  'accordion-down': {
			from: { height: '0' },
			to: { height: 'var(--radix-accordion-content-height)' }
		  },
		  'accordion-up': {
			from: { height: 'var(--radix-accordion-content-height)' },
			to: { height: '0' }
		  },
		  fadeIn: {
			'0%': { opacity: '0' },
			'100%': { opacity: '1' }
		  },
		  slideUpFade: {
			'0%': { transform: 'translateY(20px)', opacity: '0' },
			'100%': { transform: 'translateY(0)', opacity: '1' }
		  },
		  shimmer: {
			'0%': { backgroundPosition: '-500px 0' },
			'100%': { backgroundPosition: '500px 0' }
		  },
		  pulse: {
			'0%, 100%': { opacity: '0.5' },
			'50%': { opacity: '0.8' }
		  }
		},
		animation: {
		  'accordion-down': 'accordion-down 0.2s ease-out',
		  'accordion-up': 'accordion-up 0.2s ease-out',
		  'fade-in': 'fadeIn 0.5s ease-out forwards',
		  'slide-up-fade': 'slideUpFade 0.6s ease-out forwards',
		  'shimmer': 'shimmer 2s infinite linear',
		  'pulse-slow': 'pulse 3s infinite ease-in-out'
		},
		backgroundImage: {
		  'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
		  'profile-gradient': 'linear-gradient(to right, var(--profile-gradient-from), var(--profile-gradient-to))',
		},
		backdropBlur: {
		  xs: '2px',
		},
		transitionProperty: {
		  'height': 'height',
		  'spacing': 'margin, padding',
		}
	  },
	},
	plugins: [require("tailwindcss-animate")],
  };

================
File: vite.config.js
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 3000,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



================================================================
End of Codebase
================================================================
